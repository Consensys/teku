{
  "get" : {
    "tags" : [ "Key Management" ],
    "operationId" : "ListKeys",
    "summary" : "List Keys",
    "description" : "List all validating pubkeys known to and decrypted by this keymanager binary",
    "security" : [ {
      "bearerAuth" : [ ]
    } ],
    "responses" : {
      "200" : {
        "description" : "Success response",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ListKeysResponse"
            }
          }
        }
      },
      "401" : {
        "description" : "Unauthorized, no token is found",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      },
      "403" : {
        "description" : "Forbidden, a token is found but is invalid",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      },
      "400" : {
        "description" : "The request could not be processed, check the response for more information.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      },
      "500" : {
        "description" : "Internal server error",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      }
    }
  },
  "delete" : {
    "tags" : [ "Key Management" ],
    "operationId" : "DeleteKeys",
    "summary" : "Delete Keys",
    "description" : "DELETE must delete all keys from `request.pubkeys` that are known to the key manager.<br>Additionally, DELETE must fetch the slashing protection data for the requested keys, which must be retained after the response has been sent. <br>In the case of two identical delete requests being made, both will have access to slashing protection data.<br>In a single atomic sequential operation the key manager must:<br>1. Guarantee that key(s) can not produce any more signatures; only then<br>2. Delete key(s) and serialize its associated slashing protection data<br><br>DELETE should never return a 404 response, even if all pubkeys from `request.pubkeys` have no key stores or slashing protection data.",
    "requestBody" : {
      "content" : {
        "application/json" : {
          "schema" : {
            "$ref" : "#/components/schemas/DeleteKeysRequest"
          }
        }
      }
    },
    "security" : [ {
      "bearerAuth" : [ ]
    } ],
    "responses" : {
      "200" : {
        "description" : "Success response",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/DeleteKeysResponse"
            }
          }
        }
      },
      "401" : {
        "description" : "Unauthorized, no token is found",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      },
      "403" : {
        "description" : "Forbidden, a token is found but is invalid",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      },
      "400" : {
        "description" : "The request could not be processed, check the response for more information.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      },
      "500" : {
        "description" : "Internal server error",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      }
    }
  },
  "post" : {
    "tags" : [ "Key Management" ],
    "operationId" : "ImportKeystores",
    "summary" : "Import Keystores",
    "description" : "Import keystores generated by the Eth2.0 deposit CLI tooling.",
    "requestBody" : {
      "content" : {
        "application/json" : {
          "schema" : {
            "$ref" : "#/components/schemas/PostKeysRequest"
          }
        }
      }
    },
    "security" : [ {
      "bearerAuth" : [ ]
    } ],
    "responses" : {
      "200" : {
        "description" : "Success response",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/PostKeysResponse"
            }
          }
        }
      },
      "401" : {
        "description" : "Unauthorized, no token is found",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      },
      "403" : {
        "description" : "Forbidden, a token is found but is invalid",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      },
      "400" : {
        "description" : "The request could not be processed, check the response for more information.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      },
      "500" : {
        "description" : "Internal server error",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      }
    }
  }
}
