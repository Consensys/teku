{"openapi":"3.0.1","info":{"title":"Teku","description":"A minimal API specification for the beacon node, which enables a validator to connect and perform its obligations on the Ethereum beacon chain.","license":{"name":"Apache 2.0","url":"https://www.apache.org/licenses/LICENSE-2.0.html"},"version":"v22.9.0+34-g2d9c0da"},"paths":{"/eth/v1/beacon/genesis":{"get":{"tags":["Beacon","Validator Required Api"],"summary":"Get chain genesis details","description":"Retrieve details of the chain's genesis which can be used to identify chain.","operationId":"getEthV1BeaconGenesis","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetGenesisResponse"}}}},"404":{"description":"Chain genesis info is not yet known"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/states/{state_id}/root":{"get":{"tags":["Beacon"],"summary":"Get state root","description":"Calculates HashTreeRoot for state with given 'state_id'. If stateId is root, same value will be returned.","operationId":"getEthV1BeaconStatesWithState_idRoot","parameters":[{"name":"state_id","in":"path","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateRootResponse"}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/states/{state_id}/fork":{"get":{"tags":["Beacon","Validator Required Api"],"summary":"Get state fork","description":"Returns Fork object for state with given 'state_id'.","operationId":"getEthV1BeaconStatesWithState_idFork","parameters":[{"name":"state_id","in":"path","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateForkResponse"}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/states/{state_id}/finality_checkpoints":{"get":{"tags":["Beacon"],"summary":"Get state finality checkpoints","description":"Returns finality checkpoints for state with given 'state_id'. In case finality is not yet achieved, checkpoint should return epoch 0 and ZERO_HASH as root.","operationId":"getEthV1BeaconStatesWithState_idFinality_checkpoints","parameters":[{"name":"state_id","in":"path","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateFinalityCheckpointsResponse"}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/states/{state_id}/validators":{"get":{"tags":["Beacon"],"summary":"Get validators from state","description":"Returns filterable list of validators with their balance, status and index.","operationId":"getEthV1BeaconStatesWithState_idValidators","parameters":[{"name":"state_id","in":"path","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string"}},{"name":"id","in":"query","description":"Either hex encoded public key (with 0x prefix) or validator index","schema":{"type":"array","items":{"type":"string"}}},{"name":"status","in":"query","description":"valid values:   pending_initialized,   pending_queued,   active_ongoing,   active_exiting,   active_slashed,   exited_unslashed,   exited_slashed,   withdrawal_possible,   withdrawal_done","schema":{"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateValidatorsResponse"}}}},"400":{"description":"Bad Request"},"500":{"description":"Server Error"},"404":{"description":"Not Found"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/eth/v1/beacon/states/{state_id}/validators/{validator_id}":{"get":{"tags":["Beacon","Validator Required Api"],"summary":"Get validator from state","description":"Returns validator specified by state and id or public key along with status and balance.","operationId":"getEthV1BeaconStatesWithState_idValidatorsWithValidator_id","parameters":[{"name":"state_id","in":"path","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string"}},{"name":"validator_id","in":"path","description":"Either hex encoded public key (with 0x prefix) or validator index","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateValidatorResponse"}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/eth/v1/beacon/states/{state_id}/validator_balances":{"get":{"tags":["Beacon"],"summary":"Get validator balances from state","description":"Returns filterable list of validator balances.","operationId":"getEthV1BeaconStatesWithState_idValidator_balances","parameters":[{"name":"state_id","in":"path","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string"}},{"name":"id","in":"query","description":"Either hex encoded public key (with 0x prefix) or validator index","schema":{"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateValidatorBalancesResponse"}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/states/{state_id}/committees":{"get":{"tags":["Beacon"],"summary":"Get committees at state","description":"Retrieves the committees for the given state.","operationId":"getEthV1BeaconStatesWithState_idCommittees","parameters":[{"name":"state_id","in":"path","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string"}},{"name":"epoch","in":"query","description":"`uint64` Epoch number to query.","schema":{"type":"string"}},{"name":"index","in":"query","description":"`uint64` Committee index to query.","schema":{"type":"string"}},{"name":"slot","in":"query","description":"`UInt64` Slot to query in the canonical chain.","schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateCommitteesResponse"}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/states/{state_id}/sync_committees":{"get":{"tags":["Beacon","Validator Required Api"],"summary":"Get sync committees","description":"Retrieves the sync committees for the given state.","operationId":"getEthV1BeaconStatesWithState_idSync_committees","parameters":[{"name":"state_id","in":"path","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string"}},{"name":"epoch","in":"query","description":"`uint64` Epoch number to query.","schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateSyncCommitteesResponse"}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/headers":{"get":{"tags":["Beacon"],"summary":"Get block headers","description":"Retrieves block headers matching given query. By default it will fetch current head slot blocks.","operationId":"getEthV1BeaconHeaders","parameters":[{"name":"slot","in":"query","schema":{"type":"string"}},{"name":"parent_root","in":"query","description":"Not currently supported.","schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetBlockHeadersResponse"}}}},"400":{"description":"Bad Request"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/headers/{block_id}":{"get":{"tags":["Beacon"],"summary":"Get block header","description":"Retrieves block header for given block id.","operationId":"getEthV1BeaconHeadersWithBlock_id","parameters":[{"name":"block_id","in":"path","description":"Block identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", &lt;slot&gt;, &lt;hex encoded blockRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetBlockHeaderResponse"}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/blocks":{"post":{"tags":["Beacon","Validator Required Api"],"summary":"Publish a signed block","description":"Submit a signed beacon block to the beacon node to be imported. The beacon node performs the required validation.","operationId":"postEthV1BeaconBlocks","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SignedBlock"}},"application/octet-stream":{"schema":{"$ref":"#/components/schemas/Unit"}}}},"responses":{"200":{"description":"Block has been successfully broadcast, validated and imported."},"202":{"description":"Block has been successfully broadcast, but failed validation and has not been imported."},"400":{"description":"Unable to parse request body."},"415":{"description":"Unsupported media-type supplied in request body."},"500":{"description":"Beacon node experienced an internal error."},"503":{"description":"Beacon node is currently syncing."}}}},"/eth/v1/beacon/blinded_blocks":{"post":{"tags":["Beacon","Validator Required Api"],"summary":"Publish a signed blinded block","description":"Submit a signed blinded beacon block to the beacon node to be imported. The beacon node performs the required validation.","operationId":"postEthV1BeaconBlinded_blocks","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SignedBlindedBlock"}},"application/octet-stream":{"schema":{"$ref":"#/components/schemas/Unit"}}}},"responses":{"200":{"description":"Block has been successfully broadcast, validated and imported."},"202":{"description":"Block has been successfully broadcast, but failed validation and has not been imported."},"400":{"description":"Unable to parse request body."},"415":{"description":"Unsupported media-type supplied in request body."},"500":{"description":"Beacon node experienced an internal error."},"503":{"description":"Beacon node is currently syncing."}}}},"/eth/v1/beacon/blocks/{block_id}":{"get":{"tags":["Beacon"],"summary":"Get block","description":"Retrieves block details for given block id.\n\n__NOTE__: only phase 0 blocks are returned, use `/eth/v2/beacon/blocks/{block_id}` for multiple milestone support.","operationId":"getEthV1BeaconBlocksWithBlock_id","parameters":[{"name":"block_id","in":"path","description":"Block identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", &lt;slot&gt;, &lt;hex encoded blockRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetBlockResponse"}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}},"deprecated":true}},"/eth/v2/beacon/blocks/{block_id}":{"get":{"tags":["Beacon"],"summary":"Get block","description":"Retrieves block details for given block id.","operationId":"getEthV2BeaconBlocksWithBlock_id","parameters":[{"name":"block_id","in":"path","description":"Block identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", &lt;slot&gt;, &lt;hex encoded blockRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetBlockResponseV2"}},"application/octet-stream":{"schema":{"$ref":"#/components/schemas/Unit"}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/eth/v1/checkpoint/finalized_state":{"get":{"tags":["Experimental"],"summary":"Get finalized checkpoint state","description":"Returns the latest finalized BeaconState.","operationId":"getEthV1CheckpointFinalized_state","responses":{"200":{"description":"OK","content":{"application/octet-stream":{"schema":{"$ref":"#/components/schemas/Unit"}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/eth/v1/beacon/blocks/{block_id}/root":{"get":{"tags":["Beacon"],"summary":"Get block root","description":"Retrieves hashTreeRoot of BeaconBlock/BeaconBlockHeader","operationId":"getEthV1BeaconBlocksWithBlock_idRoot","parameters":[{"name":"block_id","in":"path","description":"Block identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", &lt;slot&gt;, &lt;hex encoded blockRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetBlockRootResponse"}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/eth/v1/checkpoint/finalized_blocks/{slot}/root":{"get":{"tags":["Experimental"],"summary":"Get finalized block root","description":"Retrieves hashTreeRoot of the finalized beacon block","operationId":"getEthV1CheckpointFinalized_blocksWithSlotRoot","parameters":[{"name":"slot","in":"path","description":"The slot for which the block should be proposed.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetHashTreeRootResponse"}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/blocks/{block_id}/attestations":{"get":{"tags":["Beacon"],"summary":"Get block attestations","description":"Retrieves attestations included in requested block.","operationId":"getEthV1BeaconBlocksWithBlock_idAttestations","parameters":[{"name":"block_id","in":"path","description":"Block identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", &lt;slot&gt;, &lt;hex encoded blockRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetBlockAttestationsResponse"}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/pool/attestations":{"get":{"tags":["Beacon"],"summary":"Get attestations","description":"Retrieves attestations known by the node but not necessarily incorporated into any block.","operationId":"getEthV1BeaconPoolAttestations","parameters":[{"name":"slot","in":"query","description":"`UInt64` Slot to query in the canonical chain.","schema":{"type":"string"}},{"name":"committee_index","in":"query","description":"`uint64` Committee index to query.","schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetAttestationsResponse"}}}},"400":{"description":"Bad Request"},"500":{"description":"Server Error"}}},"post":{"tags":["Beacon","Validator Required Api"],"summary":"Submit signed attestations","description":"Submit signed attestations to the beacon node to be validated and submitted if valid.\n\nThis endpoint does not protected against slashing.","operationId":"postEthV1BeaconPoolAttestations","requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Attestation"}}}}},"responses":{"200":{"description":"The Attestation was accepted, validated, and submitted"},"400":{"description":"Errors with one or more sync committee messages","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PostDataFailureResponse"}}}},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/pool/attester_slashings":{"get":{"tags":["Beacon"],"summary":"Get AttesterSlashings","description":"Retrieves attester slashings known by the node but not necessarily incorporated into any block.","operationId":"getEthV1BeaconPoolAttester_slashings","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetAttesterSlashingsResponse"}}}},"500":{"description":"Server Error"}}},"post":{"tags":["Beacon"],"summary":"Submit attester slashing object","description":"Submits attester slashing object to node's pool and if passes validation node MUST broadcast it to network.","operationId":"postEthV1BeaconPoolAttester_slashings","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AttesterSlashing"}}}},"responses":{"200":{"description":"Attester Slashing has been successfully validated, added to the pool, and broadcast."},"400":{"description":"Invalid attester slashing, it will never pass validation so it's rejected"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/pool/proposer_slashings":{"get":{"tags":["Beacon"],"summary":"Get proposer slashings","description":"Retrieves proposer slashings known by the node but not necessarily incorporated into any block.","operationId":"getEthV1BeaconPoolProposer_slashings","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetProposerSlashingsResponse"}}}},"500":{"description":"Server Error"}}},"post":{"tags":["Beacon"],"summary":"Submit proposer slashing object","description":"Submits proposer slashing object to node's pool and if passes validation node MUST broadcast it to network.","operationId":"postEthV1BeaconPoolProposer_slashings","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProposerSlashing"}}}},"responses":{"200":{"description":"Proposer Slashing has been successfully validated, added to the pool, and broadcast."},"400":{"description":"Invalid proposer slashing, it will never pass validation so it's rejected"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/pool/voluntary_exits":{"get":{"tags":["Beacon"],"summary":"Get signed voluntary exits","description":"Retrieves voluntary exits known by the node but not necessarily incorporated into any block.","operationId":"getEthV1BeaconPoolVoluntary_exits","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetVoluntaryExitsResponse"}}}},"500":{"description":"Server Error"}}},"post":{"tags":["Beacon"],"summary":"Submit signed voluntary exit","description":"Submits signed voluntary exit object to node's pool and if it passes validation node MUST broadcast it to network.","operationId":"postEthV1BeaconPoolVoluntary_exits","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SignedVoluntaryExit"}}}},"responses":{"200":{"description":"Signed voluntary exit has been successfully validated, added to the pool, and broadcast."},"400":{"description":"Invalid voluntary exit, it will never pass validation so it's rejected"},"500":{"description":"Server Error"}}}},"/eth/v1/beacon/pool/sync_committees":{"post":{"tags":["Beacon","Validator Required Api"],"summary":"Submit sync committee messages to node","description":"Submits sync committee message objects to the node.\n\nSync committee messages are not present in phase0, but are required for Altair networks.\n\nIf a sync committee message is validated successfully the node MUST publish that sync committee message on all applicable subnets.\n\nIf one or more sync committee messages fail validation the node MUST return a 400 error with details of which sync committee messages have failed, and why.","operationId":"postEthV1BeaconPoolSync_committees","requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/SyncCommitteeMessage"}}}}},"responses":{"200":{"description":"The sync committee messages were accepted, validated, and submitted"},"400":{"description":"Errors with one or more sync committee messages","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PostDataFailureResponse"}}}},"500":{"description":"Server Error"}}}},"/eth/v1/validator/liveness":{"post":{"tags":["Experimental"],"summary":"Get Validator Liveness","description":"Requests the beacon node to indicate if a validator has been    observed to be live in a given epoch. The beacon node might detect liveness by    observing messages from the validator on the network, in the beacon chain,    from its API or from any other source. It is important to note that the    values returned by the beacon node are not canonical; they are best-effort    and based upon a subjective view of the network.","operationId":"postEthV1ValidatorLiveness","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ValidatorLivenessRequest"}}}},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PostValidatorLivenessResponse"}}}},"400":{"description":"Invalid parameter supplied"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/eth/v1/events":{"get":{"tags":["Events","Validator Required Api"],"summary":"Subscribe to node events","description":"Provides endpoint to subscribe to beacon node Server-Sent-Events stream. Consumers should use [eventsource](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface) implementation to listen on those events.\n\nServers _may_ send SSE comments beginning with `:` for any purpose, including to keep the event stream connection alive in the presence of proxy servers.","operationId":"getEthV1Events","parameters":[{"name":"topics","in":"query","description":"Event types to subscribe to. Available values include: [`head`, `finalized_checkpoint`, `chain_reorg`, `block`, `attestation`, `voluntary_exit`, `contribution_and_proof`]\n\n","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"text/event-stream":{"schema":{"type":"string"}}}},"400":{"description":"Bad Request"},"500":{"description":"Server Error"}}}},"/eth/v1/node/health":{"get":{"tags":["Node"],"summary":"Get node health","description":"Returns node health status in http status codes. Useful for load balancers.","operationId":"getEthV1NodeHealth","parameters":[{"name":"syncing_status","in":"query","description":"Customize syncing status instead of default status code (206)","schema":{"type":"string"}}],"responses":{"200":{"description":"Node is ready"},"206":{"description":"Node is syncing but can serve incomplete data"},"503":{"description":"Node not initialized or having issues"}}}},"/eth/v1/node/identity":{"get":{"tags":["Node"],"summary":"Get node identity","description":"Retrieves data about the node's network presence.","operationId":"getEthV1NodeIdentity","responses":{"200":{"description":"The identifying information of the node.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IdentityResponse"}}}},"500":{"description":"Server Error"}}}},"/eth/v1/node/peers":{"get":{"tags":["Node"],"summary":"Get node peers","description":"Retrieves data about the node's network peers.","operationId":"getEthV1NodePeers","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PeersResponse"}}}},"500":{"description":"Server Error"}}}},"/eth/v1/node/peer_count":{"get":{"tags":["Node"],"summary":"Get peer count","description":"Retrieves number of known peers.","operationId":"getEthV1NodePeer_count","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetPeerCountResponse"}}}},"500":{"description":"Server Error"}}}},"/eth/v1/node/peers/{peer_id}":{"get":{"tags":["Node"],"summary":"Get node peer","description":"Retrieves data about the given peer.","operationId":"getEthV1NodePeersWithPeer_id","parameters":[{"name":"peer_id","in":"path","description":"Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PeerResponse"}}}},"404":{"description":"Peer not found"},"500":{"description":"Server Error"}}}},"/eth/v1/node/syncing":{"get":{"tags":["Node","Validator Required Api"],"summary":"Get node syncing status","description":"Requests the beacon node to describe if it's currently syncing or not, and if it is, what block it is up to.","operationId":"getEthV1NodeSyncing","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncingResponse"}}}},"500":{"description":"Server Error"}}}},"/eth/v1/node/version":{"get":{"tags":["Node"],"summary":"Get node version","description":"similar to [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).","operationId":"getEthV1NodeVersion","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/VersionResponse"}}}}}}},"/eth/v1/validator/duties/attester/{epoch}":{"post":{"tags":["Validator","Validator Required Api"],"summary":"Get attester duties","description":"Requests the beacon node to provide a set of attestation duties, which should be performed by validators, for a particular epoch. Duties should only need to be checked once per epoch, however a chain reorganization (of > MIN_SEED_LOOKAHEAD epochs) could occur, resulting in a change of duties. For full safety, you should monitor head events and confirm the dependent root in this response matches:\n- event.previous_duty_dependent_root when `compute_epoch_at_slot(event.slot) == epoch`\n- event.current_duty_dependent_root when `compute_epoch_at_slot(event.slot) + 1 == epoch`\n- event.block otherwise\n\nThe dependent_root value is `get_block_root_at_slot(state, compute_start_slot_at_epoch(epoch - 1) - 1)` or the genesis block root in the case of underflow.","operationId":"postEthV1ValidatorDutiesAttesterWithEpoch","parameters":[{"name":"epoch","in":"path","required":true,"schema":{"type":"string"}}],"requestBody":{"description":"An array of the validator indices for which to obtain the duties.\n\n```\n[\n  \"(uint64)\",\n  ...\n]\n```\n\n","content":{"application/json":{"schema":{"type":"array","items":{"type":"string"}}}}},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PostAttesterDutiesResponse"}}}},"400":{"description":"Bad Request"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/eth/v1/validator/duties/proposer/{epoch}":{"get":{"tags":["Validator","Validator Required Api"],"summary":"Get proposer duties","description":"Request beacon node to provide all validators that are scheduled to propose a block in the given epoch.\n\nDuties should only need to be checked once per epoch, however a chain reorganization could occur that results in a change of duties. For full safety, you should monitor head events and confirm the dependent root in this response matches:\n- event.current_duty_dependent_root when `compute_epoch_at_slot(event.slot) == epoch`\n- event.block otherwise\n\nThe dependent_root value is `get_block_root_at_slot(state, compute_start_slot_at_epoch(epoch) - 1)` or the genesis block root in the case of underflow.","operationId":"getEthV1ValidatorDutiesProposerWithEpoch","parameters":[{"name":"epoch","in":"path","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetProposerDutiesResponse"}}}},"400":{"description":"Bad Request"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/eth/v1/validator/blocks/{slot}":{"get":{"tags":["Validator","Validator Required Api"],"summary":"Produce unsigned block","description":"Requests a beacon node to produce a valid block, which can then be signed by a validator.\n\n__NOTE__: deprecated, switch to using `/eth/v2/validator/blocks/{slot}` for multiple milestone support.","operationId":"getEthV1ValidatorBlocksWithSlot","parameters":[{"name":"slot","in":"path","description":"The slot for which the block should be proposed.","required":true,"schema":{"type":"string"}},{"name":"randao_reveal","in":"query","description":"`BLSSignature Hex` BLS12-381 signature for the current epoch.","required":true,"schema":{"type":"string"}},{"name":"graffiti","in":"query","description":"`Bytes32 Hex` Graffiti.","schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetNewBlockResponse"}}}},"400":{"description":"Invalid parameter supplied"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}},"deprecated":true}},"/eth/v2/validator/blocks/{slot}":{"get":{"tags":["Validator","Validator Required Api"],"summary":"Produce unsigned block","description":"Requests a beacon node to produce a valid block, which can then be signed by a validator.","operationId":"getEthV2ValidatorBlocksWithSlot","parameters":[{"name":"slot","in":"path","description":"The slot for which the block should be proposed.","required":true,"schema":{"type":"string"}},{"name":"randao_reveal","in":"query","description":"`BLSSignature Hex` BLS12-381 signature for the current epoch.","required":true,"schema":{"type":"string"}},{"name":"graffiti","in":"query","description":"`Bytes32 Hex` Graffiti.","schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetNewBlockResponseV2"}},"application/octet-stream":{"schema":{"$ref":"#/components/schemas/Unit"}}}},"400":{"description":"Invalid parameter supplied"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/eth/v1/validator/blinded_blocks/{slot}":{"get":{"tags":["Validator","Validator Required Api"],"summary":"Produce unsigned blinded block","description":"Requests a beacon node to produce a valid blinded block, which can then be signed by a validator. A blinded block is a block with only a transactions root, rather than a full transactions list.\n\nMetadata in the response indicates the type of block produced, and the supported types of block will be added to as forks progress.\n\nPre-Bellatrix, this endpoint will return a `BeaconBlock`.","operationId":"getEthV1ValidatorBlinded_blocksWithSlot","parameters":[{"name":"slot","in":"path","description":"The slot for which the block should be proposed.","required":true,"schema":{"type":"string"}},{"name":"randao_reveal","in":"query","description":"`BLSSignature Hex` BLS12-381 signature for the current epoch.","required":true,"schema":{"type":"string"}},{"name":"graffiti","in":"query","description":"`Bytes32 Hex` Graffiti.","schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetNewBlindedBlockResponse"}},"application/octet-stream":{"schema":{"$ref":"#/components/schemas/Unit"}}}},"400":{"description":"Invalid parameter supplied"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/eth/v1/validator/attestation_data":{"get":{"tags":["Validator","Validator Required Api"],"summary":"Produce an AttestationData","description":"Returns attestation data for the block at the specified non-finalized slot.\n\nThis endpoint is not protected against slashing. Signing the returned attestation data can result in a slashable offence.","operationId":"getEthV1ValidatorAttestation_data","parameters":[{"name":"slot","in":"query","description":"`uint64` The slot for which an attestation data should be created.","required":true,"schema":{"type":"string"}},{"name":"committee_index","in":"query","description":"`Integer` The committee index for which an attestation data should be created.","required":true,"schema":{"type":"integer","format":"int32"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetAttestationDataResponse"}}}},"400":{"description":"Invalid parameter supplied"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/eth/v1/validator/aggregate_attestation":{"get":{"tags":["Validator","Validator Required Api"],"summary":"Get aggregated attestations","description":"Aggregates all attestations matching given attestation data root and slot.","operationId":"getEthV1ValidatorAggregate_attestation","parameters":[{"name":"attestation_data_root","in":"query","description":"`String` HashTreeRoot of AttestationData that validator wants aggregated.","required":true,"schema":{"type":"string"}},{"name":"slot","in":"query","description":"`uint64` Non-finalized slot for which to create the aggregation.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Returns aggregated `Attestation` object with same `AttestationData` root.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetAggregatedAttestationResponse"}}}},"400":{"description":"Invalid parameter supplied"},"404":{"description":"No matching attestations were found"},"403":{"description":"Beacon node was not assigned to aggregate on that subnet"},"500":{"description":"Beacon node internal error."}}}},"/eth/v1/validator/aggregate_and_proofs":{"post":{"tags":["Validator","Validator Required Api"],"summary":"Publish aggregate and proofs","description":"Verifies given aggregate and proofs and publishes it on appropriate gossipsub topic.","operationId":"postEthV1ValidatorAggregate_and_proofs","requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/SignedAggregateAndProof"}}}}},"responses":{"200":{"description":"Successfully published aggregate."},"400":{"description":"Invalid parameter supplied."},"500":{"description":"Beacon node internal error."}}}},"/eth/v1/validator/beacon_committee_subscriptions":{"post":{"tags":["Validator","Validator Required Api"],"summary":"Subscribe to a committee subnet","description":"After Beacon node receives this request, search using discv5 for peers related to this subnet and replace current peers with those ones if necessary If validator is_aggregator, beacon node must:\n- announce subnet topic subscription on gossipsub\n- aggregate attestations received on that subnet\n","operationId":"postEthV1ValidatorBeacon_committee_subscriptions","requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/BeaconCommitteeSubscriptionRequest"}}}}},"responses":{"200":{"description":"Slot signature is valid and beacon node has prepared the attestation subnet. Note that, there is no guarantee the node will find peers for the subnet"},"400":{"description":"Invalid request syntax."},"500":{"description":"Beacon node internal error."},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/eth/v1/validator/duties/sync/{epoch}":{"post":{"tags":["Validator","Validator Required Api"],"summary":"Get sync committee duties","description":"Requests the beacon node to provide a set of sync committee duties","operationId":"postEthV1ValidatorDutiesSyncWithEpoch","parameters":[{"name":"epoch","in":"path","required":true,"schema":{"type":"string"}}],"requestBody":{"description":"An array of the validator indices for which to obtain the duties.\n\n```\n[\n  \"(uint64)\",\n  ...\n]\n```\n\n","content":{"application/json":{"schema":{"type":"array","items":{"type":"string"}}}}},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PostSyncDutiesResponse"}}}},"400":{"description":"Bad Request"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/eth/v1/validator/sync_committee_contribution":{"get":{"tags":["Validator","Validator Required Api"],"summary":"Produce a sync committee contribution","description":"Returns a `SyncCommitteeContribution` that is the aggregate of `SyncCommitteeMessage` values known to this node matching the specified slot, subcommittee index and beacon block root.","operationId":"getEthV1ValidatorSync_committee_contribution","parameters":[{"name":"slot","in":"query","description":"`uint64` The slot for which a sync committee contribution should be created.","required":true,"schema":{"type":"string"}},{"name":"subcommittee_index","in":"query","description":"`uint64` The subcommittee index for which to produce the contribution.","required":true,"schema":{"type":"string"}},{"name":"beacon_block_root","in":"query","description":"`bytes32` The block root for which to produce the contribution.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetSyncCommitteeContributionResponse"}}}},"400":{"description":"Invalid request syntax."},"404":{"description":"No matching sync committee messages were found"},"500":{"description":"Beacon node internal error."}}}},"/eth/v1/validator/sync_committee_subscriptions":{"post":{"tags":["Validator","Validator Required Api"],"summary":"Subscribe to a Sync committee subnet","description":"Subscribe to a number of sync committee subnets\n\nSync committees are not present in phase0, but are required for Altair networks.\n\nSubscribing to sync committee subnets is an action performed by VC to enable network participation in Altair networks, and only required if the VC has an active validator in an active sync committee.","operationId":"postEthV1ValidatorSync_committee_subscriptions","requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/SyncCommitteeSubnetSubscription"}}}}},"responses":{"200":{"description":"OK"},"400":{"description":"Invalid request syntax."},"500":{"description":"Beacon node internal error."}}}},"/eth/v1/validator/contribution_and_proofs":{"post":{"tags":["Validator","Validator Required Api"],"summary":"Publish contribution and proofs","description":"Verifies given sync committee contribution and proofs and publishes on appropriate gossipsub topics.","operationId":"postEthV1ValidatorContribution_and_proofs","requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/SignedContributionAndProof"}}}}},"responses":{"200":{"description":"Successfully published contribution and proofs."},"400":{"description":"Invalid parameter supplied."},"500":{"description":"Beacon node internal error."}}}},"/eth/v1/validator/prepare_beacon_proposer":{"post":{"tags":["Validator","Validator Required Api"],"summary":"Prepare Beacon Proposers","description":"Prepares the beacon node for potential proposers by supplying information required when proposing blocks for the given validators. The information supplied for each validator index is considered persistent until overwritten by new information for the given validator index, or until the beacon node restarts.\n\nNote that because the information is not persistent across beacon node restarts it is recommended that either the beacon node is monitored for restarts or this information is refreshed by resending this request periodically (for example, each epoch).\n\nAlso note that requests containing currently inactive or unknown validator indices will be accepted, as they may become active at a later epoch.","operationId":"postEthV1ValidatorPrepare_beacon_proposer","requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/BeaconPreparableProposer"}}}}},"responses":{"200":{"description":"Preparation information has been received."},"400":{"description":"Invalid parameter supplied."},"500":{"description":"Beacon node internal error."}}}},"/eth/v1/validator/register_validator":{"post":{"tags":["Validator","Validator Required Api"],"summary":"Register validators with builder","description":"Prepares the beacon node for potential proposers by supplying information required when proposing blocks for the given validators. The information supplied for each validator index is considered persistent until overwritten by new information for the given validator index, or until the beacon node restarts.\n\nNote that because the information is not persistent across beacon node restarts it is recommended that either the beacon node is monitored for restarts or this information is refreshed by resending this request periodically (for example, each epoch).\n\nAlso note that registrations for exited validators will be filtered out and not sent to the builder network. However, registrations for inactive or unknown validators will be sent, as they may become active at a later epoch.","operationId":"postEthV1ValidatorRegister_validator","requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/PostRegisterValidatorRequest"}}}}},"responses":{"200":{"description":"Preparation information has been received."},"400":{"description":"Invalid parameter supplied."},"500":{"description":"Beacon node internal error."}}}},"/eth/v1/config/deposit_contract":{"get":{"tags":["Config"],"summary":"Get deposit contract address","description":"Retrieve deposit contract address and genesis fork version.","operationId":"getEthV1ConfigDeposit_contract","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetDepositContractResponse"}}}},"500":{"description":"Server Error"}}}},"/eth/v1/config/fork_schedule":{"get":{"tags":["Config"],"summary":"Get scheduled forks","description":"Retrieve all scheduled upcoming forks this node is aware of.","operationId":"getEthV1ConfigFork_schedule","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetForkScheduleResponse"}}}},"500":{"description":"Server Error"}}}},"/eth/v1/config/spec":{"get":{"tags":["Config","Validator Required Api"],"summary":"Get spec params","description":"Retrieve specification configuration used on this node.","operationId":"getEthV1ConfigSpec","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetSpecResponse"}}}},"500":{"description":"Server Error"}}}},"/eth/v1/debug/beacon/heads":{"get":{"tags":["Debug"],"summary":"Get fork choice leaves","description":"Retrieves all possible chain heads (leaves of fork choice tree).\n\nDeprecated - use `/eth/v2/debug/beacon/heads","operationId":"getEthV1DebugBeaconHeads","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetChainHeadsResponse"}}}},"500":{"description":"Server Error"}},"deprecated":true}},"/eth/v2/debug/beacon/heads":{"get":{"tags":["Debug"],"summary":"Get fork choice leaves","description":"Retrieves all possible chain heads (leaves of fork choice tree).","operationId":"getEthV2DebugBeaconHeads","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetChainHeadsResponseV2"}}}},"500":{"description":"Server Error"}}}},"/eth/v1/debug/beacon/states/{state_id}":{"get":{"tags":["Debug"],"summary":"Get state","description":"Returns full BeaconState object for given state_id.\n\nUse Accept header to select `application/octet-stream` if SSZ response type is required.\n\n__NOTE__: Only phase0 beacon state will be returned in JSON, use `/eth/v2/beacon/states/{state_id}` for altair.","operationId":"getEthV1DebugBeaconStatesWithState_id","parameters":[{"name":"state_id","in":"path","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateResponse"}},"application/octet-stream":{"schema":{"$ref":"#/components/schemas/Unit"}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}},"deprecated":true}},"/eth/v2/debug/beacon/states/{state_id}":{"get":{"tags":["Debug"],"summary":"Get state","description":"Returns full BeaconState object for given state_id.\n\nUse Accept header to select `application/octet-stream` if SSZ response type is required.","operationId":"getEthV2DebugBeaconStatesWithState_id","parameters":[{"name":"state_id","in":"path","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateResponseV2"}},"application/octet-stream":{"schema":{"$ref":"#/components/schemas/Unit"}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/teku/v1/admin/log_level":{"put":{"tags":["Teku"],"summary":"Changes the log level without restarting.","description":"Changes the log level without restarting. You can change the log level for all logs, or the log level for specific packages or classes.","operationId":"putTekuV1AdminLog_level","requestBody":{"description":"```\n{\n  \"level\": (String; acceptable values: ALL, TRACE, DEBUG, INFO, ERROR, FATAL, OFF ),\n  \"log_filter\": [(String; Optional)]\n}\n```","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LogLevel"}}}},"responses":{"204":{"description":"The LogLevel was accepted and applied"},"400":{"description":"Invalid body supplied."},"500":{"description":"Server Error"}}}},"/teku/v1/beacon/blocks/{block_id}/state":{"get":{"tags":["Teku"],"summary":"Get SSZ State By Block id","description":"Download the state SSZ object for given identifier - by block root, keyword, or slot.","operationId":"getTekuV1BeaconBlocksWithBlock_idState","parameters":[{"name":"block_id","in":"path","description":"Block identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", &lt;slot&gt;, &lt;hex encoded blockRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/octet-stream":{"schema":{"$ref":"#/components/schemas/Unit"}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/teku/v1/admin/liveness":{"get":{"tags":["Teku"],"summary":"Returns 200 if the node is up even if it is syncing.","operationId":"getTekuV1AdminLiveness","parameters":[{"name":"failOnRejectedCount","in":"query","description":"If set, the node will return 503 if any rejected execution exceptions have been found recently.","schema":{"type":"string"}}],"responses":{"200":{"description":"OK"}}}},"/teku/v1/admin/readiness":{"get":{"tags":["Teku"],"summary":"Get node readiness","description":"Returns 200 if the node is ready to accept traffic","operationId":"getTekuV1AdminReadiness","parameters":[{"name":"target_peer_count","in":"query","description":"Returns 503 status code when current peer count is below than target","schema":{"type":"string"}}],"responses":{"200":{"description":"Node is ready"},"400":{"description":"Cannot parse target_peer_count parameter passed in request"},"503":{"description":"Node not initialized or having issues"}}}},"/teku/v1/beacon/blocks/{slot}":{"get":{"tags":["Teku"],"summary":"Get blocks at slot","description":"Get all blocks (canonical and non-canonical) by slot.","operationId":"getTekuV1BeaconBlocksWithSlot","parameters":[{"name":"slot","in":"path","description":"slot of the blocks to retrieve.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetAllBlocksAtSlotResponse"}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/teku/v1/nodes/peer_scores":{"get":{"tags":["Teku"],"summary":"Get peer scores","description":"Retrieves data about the node's network peers.","operationId":"getTekuV1NodesPeer_scores","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetPeerScoresResponse"}}}},"500":{"description":"Server Error"}}}},"/teku/v1/debug/beacon/protoarray":{"get":{"tags":["Teku"],"summary":"Get current fork choice data","description":"Get the raw data stored in the fork choice protoarray to aid debugging. This API is considered unstable and the returned data format may change in the future.","operationId":"getTekuV1DebugBeaconProtoarray","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetProtoArrayResponse"}}}},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/teku/v1/beacon/proposers_data":{"get":{"tags":["Experimental"],"summary":"Get current prepared beacon proposers and registered validators","description":"Get the current proposers information held by beacon node as result of prepare_beacon_proposer and register_validator validator API calls. This API is considered unstable and the returned data format may change in the future.","operationId":"getTekuV1BeaconProposers_data","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetProposersDataResponse"}}}},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing and not serving requests"}}}},"/teku/v1/beacon/pool/deposits":{"get":{"tags":["Teku"],"summary":"Get deposits","description":"Get all deposits currently held for inclusion in future blocks.","operationId":"getTekuV1BeaconPoolDeposits","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetDepositsResponse"}}}},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/teku/v1/beacon/pool/eth1data":{"get":{"tags":["Teku"],"summary":"Get new Eth1Data","description":"Eth1Data that would be used in a new block created based on the current head.","operationId":"getTekuV1BeaconPoolEth1data","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetEth1DataResponse"}}}},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/teku/v1/beacon/pool/eth1cache":{"get":{"tags":["Teku"],"summary":"Get cached eth1 blocks","description":"Get all of the eth1 blocks currently cached by the beacon node, that could be considered for inclusion during block production.","operationId":"getTekuV1BeaconPoolEth1cache","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetEth1DataCacheResponse"}}}},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/teku/v1/beacon/state/{state_id}/eth1voting":{"get":{"tags":["Teku"],"summary":"Get Eth1 voting summary","description":"Returns information about the current state of voting for Eth1Data from the specified state.","operationId":"getTekuV1BeaconStateWithState_idEth1voting","parameters":[{"name":"state_id","in":"path","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetEth1VotingSummaryResponse"}}}},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/teku/v1/beacon/deposit_snapshot":{"get":{"tags":["Teku"],"summary":"Get finalized DepositTreeSnapshot","description":"Latest finalized DepositTreeSnapshot that could be used to reconstruct Deposit merkle tree. See EIP-4881 for details.","operationId":"getTekuV1BeaconDeposit_snapshot","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetDepositSnapshotResponse"}},"application/octet-stream":{"schema":{"$ref":"#/components/schemas/Unit"}}}},"404":{"description":"Not Found"},"500":{"description":"Server Error"}}}},"/teku/v1/validator_inclusion/{epoch}/global":{"get":{"tags":["Teku","Experimental"],"summary":"Get Global Validator Inclusion","description":"Returns a global count of votes for a given epoch.","operationId":"getTekuV1Validator_inclusionWithEpochGlobal","parameters":[{"name":"epoch","in":"path","description":"Epoch to get data for","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetGlobalValidatorResponse"}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing."}}}},"/teku/v1/validator_inclusion/{epoch}/{validator_id}":{"get":{"tags":["Teku","Experimental"],"summary":"Get Validator Inclusion","description":"Returns a per-validator summary of how that validator performed during the current epoch.","operationId":"getTekuV1Validator_inclusionWithEpochWithValidator_id","parameters":[{"name":"epoch","in":"path","description":"Epoch to get data for","required":true,"schema":{"type":"string"}},{"name":"validator_id","in":"path","description":"validator id","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetValidatorResponse"}}}},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Server Error"},"503":{"description":"Beacon node is currently syncing."}}}}},"components":{"schemas":{"GenesisData":{"type":"object","properties":{"genesis_time":{"type":"string","description":"The genesis_time configured for the beacon node, which is the unix time in seconds at which the Eth2.0 chain began.","example":"1590832934"},"genesis_validators_root":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"},"genesis_fork_version":{"pattern":"^0x[a-fA-F0-9]{8}$","type":"string","example":"0x00000000"}}},"GetGenesisResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/GenesisData"}}},"GetStateRootResponse":{"type":"object","properties":{"execution_optimistic":{"type":"boolean"},"data":{"$ref":"#/components/schemas/Root"}}},"Root":{"type":"object","properties":{"root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"}}},"Fork":{"type":"object","properties":{"previous_version":{"pattern":"^0x[a-fA-F0-9]{8}$","type":"string","description":"Bytes4 hexadecimal"},"current_version":{"pattern":"^0x[a-fA-F0-9]{8}$","type":"string","description":"Bytes4 hexadecimal"},"epoch":{"type":"string"}}},"GetStateForkResponse":{"type":"object","properties":{"execution_optimistic":{"type":"boolean"},"data":{"$ref":"#/components/schemas/Fork"}}},"Checkpoint":{"type":"object","properties":{"epoch":{"type":"string","format":"uint64"},"root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"}}},"FinalityCheckpointsResponse":{"type":"object","properties":{"previous_justified":{"$ref":"#/components/schemas/Checkpoint"},"current_justified":{"$ref":"#/components/schemas/Checkpoint"},"finalized":{"$ref":"#/components/schemas/Checkpoint"}}},"GetStateFinalityCheckpointsResponse":{"type":"object","properties":{"execution_optimistic":{"type":"boolean"},"data":{"$ref":"#/components/schemas/FinalityCheckpointsResponse"}}},"GetStateValidatorsResponse":{"type":"object","properties":{"execution_optimistic":{"type":"boolean"},"data":{"type":"array","items":{"$ref":"#/components/schemas/ValidatorResponse"}}}},"Validator":{"type":"object","properties":{"pubkey":{"pattern":"^0x[a-fA-F0-9]{96}$","type":"string","description":"Bytes48 hexadecimal","example":"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a"},"withdrawal_credentials":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","description":"Root of withdrawal credentials","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"},"effective_balance":{"type":"string","description":"Balance at stake in Gwei.","example":"1"},"slashed":{"type":"boolean"},"activation_eligibility_epoch":{"type":"string","description":"When criteria for activation were met.","example":"1"},"activation_epoch":{"type":"string","description":"Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not activated.","example":"1"},"exit_epoch":{"type":"string","description":"Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.","example":"1"},"withdrawable_epoch":{"type":"string","description":"When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH' if not defined.","example":"1"}}},"ValidatorResponse":{"type":"object","properties":{"index":{"type":"string","description":"Index of validator in validator registry.","example":"1"},"balance":{"type":"string","description":"Current validator balance in gwei.","example":"1"},"status":{"type":"string","description":"[Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)","enum":["pending_initialized","pending_queued","active_ongoing","active_exiting","active_slashed","exited_unslashed","exited_slashed","withdrawal_possible","withdrawal_done"]},"validator":{"$ref":"#/components/schemas/Validator"}}},"GetStateValidatorResponse":{"type":"object","properties":{"execution_optimistic":{"type":"boolean"},"data":{"$ref":"#/components/schemas/ValidatorResponse"}}},"GetStateValidatorBalancesResponse":{"type":"object","properties":{"execution_optimistic":{"type":"boolean"},"data":{"type":"array","items":{"$ref":"#/components/schemas/ValidatorBalanceResponse"}}}},"ValidatorBalanceResponse":{"type":"object","properties":{"index":{"type":"string","description":"Index of validator in validator registry.","example":"1"},"balance":{"type":"string","description":"Current validator balance in gwei.","example":"1"}}},"EpochCommitteeResponse":{"type":"object","properties":{"slot":{"type":"string","description":"The slot at which the committee has to attest.","example":"1"},"index":{"type":"string","description":"Index of committee","example":"1"},"validators":{"type":"array","items":{"type":"string","example":"1"}}}},"GetStateCommitteesResponse":{"type":"object","properties":{"execution_optimistic":{"type":"boolean"},"data":{"type":"array","items":{"$ref":"#/components/schemas/EpochCommitteeResponse"}}}},"GetStateSyncCommitteesResponse":{"type":"object","properties":{"execution_optimistic":{"type":"boolean"},"data":{"$ref":"#/components/schemas/StateSyncCommittees"}}},"StateSyncCommittees":{"type":"object","properties":{"validators":{"type":"array","items":{"type":"string","example":"1"}},"validator_aggregates":{"type":"array","items":{"type":"array","items":{"type":"string"}}}}},"BeaconBlockHeader":{"type":"object","properties":{"slot":{"type":"string","format":"uint64"},"proposer_index":{"type":"string","format":"uint64"},"parent_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"state_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"body_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"}}},"BlockHeader":{"type":"object","properties":{"root":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"},"canonical":{"type":"boolean"},"header":{"$ref":"#/components/schemas/SignedBeaconBlockHeader"}}},"GetBlockHeadersResponse":{"type":"object","properties":{"execution_optimistic":{"type":"boolean"},"data":{"type":"array","items":{"$ref":"#/components/schemas/BlockHeader"}}}},"SignedBeaconBlockHeader":{"type":"object","properties":{"message":{"$ref":"#/components/schemas/BeaconBlockHeader"},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"}}},"GetBlockHeaderResponse":{"type":"object","properties":{"execution_optimistic":{"type":"boolean"},"data":{"$ref":"#/components/schemas/BlockHeader"}}},"Attestation":{"type":"object","properties":{"aggregation_bits":{"type":"string","description":"SSZ hexadecimal","format":"byte"},"data":{"$ref":"#/components/schemas/AttestationData"},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"}}},"AttestationData":{"type":"object","properties":{"slot":{"type":"string","format":"uint64"},"index":{"type":"string","format":"uint64"},"beacon_block_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"source":{"$ref":"#/components/schemas/Checkpoint"},"target":{"$ref":"#/components/schemas/Checkpoint"}}},"AttesterSlashing":{"type":"object","properties":{"attestation_1":{"$ref":"#/components/schemas/IndexedAttestation"},"attestation_2":{"$ref":"#/components/schemas/IndexedAttestation"}}},"BeaconBlock":{"type":"object","properties":{"slot":{"type":"string","format":"uint64"},"proposer_index":{"type":"string","format":"uint64"},"parent_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"state_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"body":{"$ref":"#/components/schemas/BeaconBlockBody"}}},"BeaconBlockAltair":{"type":"object","properties":{"slot":{"type":"string","format":"uint64"},"proposer_index":{"type":"string","format":"uint64"},"parent_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"state_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"body":{"$ref":"#/components/schemas/BeaconBlockBodyAltair"}}},"BeaconBlockBellatrix":{"type":"object","properties":{"slot":{"type":"string","format":"uint64"},"proposer_index":{"type":"string","format":"uint64"},"parent_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"state_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"body":{"$ref":"#/components/schemas/BeaconBlockBodyBellatrix"}}},"BeaconBlockBody":{"type":"object","properties":{"randao_reveal":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"},"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"graffiti":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"proposer_slashings":{"type":"array","items":{"$ref":"#/components/schemas/ProposerSlashing"}},"attester_slashings":{"type":"array","items":{"$ref":"#/components/schemas/AttesterSlashing"}},"attestations":{"type":"array","items":{"$ref":"#/components/schemas/Attestation"}},"deposits":{"type":"array","items":{"$ref":"#/components/schemas/Deposit"}},"voluntary_exits":{"type":"array","items":{"$ref":"#/components/schemas/SignedVoluntaryExit"}}}},"BeaconBlockBodyAltair":{"type":"object","properties":{"randao_reveal":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"},"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"graffiti":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"proposer_slashings":{"type":"array","items":{"$ref":"#/components/schemas/ProposerSlashing"}},"attester_slashings":{"type":"array","items":{"$ref":"#/components/schemas/AttesterSlashing"}},"attestations":{"type":"array","items":{"$ref":"#/components/schemas/Attestation"}},"deposits":{"type":"array","items":{"$ref":"#/components/schemas/Deposit"}},"voluntary_exits":{"type":"array","items":{"$ref":"#/components/schemas/SignedVoluntaryExit"}},"sync_aggregate":{"$ref":"#/components/schemas/SyncAggregate"}}},"BeaconBlockBodyBellatrix":{"type":"object","properties":{"randao_reveal":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"},"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"graffiti":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"proposer_slashings":{"type":"array","items":{"$ref":"#/components/schemas/ProposerSlashing"}},"attester_slashings":{"type":"array","items":{"$ref":"#/components/schemas/AttesterSlashing"}},"attestations":{"type":"array","items":{"$ref":"#/components/schemas/Attestation"}},"deposits":{"type":"array","items":{"$ref":"#/components/schemas/Deposit"}},"voluntary_exits":{"type":"array","items":{"$ref":"#/components/schemas/SignedVoluntaryExit"}},"sync_aggregate":{"$ref":"#/components/schemas/SyncAggregate"},"execution_payload":{"$ref":"#/components/schemas/ExecutionPayload"}}},"Deposit":{"type":"object","properties":{"proof":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"}},"data":{"$ref":"#/components/schemas/DepositData"}}},"DepositData":{"type":"object","properties":{"pubkey":{"type":"string","description":"Bytes48 hexadecimal","format":"byte"},"withdrawal_credentials":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"amount":{"type":"string","format":"uint64"},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"}}},"Eth1Data":{"type":"object","properties":{"deposit_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"deposit_count":{"type":"string","format":"uint64"},"block_hash":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"}}},"ExecutionPayload":{"type":"object","properties":{"parent_hash":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","description":"Bytes32 hexadecimal","format":"byte"},"fee_recipient":{"pattern":"^0x[a-fA-F0-9]{40}$","type":"string","description":"Bytes20 hexadecimal","format":"byte"},"state_root":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","description":"Bytes32 hexadecimal","format":"byte"},"receipts_root":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","description":"Bytes32 hexadecimal","format":"byte"},"logs_bloom":{"type":"string","format":"byte"},"prev_randao":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","description":"Bytes32 hexadecimal","format":"byte"},"block_number":{"type":"string","format":"uint64"},"gas_limit":{"type":"string","format":"uint64"},"gas_used":{"type":"string","format":"uint64"},"timestamp":{"type":"string","format":"uint64"},"extra_data":{"type":"string","format":"byte"},"base_fee_per_gas":{"type":"string","format":"uint256"},"block_hash":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","description":"Bytes32 hexadecimal","format":"byte"},"transactions":{"type":"array","items":{"type":"string","format":"byte"}}}},"IndexedAttestation":{"type":"object","properties":{"attesting_indices":{"type":"array","items":{"type":"string","format":"uint64"}},"data":{"$ref":"#/components/schemas/AttestationData"},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"}}},"ProposerSlashing":{"type":"object","properties":{"signed_header_1":{"$ref":"#/components/schemas/SignedBeaconBlockHeader"},"signed_header_2":{"$ref":"#/components/schemas/SignedBeaconBlockHeader"}}},"SignedBeaconBlockAltair":{"type":"object","properties":{"message":{"$ref":"#/components/schemas/BeaconBlockAltair"},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"}}},"SignedBeaconBlockBellatrix":{"type":"object","properties":{"message":{"$ref":"#/components/schemas/BeaconBlockBellatrix"},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"}}},"SignedBeaconBlockPhase0":{"type":"object","properties":{"message":{"$ref":"#/components/schemas/BeaconBlock"},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"}}},"SignedBlock":{"type":"object","oneOf":[{"$ref":"#/components/schemas/SignedBeaconBlockPhase0"},{"$ref":"#/components/schemas/SignedBeaconBlockAltair"},{"$ref":"#/components/schemas/SignedBeaconBlockBellatrix"}]},"SignedVoluntaryExit":{"type":"object","properties":{"message":{"$ref":"#/components/schemas/VoluntaryExit"},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"}}},"SyncAggregate":{"type":"object","properties":{"sync_committee_bits":{"type":"string","description":"SSZ hexadecimal","format":"byte"},"sync_committee_signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"}}},"VoluntaryExit":{"type":"object","properties":{"epoch":{"type":"string","format":"uint64"},"validator_index":{"type":"string","format":"uint64"}}},"Unit":{"type":"object"},"BlindedBeaconBlockBodyBellatrix":{"type":"object","properties":{"randao_reveal":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"},"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"graffiti":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"proposer_slashings":{"type":"array","items":{"$ref":"#/components/schemas/ProposerSlashing"}},"attester_slashings":{"type":"array","items":{"$ref":"#/components/schemas/AttesterSlashing"}},"attestations":{"type":"array","items":{"$ref":"#/components/schemas/Attestation"}},"deposits":{"type":"array","items":{"$ref":"#/components/schemas/Deposit"}},"voluntary_exits":{"type":"array","items":{"$ref":"#/components/schemas/SignedVoluntaryExit"}},"sync_aggregate":{"$ref":"#/components/schemas/SyncAggregate"},"execution_payload_header":{"$ref":"#/components/schemas/ExecutionPayloadHeader"}}},"BlindedBlockBellatrix":{"type":"object","properties":{"slot":{"type":"string","format":"uint64"},"proposer_index":{"type":"string","format":"uint64"},"parent_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"state_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"body":{"$ref":"#/components/schemas/BlindedBeaconBlockBodyBellatrix"}}},"ExecutionPayloadHeader":{"type":"object","properties":{"parent_hash":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","description":"Bytes32 hexadecimal","format":"byte"},"fee_recipient":{"pattern":"^0x[a-fA-F0-9]{40}$","type":"string","description":"Bytes20 hexadecimal","format":"byte"},"state_root":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","description":"Bytes32 hexadecimal","format":"byte"},"receipts_root":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","description":"Bytes32 hexadecimal","format":"byte"},"logs_bloom":{"type":"string","format":"byte"},"prev_randao":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","description":"Bytes32 hexadecimal","format":"byte"},"block_number":{"type":"string","format":"uint64"},"gas_limit":{"type":"string","format":"uint64"},"gas_used":{"type":"string","format":"uint64"},"timestamp":{"type":"string","format":"uint64"},"extra_data":{"type":"string","format":"byte"},"base_fee_per_gas":{"type":"string","format":"uint256"},"block_hash":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","description":"Bytes32 hexadecimal","format":"byte"},"transactions_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"}}},"SignedBlindedBeaconBlockBellatrix":{"type":"object","properties":{"message":{"$ref":"#/components/schemas/BlindedBlockBellatrix"},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"}}},"SignedBlindedBlock":{"type":"object","oneOf":[{"$ref":"#/components/schemas/SignedBeaconBlockPhase0"},{"$ref":"#/components/schemas/SignedBeaconBlockAltair"},{"$ref":"#/components/schemas/SignedBlindedBeaconBlockBellatrix"}]},"GetBlockResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/SignedBeaconBlock"}}},"SignedBeaconBlock":{"type":"object","properties":{"message":{"$ref":"#/components/schemas/BeaconBlock"},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"}}},"GetBlockResponseV2":{"type":"object","properties":{"version":{"type":"string","enum":["phase0","altair","bellatrix"]},"execution_optimistic":{"type":"boolean"},"data":{"$ref":"#/components/schemas/SignedBlock"}}},"GetBlockRootResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/Root"},"execution_optimistic":{"type":"boolean"}}},"GetHashTreeRootResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/Root"}}},"GetBlockAttestationsResponse":{"type":"object","properties":{"execution_optimistic":{"type":"boolean"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Attestation"}}}},"GetAttestationsResponse":{"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/Attestation"}}}},"PostDataFailure":{"type":"object","properties":{"index":{"type":"string","format":"uint64"},"message":{"type":"string"}}},"PostDataFailureResponse":{"type":"object","properties":{"code":{"type":"string","format":"uint64"},"message":{"type":"string"},"failures":{"type":"array","items":{"$ref":"#/components/schemas/PostDataFailure"}}}},"GetAttesterSlashingsResponse":{"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/AttesterSlashing"}}}},"GetProposerSlashingsResponse":{"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/ProposerSlashing"}}}},"GetVoluntaryExitsResponse":{"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/SignedVoluntaryExit"}}}},"SyncCommitteeMessage":{"type":"object","properties":{"slot":{"type":"string","format":"uint64"},"beacon_block_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"validator_index":{"type":"string","format":"uint64"},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"}}},"ValidatorLivenessRequest":{"type":"object","properties":{"epoch":{"type":"string","format":"uint64"},"indices":{"type":"array","items":{"type":"string","format":"uint64"}}}},"PostValidatorLivenessResponse":{"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/ValidatorLivenessAtEpoch"}}}},"ValidatorLivenessAtEpoch":{"type":"object","properties":{"index":{"type":"string","format":"uint64"},"epoch":{"type":"string","format":"uint64"},"is_live":{"type":"boolean"}}},"Identity":{"type":"object","properties":{"peer_id":{"type":"string","description":"Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)","example":"QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N"},"enr":{"type":"string","description":"Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)","example":"enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8"},"p2p_addresses":{"type":"array","description":"Node's addresses on which eth2 rpc requests are served. [Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)","example":"/ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N","items":{"type":"string"}},"discovery_addresses":{"type":"array","description":"Node's addresses on which is listening for discv5 requests. [Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)","example":"/ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N","items":{"type":"string"}},"metadata":{"$ref":"#/components/schemas/Metadata"}}},"IdentityResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/Identity"}}},"Metadata":{"type":"object","properties":{"seq_number":{"pattern":"^0-9+$","type":"string","description":"Uint64 starting at 0 used to version the node's metadata. If any other field in the local MetaData changes, the node MUST increment seq_number by 1."},"attnets":{"pattern":"^0x[a-fA-F0-9]{2,}$","type":"string","description":"Bitvector representing the node's persistent attestation subnet subscriptions."},"syncnets":{"pattern":"^0x[a-fA-F0-9]{2,}$","type":"string","description":"Bitvector representing the node's persistent attestation subnet subscriptions."}},"description":"Based on eth2 [Metadata object](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/p2p-interface.md#metadata)"},"Meta":{"type":"object","properties":{"count":{"type":"number","description":"Total number of items"}}},"Peer":{"type":"object","properties":{"peer_id":{"type":"string","description":"Cryptographic hash of a peer’s public key. '[Read more](https://docs.libp2p.io/concepts/peer-id/)","example":"QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N"},"enr":{"type":"string","description":"Ethereum node record. Not currently populated. [Read more](https://eips.ethereum.org/EIPS/eip-778)","nullable":true,"example":"enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8"},"last_seen_p2p_address":{"type":"string","description":"Multiaddr used in last peer connection. [Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)","example":"/ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N"},"state":{"type":"string","enum":["disconnected","connecting","connected","disconnecting"]},"direction":{"type":"string","enum":["inbound","outbound"]}}},"PeersResponse":{"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/Peer"}},"meta":{"$ref":"#/components/schemas/Meta"}}},"GetPeerCountResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/PeerCount"}}},"PeerCount":{"type":"object","properties":{"disconnected":{"type":"string","format":"uint64"},"connecting":{"type":"string","format":"uint64"},"connected":{"type":"string","format":"uint64"},"disconnecting":{"type":"string","format":"uint64"}}},"PeerResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/Peer"}}},"Syncing":{"type":"object","properties":{"head_slot":{"pattern":"^0-9+$","type":"string","description":"Beacon node's head slot"},"sync_distance":{"pattern":"^0-9+$","type":"string","description":"How many slots node needs to process to reach head. 0 if synced."},"is_syncing":{"type":"boolean","description":"Set to true if the node is syncing, false if the node is synced."},"is_optimistic":{"type":"boolean","description":"Set to true if the node is optimistically fetching blocks."}}},"SyncingResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/Syncing"}}},"Version":{"type":"object","properties":{"version":{"type":"string","description":"A string which uniquely identifies the client implementation and its version; similar to [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).","example":"teku/v0.12.6-dev-994997f8/osx-x86_64/adoptopenjdk-java-11"}}},"VersionResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/Version"}}},"AttesterDuty":{"type":"object","properties":{"pubkey":{"pattern":"^0x[a-fA-F0-9]{96}$","type":"string","description":"The validator's BLS public key, uniquely identifying them. 48-bytes, hex encoded with 0x prefix, case insensitive.","example":"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a"},"validator_index":{"type":"string","description":"Index of validator in validator registry","example":"1"},"committee_index":{"type":"string","description":"The committee index","example":"1"},"committee_length":{"type":"string","description":"Number of validators in committee","example":"1"},"committees_at_slot":{"type":"string","description":"Number of committees at the provided slot","example":"1"},"validator_committee_index":{"type":"string","description":"Index of validator in committee","example":"1"},"slot":{"type":"string","description":"The slot at which the validator must attest.","example":"1"}}},"PostAttesterDutiesResponse":{"type":"object","properties":{"dependent_root":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","description":"The block root that this response is dependent on.","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"},"data":{"type":"array","items":{"$ref":"#/components/schemas/AttesterDuty"}},"execution_optimistic":{"type":"boolean"}}},"GetProposerDutiesResponse":{"type":"object","properties":{"dependent_root":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","description":"The block root that this response is dependent on.","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"},"data":{"type":"array","items":{"$ref":"#/components/schemas/ProposerDuty"}},"execution_optimistic":{"type":"boolean"}}},"ProposerDuty":{"type":"object","properties":{"pubkey":{"pattern":"^0x[a-fA-F0-9]{96}$","type":"string","description":"The validator's BLS public key, uniquely identifying them. 48-bytes, hex encoded with 0x prefix, case insensitive.","example":"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a"},"validator_index":{"type":"string","description":"Index of validator in validator registry","example":"1"},"slot":{"type":"string","description":"The slot at which the validator must propose block.","example":"1"}}},"BeaconBlockPhase0":{"type":"object","properties":{"slot":{"type":"string","format":"uint64"},"proposer_index":{"type":"string","format":"uint64"},"parent_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"state_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"body":{"$ref":"#/components/schemas/BeaconBlockBody"}}},"GetNewBlockResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/UnsignedBlock"}}},"UnsignedBlock":{"type":"object","oneOf":[{"$ref":"#/components/schemas/BeaconBlockPhase0"},{"$ref":"#/components/schemas/BeaconBlockAltair"},{"$ref":"#/components/schemas/BeaconBlockBellatrix"}]},"GetNewBlockResponseV2":{"type":"object","properties":{"version":{"type":"string","enum":["phase0","altair","bellatrix"]},"data":{"$ref":"#/components/schemas/UnsignedBlock"}}},"GetNewBlindedBlockResponse":{"type":"object","properties":{"version":{"type":"string","enum":["phase0","altair","bellatrix"]},"data":{"$ref":"#/components/schemas/UnsignedBlindedBlock"}}},"UnsignedBlindedBlock":{"type":"object","oneOf":[{"$ref":"#/components/schemas/BeaconBlockPhase0"},{"$ref":"#/components/schemas/BeaconBlockAltair"},{"$ref":"#/components/schemas/BlindedBlockBellatrix"}]},"GetAttestationDataResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/AttestationData"}}},"GetAggregatedAttestationResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/Attestation"}}},"AggregateAndProof":{"type":"object","properties":{"aggregator_index":{"type":"string","format":"uint64"},"aggregate":{"$ref":"#/components/schemas/Attestation"},"selection_proof":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"}}},"SignedAggregateAndProof":{"type":"object","properties":{"message":{"$ref":"#/components/schemas/AggregateAndProof"},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"}}},"BeaconCommitteeSubscriptionRequest":{"type":"object","properties":{"validator_index":{"type":"string"},"committee_index":{"type":"string"},"committees_at_slot":{"type":"string","format":"uint64"},"slot":{"type":"string","format":"uint64"},"is_aggregator":{"type":"boolean"}}},"PostSyncDutiesResponse":{"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/SyncCommitteeDuty"}},"execution_optimistic":{"type":"boolean"}}},"SyncCommitteeDuty":{"type":"object","properties":{"pubkey":{"pattern":"^0x[a-fA-F0-9]{96}$","type":"string","description":"The validator's BLS public key, uniquely identifying them. 48-bytes, hex encoded with 0x prefix, case insensitive.","example":"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a"},"validator_index":{"type":"string","description":"Index of validator in validator registry","example":"1"},"validator_sync_committee_indices":{"type":"array","items":{"type":"string","description":"The committee index","example":"1"}}}},"GetSyncCommitteeContributionResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/SyncCommitteeContribution"}}},"SyncCommitteeContribution":{"type":"object","properties":{"slot":{"type":"string","format":"uint64"},"beacon_block_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"subcommittee_index":{"type":"string","format":"uint64"},"aggregation_bits":{"type":"string","description":"SSZ hexadecimal","format":"byte"},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"}}},"SyncCommitteeSubnetSubscription":{"type":"object","properties":{"validator_index":{"type":"string","format":"uint64"},"sync_committee_indices":{"type":"array","items":{"type":"string","format":"uint64"}},"until_epoch":{"type":"string","description":"The final epoch (exclusive value) that the specified validator requires the subscription for.","format":"uint64"}}},"ContributionAndProof":{"type":"object","properties":{"aggregator_index":{"type":"string","format":"uint64"},"selection_proof":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"},"contribution":{"$ref":"#/components/schemas/SyncCommitteeContribution"}}},"SignedContributionAndProof":{"type":"object","properties":{"message":{"$ref":"#/components/schemas/ContributionAndProof"},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"}}},"BeaconPreparableProposer":{"type":"object","properties":{"validator_index":{"type":"string","format":"uint64","example":"1"},"fee_recipient":{"pattern":"^0x[a-fA-F0-9]{40}$","type":"string","description":"An address on the execution (Ethereum 1) network.","example":"0xabcf8e0d4e9587369b2301d0790347320302cc09"}}},"PostRegisterValidatorRequest":{"type":"object","properties":{"message":{"$ref":"#/components/schemas/ValidatorRegistration"},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"}}},"ValidatorRegistration":{"type":"object","properties":{"fee_recipient":{"pattern":"^0x[a-fA-F0-9]{40}$","type":"string","description":"An address on the execution (Ethereum 1) network.","example":"0xabcf8e0d4e9587369b2301d0790347320302cc09"},"gas_limit":{"type":"string","format":"uint64","example":"1"},"timestamp":{"type":"string","format":"uint64","example":"1"},"pubkey":{"pattern":"^0x[a-fA-F0-9]{96}$","type":"string","description":"The validator's BLS public key, uniquely identifying them. 48-bytes, hex encoded with 0x prefix, case insensitive.","example":"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a"}}},"DepositContract":{"type":"object","properties":{"chain_id":{"type":"string","format":"uint64"},"address":{"type":"string"}}},"GetDepositContractResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/DepositContract"}}},"GetForkScheduleResponse":{"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/Fork"}}}},"GetSpecResponse":{"type":"object","properties":{"data":{"type":"object","additionalProperties":{"type":"string"}}}},"ChainHead":{"type":"object","properties":{"slot":{"type":"string","format":"uint64"},"root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"}}},"GetChainHeadsResponse":{"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/ChainHead"}}}},"ChainHeadV2":{"type":"object","properties":{"slot":{"type":"string","format":"uint64"},"root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"execution_optimistic":{"type":"boolean"}}},"GetChainHeadsResponseV2":{"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/ChainHeadV2"}}}},"BeaconStatePhase0":{"type":"object","properties":{"genesis_time":{"type":"string","format":"uint64"},"genesis_validators_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"slot":{"type":"string","format":"uint64"},"fork":{"$ref":"#/components/schemas/Fork"},"latest_block_header":{"$ref":"#/components/schemas/BeaconBlockHeader"},"block_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"}},"state_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"}},"historical_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"}},"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"eth1_data_votes":{"type":"array","items":{"$ref":"#/components/schemas/Eth1Data"}},"eth1_deposit_index":{"type":"string","format":"uint64"},"validators":{"type":"array","items":{"$ref":"#/components/schemas/Validator"}},"balances":{"type":"array","items":{"type":"string","format":"uint64"}},"randao_mixes":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"}},"slashings":{"type":"array","items":{"type":"string","format":"uint64"}},"previous_epoch_attestations":{"type":"array","items":{"$ref":"#/components/schemas/PendingAttestation"}},"current_epoch_attestations":{"type":"array","items":{"$ref":"#/components/schemas/PendingAttestation"}},"justification_bits":{"type":"string","description":"SSZ hexadecimal","format":"byte"},"previous_justified_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"current_justified_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"finalized_checkpoint":{"$ref":"#/components/schemas/Checkpoint"}}},"GetStateResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/BeaconStatePhase0"}}},"PendingAttestation":{"type":"object","properties":{"aggregation_bits":{"type":"string","description":"SSZ hexadecimal","format":"byte"},"data":{"$ref":"#/components/schemas/AttestationData"},"inclusion_delay":{"type":"string","format":"uint64"},"proposer_index":{"type":"string","format":"uint64"}}},"BeaconStateAltair":{"type":"object","properties":{"genesis_time":{"type":"string","format":"uint64"},"genesis_validators_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"slot":{"type":"string","format":"uint64"},"fork":{"$ref":"#/components/schemas/Fork"},"latest_block_header":{"$ref":"#/components/schemas/BeaconBlockHeader"},"block_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"}},"state_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"}},"historical_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"}},"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"eth1_data_votes":{"type":"array","items":{"$ref":"#/components/schemas/Eth1Data"}},"eth1_deposit_index":{"type":"string","format":"uint64"},"validators":{"type":"array","items":{"$ref":"#/components/schemas/Validator"}},"balances":{"type":"array","items":{"type":"string","format":"uint64"}},"randao_mixes":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"}},"slashings":{"type":"array","items":{"type":"string","format":"uint64"}},"previous_epoch_participation":{"type":"array","items":{"type":"string","example":"1"}},"current_epoch_participation":{"type":"array","items":{"type":"string","example":"1"}},"justification_bits":{"type":"string","description":"SSZ hexadecimal","format":"byte"},"previous_justified_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"current_justified_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"finalized_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"inactivity_scores":{"type":"array","items":{"type":"string","example":"1"}},"current_sync_committee":{"$ref":"#/components/schemas/SyncCommittee"},"next_sync_committee":{"$ref":"#/components/schemas/SyncCommittee"}}},"BeaconStateBellatrix":{"type":"object","properties":{"genesis_time":{"type":"string","format":"uint64"},"genesis_validators_root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"},"slot":{"type":"string","format":"uint64"},"fork":{"$ref":"#/components/schemas/Fork"},"latest_block_header":{"$ref":"#/components/schemas/BeaconBlockHeader"},"block_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"}},"state_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"}},"historical_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"}},"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"eth1_data_votes":{"type":"array","items":{"$ref":"#/components/schemas/Eth1Data"}},"eth1_deposit_index":{"type":"string","format":"uint64"},"validators":{"type":"array","items":{"$ref":"#/components/schemas/Validator"}},"balances":{"type":"array","items":{"type":"string","format":"uint64"}},"randao_mixes":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"}},"slashings":{"type":"array","items":{"type":"string","format":"uint64"}},"previous_epoch_participation":{"type":"array","items":{"type":"string","example":"1"}},"current_epoch_participation":{"type":"array","items":{"type":"string","example":"1"}},"justification_bits":{"type":"string","description":"SSZ hexadecimal","format":"byte"},"previous_justified_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"current_justified_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"finalized_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"inactivity_scores":{"type":"array","items":{"type":"string","example":"1"}},"current_sync_committee":{"$ref":"#/components/schemas/SyncCommittee"},"next_sync_committee":{"$ref":"#/components/schemas/SyncCommittee"},"latest_execution_payload_header":{"$ref":"#/components/schemas/ExecutionPayloadHeader"}}},"GetStateResponseV2":{"type":"object","properties":{"version":{"type":"string","enum":["phase0","altair","bellatrix"]},"execution_optimistic":{"type":"boolean"},"data":{"$ref":"#/components/schemas/State"}}},"State":{"type":"object","oneOf":[{"$ref":"#/components/schemas/BeaconStatePhase0"},{"$ref":"#/components/schemas/BeaconStateAltair"},{"$ref":"#/components/schemas/BeaconStateBellatrix"}]},"SyncCommittee":{"type":"object","properties":{"pubkeys":{"type":"array","items":{"type":"string","description":"Bytes48 hexadecimal","format":"byte"}},"aggregate_pubkey":{"type":"string","description":"Bytes48 hexadecimal","format":"byte"}}},"LogLevel":{"type":"object","properties":{"level":{"type":"string"},"log_filter":{"type":"array","items":{"type":"string"}}}},"GetAllBlocksAtSlotResponse":{"type":"object","properties":{"version":{"type":"string","enum":["phase0","altair","bellatrix"]},"data":{"uniqueItems":true,"type":"array","items":{"$ref":"#/components/schemas/SignedBeaconBlockWithRoot"}}}},"SignedBeaconBlockWithRoot":{"type":"object","properties":{"message":{"$ref":"#/components/schemas/BeaconBlock"},"signature":{"type":"string","description":"Bytes96 hexadecimal","format":"byte"},"root":{"type":"string","description":"Bytes32 hexadecimal","format":"byte"}}},"GetPeerScoresResponse":{"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/PeerScore"}}}},"PeerScore":{"type":"object","properties":{"peer_id":{"type":"string","description":"Cryptographic hash of a peer’s public key. '[Read more](https://docs.libp2p.io/concepts/peer-id/)","example":"QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N"},"gossip_score":{"type":"number","description":"Gossip score for the associated peer.","format":"double","example":1.2}}},"GetProtoArrayResponse":{"type":"object","properties":{"data":{"type":"array","items":{"type":"object","additionalProperties":{"type":"object"}}}}},"GetProposersDataResponse":{"type":"object","properties":{"data":{"type":"object","properties":{"prepared_proposers":{"type":"array","items":{"$ref":"#/components/schemas/PreparedProposerInfoSchema"}},"registered_validators":{"type":"array","items":{"$ref":"#/components/schemas/RegisteredValidatorInfoSchema"}}}}}},"PreparedProposerInfoSchema":{"type":"object","properties":{"proposer_index":{"type":"string","format":"uint64"},"fee_recipient":{"pattern":"^0x[a-fA-F0-9]{40}$","type":"string","description":"Bytes20 hexadecimal","format":"byte"},"expiry_slot":{"type":"string","format":"uint64"}}},"ProposerDataSchema":{"type":"object","properties":{"prepared_proposers":{"type":"array","items":{"$ref":"#/components/schemas/PreparedProposerInfoSchema"}},"registered_validators":{"type":"array","items":{"$ref":"#/components/schemas/RegisteredValidatorInfoSchema"}}}},"RegisteredValidatorInfoSchema":{"type":"object","properties":{"proposer_index":{"type":"string","format":"uint64"},"pubkey":{"pattern":"^0x[a-fA-F0-9]{96}$","type":"string","description":"Bytes48 hexadecimal","example":"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a"},"fee_recipient":{"pattern":"^0x[a-fA-F0-9]{40}$","type":"string","description":"Bytes20 hexadecimal","format":"byte"},"gas_limit":{"type":"string","format":"uint64"},"timestamp":{"type":"string","format":"uint64"},"expiry_slot":{"type":"string","format":"uint64"}}},"DepositWithIndex":{"type":"object","properties":{"index":{"type":"string","format":"uint64"},"data":{"$ref":"#/components/schemas/DepositData"}}},"GetDepositsResponse":{"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/DepositWithIndex"}}}},"GetEth1DataResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/Eth1Data"}}},"GetEth1DataCacheResponse":{"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/Eth1Data"}}}},"Eth1DataWithVotesSchema":{"type":"object","properties":{"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"votes":{"type":"string","format":"uint64"}}},"Eth1VotingSummarySchema":{"type":"object","properties":{"state_eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"eth1_data_votes":{"type":"array","items":{"$ref":"#/components/schemas/Eth1DataWithVotesSchema"}},"votes_required":{"type":"string","format":"uint64"},"voting_period_slots":{"type":"string","format":"uint64"},"voting_period_slots_left":{"type":"string","format":"uint64"}}},"GetEth1VotingSummaryResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/Eth1VotingSummarySchema"}}},"DepositTreeSnapshot":{"type":"object","properties":{"finalized":{"type":"array","description":"List of finalized nodes in deposit tree","items":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"}},"deposit_root":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","description":"Root of finalized deposits","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"},"deposit_count":{"type":"string","description":"Number of deposits stored in the snapshot","format":"uint64","example":"1"},"execution_block_hash":{"pattern":"^0x[a-fA-F0-9]{64}$","type":"string","description":"Hash of the execution block containing the highest index deposit stored in the snapshot","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"},"execution_block_height":{"type":"string","description":"Height of the execution block in canonical chain containing the highest index deposit stored in the snapshot","format":"uint64","example":"1"}}},"GetDepositSnapshotResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/DepositTreeSnapshot"}}},"GetGlobalValidatorResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/GetGlobalValidatorResponseData"}}},"GetGlobalValidatorResponseData":{"type":"object","properties":{"current_epoch_active_gwei":{"type":"string","format":"uint64"},"previous_epoch_active_gwei":{"type":"string","format":"uint64"},"current_epoch_target_attesting_gwei":{"type":"string","format":"uint64"},"previous_epoch_target_attesting_gwei":{"type":"string","format":"uint64"},"previous_epoch_head_attesting_gwei":{"type":"string","format":"uint64"}}},"GetValidatorInclusionResponseData":{"type":"object","properties":{"current_epoch_effective_balance_gwei":{"type":"string","format":"uint64"},"is_withdrawable_in_current_epoch":{"type":"boolean"},"is_active_unslashed_in_current_epoch":{"type":"boolean"},"is_active_unslashed_in_previous_epoch":{"type":"boolean"},"is_slashed":{"type":"boolean"},"is_current_epoch_target_attester":{"type":"boolean"},"is_previous_epoch_target_attester":{"type":"boolean"},"is_previous_epoch_head_attester":{"type":"boolean"}}},"GetValidatorResponse":{"type":"object","properties":{"data":{"$ref":"#/components/schemas/GetValidatorInclusionResponseData"}}}}}}