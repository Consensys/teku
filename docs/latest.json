{"openapi":"3.0.1","info":{"title":"Teku","description":"A minimal API specification for the beacon node, which enables a validator to connect and perform its obligations on the Ethereum 2.0 phase 0 beacon chain.","license":{"name":"Apache 2.0","url":"https://www.apache.org/licenses/LICENSE-2.0.html"},"version":"v0.11.0-dev-6c22d2ea"},"paths":{"/admin/log_level":{"put":{"tags":["Admin"],"summary":"Changes the log level without restarting.","description":"Changes the log level without restarting. You can change the log level for all logs, or the log level for specific packages or classes.","operationId":"putAdminLog_level","requestBody":{"description":"```\n{\n  \"level\": (String; acceptable values: ALL, TRACE, DEBUG, INFO, ERROR, FATAL, OFF ),\n  \"log_filter\": [(String; Optional)]\n}\n```","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LogLevel"}}}},"responses":{"204":{"description":"The LogLevel was accepted and applied"},"400":{"description":"Invalid body supplied."},"500":{"description":"Server Error"}}}},"/beacon/block":{"get":{"tags":["Beacon"],"summary":"Get the beacon chain block matching the criteria.","description":"Returns the beacon chain block that matches the specified epoch, slot, or block root.","operationId":"getBeaconBlock","parameters":[{"name":"epoch","in":"query","description":"`UnsignedLong` Epoch number to query.","schema":{"type":"string"}},{"name":"slot","in":"query","description":"`UnsignedLong` Slot to query in the canonical chain.","schema":{"type":"string"}},{"name":"root","in":"query","description":"`Bytes32 Hex` Block root to query.","schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SignedBeaconBlock"}}}},"400":{"description":"Invalid parameter supplied"},"404":{"description":"Specified block not found"}}}},"/beacon/chainhead":{"get":{"tags":["Beacon"],"summary":"Get information about the chain head.","description":"Returns information about the head of the beacon chain including the finalized and justified information.","operationId":"getBeaconChainhead","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BeaconChainHead"}}}},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"500":{"description":"Server Error"}}}},"/beacon/head":{"get":{"tags":["Beacon"],"summary":"Get information about the chain head.","description":"Returns information about the head of the beacon chain from the nodeâ€™s perspective.\n\nTo retrieve finalized and justified information, use /beacon/chainhead instead.","operationId":"getBeaconHead","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BeaconHead"}}}},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"500":{"description":"Server Error"}}}},"/beacon/committees":{"get":{"tags":["Beacon"],"summary":"Get the committee assignments for an epoch.","description":"Returns committee assignments for each slot in a specified epoch.","operationId":"getBeaconCommittees","parameters":[{"name":"epoch","in":"query","description":"`UnsignedLong` Epoch number to query.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Committee"}}}},"400":{"description":"Missing a query parameter"},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"500":{"description":"Server Error"}}}},"/beacon/state":{"get":{"tags":["Beacon"],"summary":"Get the beacon chain state matching the criteria.","description":"Returns the beacon chain state that matches the specified slot or block root.","operationId":"getBeaconState","parameters":[{"name":"root","in":"query","description":"`Bytes32 Hex` Block root to query.","schema":{"type":"string"}},{"name":"slot","in":"query","description":"`UnsignedLong` Slot to query in the canonical chain.","schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BeaconState"}}}},"404":{"description":"The beacon state matching the supplied query parameter was not found."},"400":{"description":"Missing a query parameter"},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"500":{"description":"Server Error"}}}},"/beacon/state_root":{"get":{"tags":["Beacon"],"summary":"Get the beacon chain state root for the specified slot.","description":"Returns the beacon chain state root for the specified slot.","operationId":"getBeaconState_root","parameters":[{"name":"slot","in":"query","description":"`UnsignedLong` Slot to query in the canonical chain.","schema":{"type":"string"}}],"responses":{"200":{"description":"The beacon chain `state_root`(`Bytes32`) for the specified slot.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Bytes32"}}}},"404":{"description":"The beacon state root matching the supplied parameter was not found."},"400":{"description":"Missing a query parameter."},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"500":{"description":"Server Error"}}}},"/beacon/validators":{"get":{"tags":["Beacon"],"summary":"Get validators matching the specified query.","description":"Returns validator information.\n\nReturns the first page of validators in the current epoch if you do not specify any parameters.","operationId":"getBeaconValidators","parameters":[{"name":"epoch","in":"query","description":"`UnsignedLong` Epoch number to query. Defaults to the current epoch.","schema":{"type":"string"}},{"name":"active","in":"query","description":"Only return validators that are active in the specified `epoch`. By default, returns inactive and active validators.\n\n**Note**: The field accepts any value to return active validators.","schema":{"type":"string"}},{"name":"pageSize","in":"query","description":"`Integer` The amount of results to return per page. Defaults to 250 results.","schema":{"type":"integer","format":"int32"}},{"name":"pageToken","in":"query","description":"`Integer` Page number to return. Defaults to page 0.","schema":{"type":"integer","format":"int32"}}],"responses":{"200":{"description":"List of validator objects.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BeaconValidators"}}}},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"500":{"description":"Server Error"}}},"post":{"tags":["Beacon"],"summary":"Get validators matching specified public keys.","description":"Returns information about validators that match the list of validator public keys and optional epoch.\n\nIf no epoch is specified, the validators are queried from the current state.\n\nPublic keys that do not match a validator are returned without validator information.","operationId":"postBeaconValidators","requestBody":{"description":"```\n{\n  \"epoch\": (uint64),\n  \"pubkeys\": [(Bytes48 as Hex String)]\n}\n```","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ValidatorsRequest"}}}},"responses":{"200":{"description":"List of validator objects.","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ValidatorWithIndex"}}}}},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"400":{"description":"Invalid body supplied"},"500":{"description":"Server Error"}}}},"/network/enr":{"get":{"tags":["Network"],"summary":"Get the listening ENR address of the node.","description":"Returns the beacon node's listening Ethereum Node Record (ENR) address.","operationId":"getNetworkEnr","responses":{"200":{"description":"Base64-encoded ENR or an empty string if Node Discovery Protocol v5 is not used.","content":{"text/plain":{"schema":{"type":"string"}}}}}}},"/network/listen_addresses":{"get":{"tags":["Network"],"summary":"Get the addresses the client's libp2p service is listening on.","description":"Returns the list of addresses that the client's libp2p service is listening on.","operationId":"getNetworkListen_addresses","responses":{"200":{"description":"OK","content":{"text/plain":{"schema":{"type":"array","items":{"type":"string"}}}}},"500":{"description":"Server Error"}}}},"/network/peer_id":{"get":{"tags":["Network"],"summary":"Get the node PeerId.","description":"Returns the beacon node's base58-encoded PeerId.","operationId":"getNetworkPeer_id","responses":{"200":{"description":"OK","content":{"text/plain":{"schema":{"type":"string"}}}},"500":{"description":"Server Error"}}}},"/network/peers":{"get":{"tags":["Network"],"summary":"Get the PeerIds of connected peers.","description":"Returns the base58-encoded PeerId of each peer connected to the beacon node.","operationId":"getNetworkPeers","responses":{"200":{"description":"OK","content":{"text/plain":{"schema":{"type":"array","items":{"type":"string"}}}}},"500":{"description":"Server Error"}}}},"/network/peer_count":{"get":{"tags":["Network"],"summary":"Get the number of connected peers.","description":"Returns the number of peers connected to the beacon node.","operationId":"getNetworkPeer_count","responses":{"200":{"description":"Number of peers connected to the beacon node.","content":{"application/json":{"schema":{"type":"integer","format":"int64"}}}},"500":{"description":"Server Error"}}}},"/network/listen_port":{"get":{"tags":["Network"],"summary":"Get the TCP listening port of the client's libp2p service.","description":"Returns the TCP listening port of the client's libp2p service.","operationId":"getNetworkListen_port","responses":{"200":{"description":"Client's TCP listening port.","content":{"application/json":{"schema":{"type":"integer","format":"int32"}}}},"500":{"description":"Server Error"}}}},"/node/fork":{"get":{"tags":["Node"],"summary":"Get the fork of the current head.","description":"Returns information about the fork of the beacon chain head from the nodeâ€™s perspective.","operationId":"getNodeFork","responses":{"200":{"description":"An object containing the fork of the current head.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Fork"}}}},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"500":{"description":"Server Error"}}}},"/node/genesis_time":{"get":{"tags":["Node"],"summary":"Get genesis time.","description":"Returns the genesis time from the beacon node.","operationId":"getNodeGenesis_time","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UnsignedLong"}}}},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"500":{"description":"Server Error"}}}},"/node/syncing":{"get":{"tags":["Node"],"summary":"Get synchronization status.","description":"Returns an object with data about the synchronization status, or false if not synchronizing.","operationId":"getNodeSyncing","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncingResponse"}}}},"500":{"description":"Server Error"}}}},"/node/version":{"get":{"tags":["Node"],"summary":"Get client version.","description":"Returns the client version.","operationId":"getNodeVersion","responses":{"200":{"description":"OK","content":{"text/plain":{"schema":{"type":"string"}}}},"500":{"description":"Server Error"}}}},"/validator/attestation":{"get":{"tags":["Validator"],"summary":"Get an unsigned attestation for a slot from the current state.","description":"Returns an unsigned attestation for the block at the specified non-finalized slot.\n\nThis endpoint is not protected against slashing. Signing the returned attestation can result in a slashable offence.","operationId":"getValidatorAttestation","parameters":[{"name":"slot","in":"query","description":"`UnsignedLong` Non-finalized slot for which to create the attestation.","required":true,"schema":{"type":"string"}},{"name":"committee_index","in":"query","description":"`Integer` Index of the committee making the attestation.","required":true,"schema":{"type":"integer","format":"int32"}}],"responses":{"200":{"description":"Returns an attestation object with a blank signature. The `signature` field should be replaced by a valid signature.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Attestation"}}}},"400":{"description":"Invalid parameter supplied"},"404":{"description":"An attestation could not be created for the specified slot."}}},"post":{"tags":["Validator"],"summary":"Submit a signed attestation.","description":"Submit a signed attestation to the beacon node to be validated and submitted if valid.\n\nThis endpoint does not protected against slashing. Signing the attestation can result in a slashable offence.","operationId":"postValidatorAttestation","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Attestation"}}}},"responses":{"204":{"description":"The Attestation was accepted, validated, and submitted"},"400":{"description":"Invalid body supplied."},"500":{"description":"Server Error"}}}},"/validator/block":{"get":{"tags":["Validator"],"summary":"Create and return an unsigned beacon block at the specified slot.","description":"Create and return an unsigned beacon block at the specified slot. The `randao_reveal` and `slot` must be provided to create the block.","operationId":"getValidatorBlock","parameters":[{"name":"slot","in":"query","description":"`UnsignedLong` Slot in which to create the beacon block.","required":true,"schema":{"type":"string"}},{"name":"randao_reveal","in":"query","description":"`BLSSignature Hex` BLS12-381 signature for the current epoch.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"`BeaconBlock` object for the specified slot.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BeaconBlock"}}}},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"400":{"description":"Invalid parameter supplied"}}}},"/validator/duties":{"post":{"tags":["Validator"],"summary":"Get the validator duties for the specified epoch.","description":"Returns the validator duties for validators that match the specified public keys and epoch.\n\nPublic keys that do not match a validator are returned without validator information.","operationId":"postValidatorDuties","requestBody":{"description":"```\n{\n  \"epoch\": (uint64),\n  \"pubkeys\": [(Bytes48 as Hex String)]\n}\n```","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ValidatorsRequest"}}}},"responses":{"200":{"description":"List of validators, including information about a validator's attestation committee index and block proposal slot.","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ValidatorDuties"}}}}},"204":{"description":"No content may be returned if the genesis block has not been set, meaning that there is no head to query."},"400":{"description":"Invalid body supplied."},"500":{"description":"Server Error"}}}}},"components":{"schemas":{"LogLevel":{"type":"object","properties":{"level":{"type":"string"},"log_filter":{"type":"array","items":{"type":"string"}}}},"Attestation":{"type":"object","properties":{"aggregation_bits":{"$ref":"#/components/schemas/Bitlist"},"data":{"$ref":"#/components/schemas/AttestationData"},"signature":{"$ref":"#/components/schemas/BLSSignature"}}},"AttestationData":{"type":"object","properties":{"slot":{"$ref":"#/components/schemas/UnsignedLong"},"index":{"$ref":"#/components/schemas/UnsignedLong"},"beacon_block_root":{"$ref":"#/components/schemas/Bytes32"},"source":{"$ref":"#/components/schemas/Checkpoint"},"target":{"$ref":"#/components/schemas/Checkpoint"}}},"AttesterSlashing":{"type":"object","properties":{"attestation_1":{"$ref":"#/components/schemas/IndexedAttestation"},"attestation_2":{"$ref":"#/components/schemas/IndexedAttestation"}}},"BLSPubKey":{"type":"object"},"BLSSignature":{"type":"object","properties":{"bytes":{"$ref":"#/components/schemas/Bytes"}}},"BeaconBlock":{"type":"object","properties":{"slot":{"$ref":"#/components/schemas/UnsignedLong"},"proposer_index":{"$ref":"#/components/schemas/UnsignedLong"},"parent_root":{"$ref":"#/components/schemas/Bytes32"},"state_root":{"$ref":"#/components/schemas/Bytes32"},"body":{"$ref":"#/components/schemas/BeaconBlockBody"}}},"BeaconBlockBody":{"type":"object","properties":{"randao_reveal":{"$ref":"#/components/schemas/BLSSignature"},"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"graffiti":{"$ref":"#/components/schemas/Bytes32"},"proposer_slashings":{"type":"array","items":{"$ref":"#/components/schemas/ProposerSlashing"}},"attester_slashings":{"type":"array","items":{"$ref":"#/components/schemas/AttesterSlashing"}},"attestations":{"type":"array","items":{"$ref":"#/components/schemas/Attestation"}},"deposits":{"type":"array","items":{"$ref":"#/components/schemas/Deposit"}},"voluntary_exits":{"type":"array","items":{"$ref":"#/components/schemas/SignedVoluntaryExit"}}}},"BeaconBlockHeader":{"type":"object","properties":{"slot":{"$ref":"#/components/schemas/UnsignedLong"},"proposer_index":{"$ref":"#/components/schemas/UnsignedLong"},"parent_root":{"$ref":"#/components/schemas/Bytes32"},"state_root":{"$ref":"#/components/schemas/Bytes32"},"body_root":{"$ref":"#/components/schemas/Bytes32"}}},"Bitlist":{"type":"object","properties":{"maxSize":{"type":"integer","format":"int64"},"currentSize":{"type":"integer","format":"int32"},"allSetBits":{"type":"array","items":{"type":"integer","format":"int32"}},"allBits":{"$ref":"#/components/schemas/Bitlist"},"bit":{"type":"integer","format":"int32","writeOnly":true}}},"Bytes":{"type":"object","properties":{"zero":{"type":"boolean"},"empty":{"type":"boolean"}}},"Bytes32":{"type":"object","properties":{"zero":{"type":"boolean"},"empty":{"type":"boolean"}}},"Checkpoint":{"type":"object","properties":{"epoch":{"$ref":"#/components/schemas/UnsignedLong"},"root":{"$ref":"#/components/schemas/Bytes32"}}},"Deposit":{"type":"object","properties":{"proof":{"type":"array","items":{"$ref":"#/components/schemas/Bytes32"}},"data":{"$ref":"#/components/schemas/DepositData"}}},"DepositData":{"type":"object","properties":{"pubkey":{"$ref":"#/components/schemas/BLSPubKey"},"withdrawal_credentials":{"$ref":"#/components/schemas/Bytes32"},"amount":{"$ref":"#/components/schemas/UnsignedLong"},"signature":{"$ref":"#/components/schemas/BLSSignature"}}},"Eth1Data":{"type":"object","properties":{"deposit_root":{"$ref":"#/components/schemas/Bytes32"},"deposit_count":{"$ref":"#/components/schemas/UnsignedLong"},"block_hash":{"$ref":"#/components/schemas/Bytes32"}}},"IndexedAttestation":{"type":"object","properties":{"attesting_indices":{"type":"array","items":{"$ref":"#/components/schemas/UnsignedLong"}},"data":{"$ref":"#/components/schemas/AttestationData"},"signature":{"$ref":"#/components/schemas/BLSSignature"}}},"ProposerSlashing":{"type":"object","properties":{"header_1":{"$ref":"#/components/schemas/SignedBeaconBlockHeader"},"header_2":{"$ref":"#/components/schemas/SignedBeaconBlockHeader"}}},"SignedBeaconBlock":{"type":"object","properties":{"message":{"$ref":"#/components/schemas/BeaconBlock"},"signature":{"$ref":"#/components/schemas/BLSSignature"}}},"SignedBeaconBlockHeader":{"type":"object","properties":{"message":{"$ref":"#/components/schemas/BeaconBlockHeader"},"signature":{"$ref":"#/components/schemas/BLSSignature"}}},"SignedVoluntaryExit":{"type":"object","properties":{"message":{"$ref":"#/components/schemas/VoluntaryExit"},"signature":{"$ref":"#/components/schemas/BLSSignature"}}},"UnsignedLong":{"type":"object"},"VoluntaryExit":{"type":"object","properties":{"epoch":{"$ref":"#/components/schemas/UnsignedLong"},"validator_index":{"$ref":"#/components/schemas/UnsignedLong"}}},"BeaconChainHead":{"type":"object","properties":{"head_slot":{"$ref":"#/components/schemas/UnsignedLong"},"head_epoch":{"$ref":"#/components/schemas/UnsignedLong"},"head_block_root":{"$ref":"#/components/schemas/Bytes32"},"finalized_slot":{"$ref":"#/components/schemas/UnsignedLong"},"finalized_epoch":{"$ref":"#/components/schemas/UnsignedLong"},"finalized_block_root":{"$ref":"#/components/schemas/Bytes32"},"justified_slot":{"$ref":"#/components/schemas/UnsignedLong"},"justified_epoch":{"$ref":"#/components/schemas/UnsignedLong"},"justified_block_root":{"$ref":"#/components/schemas/Bytes32"},"previous_justified_slot":{"$ref":"#/components/schemas/UnsignedLong"},"previous_justified_epoch":{"$ref":"#/components/schemas/UnsignedLong"},"previous_justified_block_root":{"$ref":"#/components/schemas/Bytes32"}}},"BeaconHead":{"type":"object","properties":{"slot":{"$ref":"#/components/schemas/UnsignedLong"},"block_root":{"$ref":"#/components/schemas/Bytes32"},"state_root":{"$ref":"#/components/schemas/Bytes32"}}},"Committee":{"type":"object","properties":{"slot":{"$ref":"#/components/schemas/UnsignedLong"},"index":{"$ref":"#/components/schemas/UnsignedLong"},"committee":{"type":"array","items":{"type":"integer","format":"int32"}}}},"BeaconState":{"type":"object","properties":{"genesis_time":{"$ref":"#/components/schemas/UnsignedLong"},"slot":{"$ref":"#/components/schemas/UnsignedLong"},"fork":{"$ref":"#/components/schemas/Fork"},"latest_block_header":{"$ref":"#/components/schemas/BeaconBlockHeader"},"block_roots":{"type":"array","items":{"$ref":"#/components/schemas/Bytes32"}},"state_roots":{"type":"array","items":{"$ref":"#/components/schemas/Bytes32"}},"historical_roots":{"type":"array","items":{"$ref":"#/components/schemas/Bytes32"}},"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"eth1_data_votes":{"type":"array","items":{"$ref":"#/components/schemas/Eth1Data"}},"eth1_deposit_index":{"$ref":"#/components/schemas/UnsignedLong"},"validators":{"type":"array","items":{"$ref":"#/components/schemas/Validator"}},"balances":{"type":"array","items":{"$ref":"#/components/schemas/UnsignedLong"}},"randao_mixes":{"type":"array","items":{"$ref":"#/components/schemas/Bytes32"}},"slashings":{"type":"array","items":{"$ref":"#/components/schemas/UnsignedLong"}},"previous_epoch_attestations":{"type":"array","items":{"$ref":"#/components/schemas/PendingAttestation"}},"current_epoch_attestations":{"type":"array","items":{"$ref":"#/components/schemas/PendingAttestation"}},"justification_bits":{"$ref":"#/components/schemas/Bitvector"},"previous_justified_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"current_justified_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"finalized_checkpoint":{"$ref":"#/components/schemas/Checkpoint"}}},"Bitvector":{"type":"object","properties":{"size":{"type":"integer","format":"int32"},"bit":{"type":"integer","format":"int32","writeOnly":true}}},"Bytes4":{"type":"object","properties":{"wrappedBytes":{"$ref":"#/components/schemas/Bytes"}}},"Fork":{"type":"object","properties":{"previous_version":{"$ref":"#/components/schemas/Bytes4"},"current_version":{"$ref":"#/components/schemas/Bytes4"},"epoch":{"$ref":"#/components/schemas/UnsignedLong"}}},"PendingAttestation":{"type":"object","properties":{"aggregation_bits":{"$ref":"#/components/schemas/Bitlist"},"data":{"$ref":"#/components/schemas/AttestationData"},"inclusion_delay":{"$ref":"#/components/schemas/UnsignedLong"},"proposer_index":{"$ref":"#/components/schemas/UnsignedLong"}}},"Validator":{"type":"object","properties":{"pubkey":{"$ref":"#/components/schemas/BLSPubKey"},"withdrawal_credentials":{"$ref":"#/components/schemas/Bytes32"},"effective_balance":{"$ref":"#/components/schemas/UnsignedLong"},"slashed":{"type":"boolean"},"activation_eligibility_epoch":{"$ref":"#/components/schemas/UnsignedLong"},"activation_epoch":{"$ref":"#/components/schemas/UnsignedLong"},"exit_epoch":{"$ref":"#/components/schemas/UnsignedLong"},"withdrawable_epoch":{"$ref":"#/components/schemas/UnsignedLong"}}},"ValidatorsRequest":{"required":["pubkeys"],"type":"object","properties":{"epoch":{"$ref":"#/components/schemas/UnsignedLong"},"pubkeys":{"type":"array","items":{"$ref":"#/components/schemas/BLSPubKey"}}}},"ValidatorWithIndex":{"type":"object","properties":{"pubkey":{"$ref":"#/components/schemas/BLSPubKey"},"validator_index":{"type":"integer","format":"int32"},"balance":{"$ref":"#/components/schemas/UnsignedLong"},"validator":{"$ref":"#/components/schemas/Validator"}}},"SyncStatus":{"type":"object","properties":{"starting_slot":{"$ref":"#/components/schemas/UnsignedLong"},"current_slot":{"$ref":"#/components/schemas/UnsignedLong"},"highest_slot":{"$ref":"#/components/schemas/UnsignedLong"}}},"SyncingResponse":{"type":"object","properties":{"is_syncing":{"type":"boolean"},"sync_status":{"$ref":"#/components/schemas/SyncStatus"}}},"BeaconValidators":{"type":"object","properties":{"validators":{"type":"array","items":{"$ref":"#/components/schemas/ValidatorWithIndex"}},"total_size":{"type":"integer","format":"int64"},"next_page_token":{"type":"integer","format":"int32"}}},"ValidatorDuties":{"type":"object","properties":{"validator_pubkey":{"$ref":"#/components/schemas/BLSPubKey"},"aggregator_modulo":{"type":"integer","format":"int32"},"validator_index":{"type":"integer","format":"int32"},"attestation_committee_index":{"type":"integer","format":"int32"},"attestation_committee_position":{"type":"integer","format":"int32"},"block_proposal_slots":{"type":"array","items":{"$ref":"#/components/schemas/UnsignedLong"}},"attestation_slot":{"$ref":"#/components/schemas/UnsignedLong"}}}}}}