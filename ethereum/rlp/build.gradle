plugins {
    id 'me.champeau.gradle.jmh' version '0.4.7'
}

jar {
  baseName 'artemis-ethereum-rlp'
  manifest {
    attributes('Implementation-Title': baseName,
    'Implementation-Version': project.version)
  }
}

dependencies {
  api project(':util')

  implementation 'com.google.guava:guava'
  implementation 'io.vertx:vertx-core'

  testImplementation 'com.fasterxml.jackson.core:jackson-databind'

  //Dependencies for JMH testing RLPBench
  jmh project(':util')
  compile 'org.openjdk.jmh:jmh-core'
}

//JMH Configuration Below

jmh {
  // Allows to control JMH execution directly from the command line. I typical execution may look
  // like:
  //    gradle jmh -Pf=2 -Pwi=3 -Pi=5 -Pinclude=MyBench
  // which will run 2 forks with 3 warmup iterations and 5 normal ones for each, and will only
  // run the benchmark matching 'MyBench' (a regexp).
  warmupForks = _intCmdArg('wf')
  warmupIterations = _intCmdArg('wi')
  fork = _intCmdArg('f')
  iterations = _intCmdArg('i')
  benchmarkMode = _strListCmdArg('bm')
  include = _strListCmdArg('include', [''])
  humanOutputFile = project.file("${project.buildDir}/reports/jmh/results.txt")
  resultFormat = 'JSON'
}

// Gets a integer command argument, passed with -Pname=x, or the defaut if not provided.
def _intCmdArg(name, defaultValue) {
  return project.hasProperty(name) ? project.property(name) as int : defaultValue
}

def _intCmdArg(name) {
  return _intCmdArg(name, null)
}

def _strListCmdArg(name, defaultValue) {
  if (!project.hasProperty(name))
    return defaultValue

  return ((String)project.property(name)).tokenize(',')
}

def _strListCmdArg(name) {
  return _strListCmdArg(name, null)
}
