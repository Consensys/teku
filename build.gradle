import java.text.SimpleDateFormat

plugins {
  id 'com.diffplug.gradle.spotless' version '4.5.1'
  id 'com.github.ben-manes.versions' version '0.28.0'
  id 'com.github.hierynomus.license' version '0.15.0'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'net.ltgt.errorprone' version '1.2.1' apply false
  id 'net.researchgate.release' version '2.8.1'
  id 'me.champeau.gradle.jmh' version '0.5.2' apply false
  id 'de.undercouch.download' version '4.1.0'
  id 'org.ajoberstar.grgit' version '4.0.2'
}

rootProject.version = calculatePublishVersion()
def specificVersion = calculateVersion()
def isDevelopBuild = rootProject.version.contains('develop')

apply plugin: 'application'

defaultTasks 'build','checkLicenses'

def buildAliases = [
  'dev': [
    'compileJava',
    'compileTestJava',
    'compileJmhJava',
    'compileIntegrationTestJava',
    'compileCompatibilityTestJava',
    'compileReferenceTestJava',
    'spotlessApply',
    'build',
    'checkLicenses',
    // TODO - Fix javadoc task
    /*'javadoc'*/],
  'mash': [
    'clean',
    'spotlessApply',
    'build',
    'test']
  ]

def expandedTaskList = []

gradle.startParameter.taskNames.each {
  expandedTaskList << (buildAliases[it] ? buildAliases[it] : it)
}
gradle.startParameter.taskNames = expandedTaskList.flatten() as Iterable<String>

def userHome = System.getProperty("user.home")

def cloudsmithUser = project.hasProperty('cloudsmithUser') ? project.property('cloudsmithUser') : System.getenv('CLOUDSMITH_USER')
def cloudsmithKey = project.hasProperty('cloudsmithApiKey') ? project.property('cloudsmithApiKey') : System.getenv('CLOUDSMITH_API_KEY')

allprojects {
  apply plugin: 'java-library'
  apply plugin: 'java-test-fixtures'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'jacoco'
  apply plugin: 'net.ltgt.errorprone'
  apply from: "${rootDir}/gradle/versions.gradle"
  apply from: "${rootDir}/gradle/check-licenses.gradle"

  version = rootProject.version

  jacoco { toolVersion = '0.8.5' }

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  sourceCompatibility = '11'
  targetCompatibility = '11'

  repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url "https://artifacts.consensys.net/public/maven/maven/" }
    maven { url "https://hyperledger.jfrog.io/artifactory/besu-maven/" }
    maven { url "https://consensys.bintray.com/pegasys-repo/" }
  }

  dependencies {
    errorprone("com.google.errorprone:error_prone_core")
  }

  apply plugin: 'com.diffplug.gradle.spotless'
  spotless {
    java {
      // This path needs to be relative to each project
      target fileTree('.') {
        include '**/*.java'
        exclude '**/.gradle/**'
        exclude 'web3j'
        //Excluding tech.pegasys.teku.datastructures due to preferred formatting overwritten by plugin in getConstantsAsString.
        exclude '**/src/main/java/tech/pegasys/teku/Constants.java'
        exclude '**/proto'
        exclude '**/resources'
        exclude '**/src/*/generated'
      }

      importOrder 'tech.pegasys', 'net.consensys', 'java', ''
      trimTrailingWhitespace()
      endWithNewline()
      licenseHeaderFile "${rootDir}/gradle/spotless.java.license"
      googleJavaFormat('1.7')
    }
  }

  tasks.withType(JavaCompile) {
    options.compilerArgs += [
      '-Xlint:unchecked',
      '-Xlint:cast',
      '-Xlint:rawtypes',
      '-Xlint:overloads',
      '-Xlint:divzero',
      '-Xlint:finally',
      '-Xlint:static',
      '-Werror',
    ]
    options.forkOptions.jvmArgs += [
        '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
    ]

    options.errorprone {
      enabled = !'true'.equalsIgnoreCase(System.getProperty('avt.disableErrorProne'))
      disableWarningsInGeneratedCode
      // Our equals need to be symmetric, this checker doesn't respect that.
      check('EqualsGetClass', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
      // We use the JSR-305 annotations instead of the Google annotations.
      check('ImmutableEnumChecker', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
      // Storing a lambda to avoid code duplication is not a bad thing
      check('UnnecessaryLambda', net.ltgt.gradle.errorprone.CheckSeverity.OFF)

      // We don't apply strict javadoc requirements yet
      check('EmptyBlockTag', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
      check('MissingSummary', net.ltgt.gradle.errorprone.CheckSeverity.OFF)

      check('FieldCanBeFinal', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
      check('InsecureCryptoUsage', net.ltgt.gradle.errorprone.CheckSeverity.WARN)
      check('WildcardImport', net.ltgt.gradle.errorprone.CheckSeverity.WARN)

      // This check is broken in Java 12.  See https://github.com/google/error-prone/issues/1257
      if (JavaVersion.current() == JavaVersion.VERSION_12) {
        check('Finally', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
      }
      // This check is broken after Java 12.  See https://github.com/google/error-prone/issues/1352
      if (JavaVersion.current() > JavaVersion.VERSION_12) {
        check('TypeParameterUnusedInFormals', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
      }
    }
    options.encoding = 'UTF-8'
  }
  /*
   * Pass some system properties provided on the gradle command line to test executions for
   * convenience.
   *
   * The properties passed are:
   * - 'test.ethereum.include': allows to run a single Ethereum reference tests. For instance,
   *   running a single general state test can be done with:
   *    ./gradlew :ethereum:tech.pegasys.teku.ethereum.vm:test -Dtest.single=GeneralStateTest -Dtest.ethereum.include=callcodecallcallcode_101-Frontier
   *   The meaning being that will be run only the tests for which the value passed as "include"
   *   (which can be a java pattern) matches parts of the test name. Knowing that tests names for
   *   reference tests are of the form:
   *     <name>(-<milestone>([<variant>])?)?
   *   where <name> is the test name as defined in the json file (usually the name of the json file
   *   as well), <milestone> is the Ethereum milestone tested (not all test use it) and <variant>
   *   is only use in some general state tests where for the same json file and same milestone,
   *   multiple variant of that test are run. The variant is a simple number.
   * - 'test.ethereum.state.eip': for general state tests, allows to only run tests for the
   *   milestone specified by this value. So for instance,
   *    ./gradlew :ethereum:tech.pegasys.teku.ethereum.vm:test -Dtest.single=GeneralStateTest -Dtest.ethereum.state.eip=Frontier
   *   only run general state tests for Frontier. Note that this behavior could be achieved as well
   *   with the 'include' option above since it is a pattern, but this is a slightly more convenient
   *   option.
   * - 'root.log.level' and 'evm.log.level': allow to control the log level used during the tests.
   */
  test {
    jvmArgs = [
      '-Xmx4g',
      '-XX:-UseGCOverheadLimit'
    ]
    Set toImport = [
      'test.ethereum.include',
      'test.ethereum.state.eip',
      'root.log.level',
      'evm.log.level'
    ]
    testLogging.showStandardStreams = project.hasProperty("showOutput") ? project.property("showOutput") : false
    for (String name : toImport) {
      if (System.getProperty(name) != null) {
        systemProperty name, System.getProperty(name)
      }
    }
  }

  // Normalize Xdoclint behaviour across JDKs (OpenJDK 8 is more lenient than Oracle JDK by default).
  javadoc {
    options.addStringOption('Xdoclint:all', '-quiet')
    if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
      options.addStringOption('Xwerror', '-quiet')
    } else {
      options.addStringOption('Xwerror', '-html5')
    }
    options.encoding = 'UTF-8'
  }
}

// Note: v1.0.0 tests were republished to fix an initial error. This comment forces cache update
def refTestVersion = 'v1.0.0'
def refTestBaseUrl = 'https://github.com/ethereum/eth2.0-spec-tests/releases/download'
def refTestDownloadDir = "${buildDir}/refTests/${refTestVersion}"
def refTestExpandDir = "${project.rootDir}/eth-reference-tests/src/referenceTest/resources/eth2.0-spec-tests/"

task downloadRefTests(type: Download) {
  src([
      "${refTestBaseUrl}/${refTestVersion}/general.tar.gz",
      "${refTestBaseUrl}/${refTestVersion}/minimal.tar.gz",
      "${refTestBaseUrl}/${refTestVersion}/mainnet.tar.gz"
  ])
  dest "${refTestDownloadDir}"
  overwrite false
}

task cleanRefTestsGeneral(type: Delete) {
  delete "${refTestExpandDir}/tests/general"
}

task expandRefTestsGeneral(type: Copy, dependsOn: [cleanRefTestsGeneral, downloadRefTests]) {
  from tarTree("${refTestDownloadDir}/general.tar.gz")
  into refTestExpandDir
}

task cleanRefTestsMainnet(type: Delete) {
  delete "${refTestExpandDir}/tests/mainnet"
}

task expandRefTestsMainnet(type: Copy, dependsOn: [cleanRefTestsMainnet, downloadRefTests]) {
  from tarTree("${refTestDownloadDir}/mainnet.tar.gz")
  into refTestExpandDir
}

task cleanRefTestsMinimal(type: Delete) {
  delete "${refTestExpandDir}/tests/minimal"
}

task expandRefTestsMinimal(type: Copy, dependsOn: [cleanRefTestsMinimal, downloadRefTests]) {
  from tarTree("${refTestDownloadDir}/minimal.tar.gz")
  into refTestExpandDir
}

task expandRefTests(dependsOn: [expandRefTestsGeneral, expandRefTestsMainnet, expandRefTestsMinimal])
task cleanRefTests(dependsOn: [cleanRefTestsGeneral, cleanRefTestsMainnet, cleanRefTestsMinimal])

task deploy() {}

application {
  applicationName = "teku"
  mainClassName = "tech.pegasys.teku.Teku"
  applicationDefaultJvmArgs = [
      "-Dvertx.disableFileCPResolving=true",
      "-Dteku.home=TEKU_HOME",
      // We shutdown log4j ourselves, as otherwise his shutdown hook runs before our own and whatever
      // happens during shutdown is not logged.
      "-Dlog4j.shutdownHookEnabled=false",
      "-XX:+HeapDumpOnOutOfMemoryError",
      // run `jcmd <PID> VM.native_memory` to check JVM native memory consumption
      "-XX:NativeMemoryTracking=summary",
      // 32Mb for Netty Direct ByteBuf
      "-Dio.netty.maxDirectMemory=33554432"
  ]
}

task autocomplete(type: JavaExec) {
  dependsOn compileJava
  outputs.file "build/teku.autocomplete.sh"

  main = application.mainClassName
  args "debug-tools", "generate-autocomplete", "--output", "build/teku.autocomplete.sh"
  classpath sourceSets.main.runtimeClasspath
}

installDist { }

distTar {
  dependsOn checkLicenses, autocomplete
  doFirst {
    delete fileTree(dir: 'build/distributions', include: '*.tar.gz')
  }
  compression = Compression.GZIP
  extension = 'tar.gz'
}

distZip {
  dependsOn checkLicenses, autocomplete
  doFirst {
    delete fileTree(dir: 'build/distributions', include: '*.zip')
  }
}

startScripts {

  def shortenWindowsClasspath = { line ->
    line = line.replaceAll(/^set CLASSPATH=.*$/, "set CLASSPATH=%APP_HOME%/lib/*")
  }

  doLast {
    unixScript.text = unixScript.text.replace('TEKU_HOME', '\$APP_HOME')
    windowsScript.text = windowsScript.text.replace('TEKU_HOME', '%~dp0..')

    // Prevent the error originating from the 8191 chars limit on Windows
    windowsScript.text =
        windowsScript
            .readLines()
            .collect(shortenWindowsClasspath)
            .join('\r\n')
  }
}

// rename the top level dir from teku-<version> to teku and this makes it really
// simple for use in docker
tasks.register("dockerDistUntar") {
  dependsOn distTar
  def dockerBuildPath = "build/docker-teku/"
  def distTarFile = distTar.outputs.files.singleFile
  def distTarFileName = distTar.outputs.files.singleFile.name.replace(".tar.gz", "")

  doFirst {
    def dockerBuildDir = new File(dockerBuildPath)
    dockerBuildDir.deleteDir()
    dockerBuildDir.mkdir()
    copy {
      from tarTree(distTarFile)
      into(dockerBuildPath)
    }
    def dockerDist = file("${dockerBuildPath}/${distTarFileName}")
    dockerDist.renameTo("${dockerBuildPath}/teku")
  }
}

def dockerVariants = [
  "jdk15",
  "jdk14",
]

task distDocker  {
  dependsOn dockerDistUntar

  def dockerBuildVersion = 'develop'
  def dockerBuildDir = "build/docker-teku/"
  def imageName = "consensys/teku"
  
  doLast {
    for (def variant in dockerVariants) {
      copy {
        from file("${projectDir}/docker/${variant}/Dockerfile")
        into(dockerBuildDir)
      }
      exec {
        def image = "${imageName}:${dockerBuildVersion}-${variant}"
        workingDir dockerBuildDir
        executable "sh"
        args "-c", "docker build --build-arg BUILD_DATE=${buildTime()} --build-arg VERSION=${dockerBuildVersion} --build-arg VCS_REF=${getCheckedOutGitCommitHash()} -t ${image} ."
      }
    }
    // tag the "default" (which is the variant in the zero position)
    exec {
      executable "sh"
      args "-c", "docker tag '${imageName}:${dockerBuildVersion}-${dockerVariants[0]}' '${imageName}:${dockerBuildVersion}'"
    }
  }
}

subprojects {
  tasks.withType(Test) {
    // If GRADLE_MAX_TEST_FORKS is not set, use half the available processors
   maxParallelForks = (System.getenv('GRADLE_MAX_TEST_FORKS') ?: (Runtime.runtime.availableProcessors().intdiv(2) ?: 1)).toInteger()
    useJUnitPlatform()
    reports {
      junitXml.enabled = true
    }
    filter {
      // Support filtering tests with the --tests option to gradle
      // Without this the build fails if you filter out all the tests for any module
      setFailOnNoMatchingTests(false)
    }
  }

  tasks.withType(JavaCompile) {
    options.fork = true
    options.incremental = true
  }

  sourceSets {
    integrationTest {
      java {
        compileClasspath += main.output
        runtimeClasspath += main.output
        srcDir file('src/integration-test/java')
      }
      resources.srcDir file('src/integration-test/resources')
    }
    acceptanceTest {
      java {
        compileClasspath += main.output
        runtimeClasspath += main.output
        srcDir file('src/acceptance-test/java')
      }
      resources.srcDir file('src/acceptance-test/resources')
    }
    compatibilityTest {
      java {
        compileClasspath += main.output
        runtimeClasspath += main.output
        srcDir file('src/compatibility-test/java')
      }
      resources.srcDir file('src/compatibility-test/resources')
    }
    referenceTest {
      java {
        srcDir file('src/referenceTest/generated')
        srcDir file('src/referenceTest/java')
      }
      resources.srcDir file('src/referenceTest/resources')
    }
  }

  def sourceSetIsPopulated = { sourceSetName ->
    def result = project.sourceSets.names.contains(sourceSetName) && !project.sourceSets.getAt(sourceSetName).allSource.empty
    logger.info("Project = " + project.name + " Has Source Set (" + sourceSetName + ") = " + result + "(" + project.sourceSets.names + ")")
    return result
  }

  apply plugin: 'idea'
  idea {
    module {
      testSourceDirs += project.sourceSets.testFixtures.java.srcDirs
      testSourceDirs += project.sourceSets.testFixtures.resources.srcDirs
      testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
      testSourceDirs += project.sourceSets.integrationTest.resources.srcDirs
      testSourceDirs += project.sourceSets.acceptanceTest.java.srcDirs
      testSourceDirs += project.sourceSets.acceptanceTest.resources.srcDirs
      testSourceDirs += project.sourceSets.compatibilityTest.java.srcDirs
      testSourceDirs += project.sourceSets.compatibilityTest.resources.srcDirs
      testSourceDirs += project.sourceSets.referenceTest.java.srcDirs
      testSourceDirs += project.sourceSets.referenceTest.resources.srcDirs
    }
  }

  if (sourceSetIsPopulated("main") || sourceSetIsPopulated("testFixtures")) {
    apply plugin: 'maven-publish'

    publishing {
      repositories {
        maven {
          name = "cloudsmith"
          url = "https://api-g.cloudsmith.io/maven/consensys/teku/"
          credentials {
            username = cloudsmithUser
            password = cloudsmithKey
          }
        }
      }
      publications {
        mavenJava(MavenPublication) {
          groupId "tech.pegasys.teku.internal"
          version "${project.version}"
          if (sourceSetIsPopulated("main")) {
            from components.java
            artifact sourcesJar
          }

          versionMapping {
            usage('java-api') { fromResolutionOf('runtimeClasspath') }
            usage('java-runtime') { fromResolutionResult() }
          }
          suppressPomMetadataWarningsFor('testFixturesApiElements')
          suppressPomMetadataWarningsFor('testFixturesRuntimeElements')
          pom {
            name = "Teku - ${project.name}"
            url = 'https://github.com/ConsenSys/teku'
            licenses {
              license {
                name = 'The Apache License, Version 2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              }
            }
            scm {
              connection = 'scm:git:git://github.com/ConsenSys/teku.git'
              developerConnection = 'https://github.com/ConsenSys/teku.git'
              url = 'https://github.com/ConsenSys/teku'
            }
          }
        }
      }
    }
  }

  configurations {
    integrationTestImplementation.extendsFrom testImplementation
    acceptanceTestImplementation.extendsFrom testImplementation
    compatibilityTestImplementation.extendsFrom testImplementation
    referenceTestImplementation.extendsFrom testImplementation

    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    acceptanceTestRuntimeOnly.extendsFrom testRuntimeOnly
    compatibilityTestRuntimeOnly.extendsFrom testRuntimeOnly
    referenceTestRuntimeOnly.extendsFrom testRuntimeOnly
  }

  def jarName = project.name
  def parent = project.parent
  while (parent != null) {
    if (parent != rootProject || jarName != 'teku') {
      jarName = parent.name + '-' + jarName
    }
    parent = parent.parent
  }

  jar {
    baseName jarName
    manifest {
      attributes(
          'Specification-Title': jarName,
          'Specification-Version': project.version,
          'Implementation-Title': jarName,
          'Implementation-Version': specificVersion
      )
    }
  }

  dependencies {
    implementation 'com.google.guava:guava'
    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.apache.logging.log4j:log4j-api'

    runtimeOnly 'org.apache.logging.log4j:log4j-core'
    runtimeOnly 'org.apache.logging.log4j:log4j-slf4j-impl'

    testImplementation 'org.apache.tuweni:tuweni-junit'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'

    testRuntimeOnly testFixtures(project(':infrastructure:logging'))

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    testFixturesImplementation 'org.assertj:assertj-core'
  }

  if (project.name != 'unsigned' && project.name != 'errorprone-checks') {
    dependencies.implementation(project(':infrastructure:unsigned'))
  }

  task integrationTest(type: Test, dependsOn:["compileIntegrationTestJava"]){
    group = "verification"
    description = "Runs the Teku integration tests"

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
  }

  task acceptanceTest(type: Test, dependsOn:["compileAcceptanceTestJava", rootProject.distDocker]){
    group = "verification"
    description = "Runs the Teku acceptance tests"

    systemProperty "teku.testArtifactDir", new File(project.buildDir, "test-artifacts").getAbsolutePath()
    testClassesDirs = sourceSets.acceptanceTest.output.classesDirs
    classpath = sourceSets.acceptanceTest.runtimeClasspath
  }

  task compatibilityTest(type: Test, dependsOn:["compileCompatibilityTestJava"]){
    group = "verification"
    description = "Runs the Teku compatibility tests"

    testClassesDirs = sourceSets.compatibilityTest.output.classesDirs
    classpath = sourceSets.compatibilityTest.runtimeClasspath
  }

  task referenceTest(type: Test, dependsOn:["compileReferenceTestJava"]){
    group = "verification"
    description = "Runs the Teku reference tests"

    testClassesDirs = sourceSets.referenceTest.output.classesDirs
    classpath = sourceSets.referenceTest.runtimeClasspath
  }
}

jar { enabled = false }

run {
  if(project.hasProperty('generateFlow')){
    def flowJVMArgs = [
      "-javaagent:${userHome}/.flow/resources/javaagent.jar",
      "-Dflow.agent.include=tech.pegasys.teku,tech.pegasys.teku.services.beaconchain,tech.pegasys.teku.statetransition,tech.pegasys.teku.statetransition.util",
      "-Dflow.agent.exclude=tech.pegasys.teku.datastructures.state,tech.pegasys.teku.datastructures.blocks,tech.pegasys.teku.datastructures.operations,tech.pegasys.teku.datastructures.util.bitwise,tech.pegasys.teku.util.hashtree,tech.pegasys.teku.util.alogger,tech.pegasys.teku.storage,tech.pegasys.teku.util.bls,tech.pegasys.teku.util.mikuli,tech.pegasys.teku.networking.p2p,tech.pegasys.teku.validator.coordinator",
      "-Dflow.agent.autostart",
      "-Dflow.agent.execution-name=teku"
      ]
   applicationDefaultJvmArgs.addAll(flowJVMArgs)
  }
  args project.hasProperty("teku.run.args") ? project.property("teku.run.args").toString().split("\\s+") : []
  doFirst {
    applicationDefaultJvmArgs = applicationDefaultJvmArgs.collect{it.replace('TEKU_HOME', "$buildDir/teku")}
  }
}

dependencies {
  compile project(':teku')
  errorprone 'com.google.errorprone:error_prone_core'
}

distributions {
  main {
    contents {
      from("./LICENSE") { into "." }
      from("build/reports/license/license-dependency.html") { into "." }
      from("libs") { into "native" }
      from("build/teku.autocomplete.sh") { into "." }
    }
  }
}

// http://label-schema.org/rc1/
// using the RFC3339 format "2016-04-12T23:20:50.52Z"
def buildTime() {
  def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
  df.setTimeZone(TimeZone.getTimeZone("UTC"))
  return df.format(new Date())
}

// Calculate the version that this build would be published under (if it is published)
// If this exact commit is tagged, use the tag
// If this is on a release-* branch, use the most recent tag appended with +develop (e.g. 0.1.1-RC1+develop)
// Otherwise, use develop
def calculatePublishVersion() {
  if (!grgit) {
    return 'UNKNOWN'
  }
  def specificVersion = calculateVersion()
  def isReleaseBranch = grgit.branch.current().name.startsWith('release-')
  if (specificVersion.contains('+')) {
    return isReleaseBranch ? "${specificVersion.substring(0, specificVersion.indexOf('+'))}+develop" : "develop"
  }
  return specificVersion
}

// Calculate the version that teku --version will report (among other places)
// If this exact commit is tagged, use the tag
// Otherwise use git describe --tags and replace the - after the tag with a +
def calculateVersion() {
  if (!grgit) {
    return 'UNKNOWN'
  }
  String version = grgit.describe(tags: true)
  if (version == null) {
    return "UNKNOWN+g${grgit.head().abbreviatedId}"
  }
  def versionPattern = ~/^(?<lastVersion>.*)-(?<devVersion>[0-9]+-g[a-z0-9]+)$/
  def matcher = version =~ versionPattern
  if (matcher.find()) {
    return "${matcher.group("lastVersion")}+${matcher.group("devVersion")}"
  }
  return version
}

task printVersion() {
  doFirst {
    print "Specific version: ${specificVersion}  Publish version: ${project.version}"
  }
}


def getCheckedOutGitCommitHash() {
  def takeFromHash = 8
  grgit ? grgit.head().id.take(takeFromHash) : 'UNKNOWN'
}

task jacocoRootReport(type: JacocoReport) {
  additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
  classDirectories.from = files(subprojects.sourceSets.main.output)
  executionData.from = files(subprojects.jacocoTestReport.executionData)  //how to exclude some package/classes com.test.**
  reports {
    xml.enabled true
    csv.enabled true
    html.destination file("build/reports/jacocoHtml")
  }
  onlyIf = { true }
  doFirst {
    executionData = files(executionData.findAll { it.exists() })
  }
}

configurations { annotationProcessor }

// Prevent errorprone-checks being dependent upon errorprone-checks!
// However, ensure all subprojects comply with the custom rules.
configure(subprojects.findAll {it.name != 'errorprone-checks'}) {
  dependencies { annotationProcessor project(":errorprone-checks") }

  tasks.withType(JavaCompile) {
    options.annotationProcessorPath = configurations.annotationProcessor
  }
}

task cloudsmithUpload {
  dependsOn([distTar, distZip])
  doLast {
    exec {
      executable project.file("scripts/cloudsmith-upload.sh")
      args rootProject.version, distTar.archiveFile.get(), distZip.archiveFile.get()
    }
  }
}

task dockerUpload {
  dependsOn([distDocker])
  def dockerBuildVersion = "${rootProject.version}"
  def imageName = "consensys/teku"
  def image = "${imageName}:${dockerBuildVersion}"

  def additionalTags = []
  if (project.hasProperty('branch') && project.property('branch') == 'master') {
    additionalTags.add('develop')
  }

  if (!isDevelopBuild) {
    additionalTags.add('latest')
    additionalTags.add(dockerBuildVersion.split(/\./)[0..1].join('.'))
  }

  doLast {
    for (def variant in dockerVariants) {
      def variantImage = "${image}-${variant}"
      def variantBuildImage = "${imageName}:develop-${variant}"
      def cmd = "docker tag '${variantBuildImage}' '${variantImage}' && docker push '${variantImage}'"
      exec {
        additionalTags.each { tag -> cmd += " && docker tag '${variantBuildImage}' '${imageName}:${tag.trim()}-${variant}' && docker push '${imageName}:${tag.trim()}-${variant}'" }
        executable "sh"
        args '-c', cmd
      }
    }

    // Publish default version without variant suffix
    exec {
      def cmd = "docker tag '${imageName}:develop' '${image}' && docker push '${image}'"
      additionalTags.each { tag -> cmd += " && docker tag '${image}' '${imageName}:${tag.trim()}' && docker push '${imageName}:${tag.trim()}'" }
      executable "sh"
      args '-c', cmd
    }
  }
}
