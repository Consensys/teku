/*
 * Copyright 2020 ConsenSys AG.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

package tech.pegasys.artemis.networking.eth2.rpc.core;

import static org.assertj.core.api.Assertions.assertThat;

import io.netty.buffer.ByteBuf;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import org.apache.tuweni.bytes.Bytes;
import org.junit.jupiter.api.Test;
import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;

public class ResponseRpcDecoderTestWithSaphireTestnetData extends RpcDecoderTestBase {

  private static final int blockCount = 6;
  private static final List<Bytes> originalChunks =
      List.of(
              "0x00",
              "0x
              "0x00",
              "0x8C0364000000B44FEB11DC69F392B88648069B4392439882743B1FD592EA480B65BA6230399BD88FE69465C149DE10333E3803D07F340E8BD93C9990F06C04657DE3128F2CE34351C7019C4AA272EFCD8AA0A18B86C93C3F3318A39E15286E204E16C08CCD05DA00000000000000A47B3B282366334C3D928B19914B75920DF04731F7ABC1D50F5CC654F90CFF95FF0E0A98419B13FAD6737E5741B8C4595D9C4AF2ABDBA6E13F003C937086BAF04C00000083881FCFA8046D8BE6690192EB7CAE86193DA5400FC7971656032EB2606629602C7DD9F145A39669C91FA549BD30BE190A1546525A9C2294D30F9254C1C8DD64BA69BABC260A10B645F41B2E0F4C6949D2541B58F8AB67BA10B2D55447D47E89F488A7CA8DCB0C295BEA49A4FF4AFBDD1071150BFD2912E6EBD242A86239F99C6D6D000000000000CF291F1FAF97BE8B9149F199AAA18FBBC34359A7DE4A97C9F10BA22BFE38DCBCF09F928E76616C696461746F722D373764636434366239362D717A6B7A76F09FDC000000DC000000DC000000DC000000DC000000",
              "0x00",
              "0xE20E64000000905D4D65488269C151DC518067A237FDA47D3C4D4685A5AA9056EE1138BE90504076CDC1B9E7E66661E4B37E9E11D2670272DC32EF94557BB3595446778B7B8F0AEFB77CB23D001B810A4FBD20EDE1DE41295D72154EBAC07563874F99797379DB00000000000000ED3260E13CABCCDCD750E8797200F675E45B0BA4BF5434AC5E330C88815A06276D4DA31FAA1B13D3547E31B166D3E71517E57B07A70787D7023DE7B074D5644E4C000000B1AA5C214778D13137A32343DAADCF19B9F93BEF46359B4E3129D48A825F9364CD53278822A0E01B6B58C1227B02B09E171AD5918822B7BF04BFB65A52A56216E356387310DD40C3EA327ADF95EEE14CEB0C5375121F92203FC20187F6F033E2F488A7CA8DCB0C295BEA49A4FF4AFBDD1071150BFD2912E6EBD242A86239F99C6D6D000000000000CF291F1FAF97BE8B9149F199AAA18FBBC34359A7DE4A97C9F10BA22BFE38DCBCF09F928E76616C696461746F722D373764636434366239362D3278346C76F09FDC000000DC000000DC000000B2060000B2060000180000000D01000002020000F7020000EC030000E1040000E4000000DA000000000000000300000000000000ED3260E13CABCCDCD750E8797200F675E45B0BA4BF5434AC5E330C88815A06270000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000008B25301BDEBA020D4226E949EAE0ECEFB8863E060B7844566D51E0A42ED6490EA1EE9FBB8AC2AD1710116A16066B21FDF65105B3E98BD61E4FFED07F65C3030A6D4315B9C9E83AE47A9791E084C99A4C0AF59B5CE7A9C6DE43C15CDF09FCEED4CF5E89E3DD5BAB30B8022B290A937B477268D2C6EA633A06AC2AAE6C588F9FC30040089800220104202408044C41040601E4000000DA000000000000000100000000000000ED3260E13CABCCDCD750E8797200F675E45B0BA4BF5434AC5E330C88815A06270000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000008B25301BDEBA020D4226E949EAE0ECEFB8863E060B7844566D51E0A42ED6490EB8F765381C0DCC9DE5E18956AD8F89C5F817475031019E18922C5CAD8DFF071FDADFC3DFB102E0784D6914B60E323D620885614373B29E1248FF81A980E2E15B9F4261FBB92F3899D248D5EC3F25FFC3B04FD4E1E945090D886D841A4C27E54910000000012021200010404040888A8C01E4000000DA000000000000000200000000000000ED3260E13CABCCDCD750E8797200F675E45B0BA4BF5434AC5E330C88815A06270000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000008B25301BDEBA020D4226E949EAE0ECEFB8863E060B7844566D51E0A42ED6490EAEA99D7FC19B4363C9E749411472F22F6876BE694862FE44B4AE64E63D792AA221CE0455E76A4B23A659CEF23B97B00E0C06DFF1117E9B8E822C34467FE276E84F9A28FCEB326E89E38F9B4119AD55BA300FCBC43B4F578E79F67EC1038FFE592000000000042800048002C00C00300601E4000000DA000000000000000100000000000000ED3260E13CABCCDCD750E8797200F675E45B0BA4BF5434AC5E330C88815A06270000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000008B25301BDEBA020D4226E949EAE0ECEFB8863E060B7844566D51E0A42ED6490EA03E842ED70BBB25E3A7E9185DB475CC64195FB066FC89E4807A8B2D2AF2FE8A7E491E60E38556E9B0A8456F493ED90609E6EB47341C7B6C6F9BF384A5AEE2246F8FE48B48E69C495C9C14E1A243A88A3E021A20D869675A4D1C0FD6E8B8167EEFFFFFFFFECFDED7FFEFBFBFBF77757301E4000000DA000000000000000000000000000000ED3260E13CABCCDCD750E8797200F675E45B0BA4BF5434AC5E330C88815A06270000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000008B25301BDEBA020D4226E949EAE0ECEFB8863E060B7844566D51E0A42ED6490EAB09F9AC91141D9F98CCB345456CC925FF3A95FB7689B4492D6C283691567BD5B00CA16762136D278186E390A70E168F183AEE0C7F7668D4C1C7122F5AF7747CEEDB77F7F2507AF9588F99DEDAA444F39DAFE83D9977D16A3920AA89D63B192DFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFF01E4000000DA000000000000000300000000000000ED3260E13CABCCDCD750E8797200F675E45B0BA4BF5434AC5E330C88815A06270000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000008B25301BDEBA020D4226E949EAE0ECEFB8863E060B7844566D51E0A42ED6490EB7AA863357E40AF6866AB549ABB22F02813D8039284B2C3B3CEE0F609900BD0E39E6638ADBE856BDDD0FC3CA827B0B4713CC89EEA409C506918687A073C87318F260C29F364DE409FC2FBC3F4713333211A904D872C69EB7D070C0609E999EA9FFBFF767EFDDFEFBDFDBF7F3B3BEFBF901",
              "0x00",
              "0x
              "0x00",
              "0xF00A64000000B2717398B5B10FB959C92357ADDCAC358D2A65E958AA27D10FD5E116DA3D12FE9FBA38C92E252D663345B982C90A419A0C9EA70D1DAFD7970D0845DC670C73A927EE6C65C9502565C7A637BE53337C9771661AC0231A95A737F80903ECAD8299DD0000000000000060FDDC61FCBE2DE59B165C8420907AB756759764BCADF56C7393E766CD1778F605F8CB09A3B3E878ED302EEDCF6AB79F670DA8C2E01604674C3AB1B3C34963644C000000A0AE04198E69F0A125CA54A2228EFFADC5B7A9E7D037BEF9F0E085D690776699662C0A12D448C7A5BBC2618A72C0B33E19B146330300E03E8859A68E16DBE44A5C95486AF33CA98EBAEBF2ED8A07021773051B633E4CA5A87D179865484615C1F488A7CA8DCB0C295BEA49A4FF4AFBDD1071150BFD2912E6EBD242A86239F99C6D6D000000000000CF291F1FAF97BE8B9149F199AAA18FBBC34359A7DE4A97C9F10BA22BFE38DCBCF09F928E76616C696461746F722D373764636434366239362D64676B6B71F09FDC000000DC000000DC000000C0040000C00400001000000005010000FA010000EF020000E4000000DC00000000000000010000000000000060FDDC61FCBE2DE59B165C8420907AB756759764BCADF56C7393E766CD1778F60000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000008B25301BDEBA020D4226E949EAE0ECEFB8863E060B7844566D51E0A42ED6490EA92B1B1C80654748F90BBB2C9F63CEBF5DAF49448F035A5BD2B61D2EA336AFABA2023975BFB866DF31E7D37231ED420B172B4155A6C1615E53B69D50839F9B0AE75C349372FD4B8F1ED557D41822A48559552833BA769950FFFEAC53798903F5FFFDFFFFFFFFFFFFEFFF7FFFFFFFFFF701E4000000DC00000000000000030000000000000060FDDC61FCBE2DE59B165C8420907AB756759764BCADF56C7393E766CD1778F60000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000008B25301BDEBA020D4226E949EAE0ECEFB8863E060B7844566D51E0A42ED6490E98688D2BE6A43B46E1A02022F7AF2A296494D9A9C001E19979A76EF54D91B90F78CF02A623D009EA01B13CFA9A8A99AA00F741B38BBAA64054DDDC0075AE5052854B1E00D834081802FFF5636B997F4E23E724D16331086A806D69AC0580F292FFFFFFFFFBFFFFFFFBFBFFFFFFFFFFFF01E4000000DC00000000000000020000000000000060FDDC61FCBE2DE59B165C8420907AB756759764BCADF56C7393E766CD1778F60000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000008B25301BDEBA020D4226E949EAE0ECEFB8863E060B7844566D51E0A42ED6490E806B2DF0ED5325349AEE485758CF4B0DB236D5F6A0915AD7DDCDD35DDF5891B45DDF80C67CC409B96A0F2F141BC975820E5807AE1E3570C3BB6F54264E54BA076B4DDA8BAE709E4D9CD9C20685ADCEB0B2CA71674568F1161873DE39D337B87AFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF01E4000000DC00000000000000000000000000000060FDDC61FCBE2DE59B165C8420907AB756759764BCADF56C7393E766CD1778F60000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000008B25301BDEBA020D4226E949EAE0ECEFB8863E060B7844566D51E0A42ED6490E806D182D6AF4B27237B94DEC53C38C1949F9E87976423872CED6564BCB2EF330C2EC1B959B27FE0F159F5C73CE6325F1170305EE778BFBE0DA43A7454B9F33BBDBFFD6AA6940B5DBFB02CDE8C49C3B53A3397F683144C0F5A6C3663049103063FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF01",
              "0x00",
              "0x
          .stream()
          .map(Bytes::fromHexString)
          .collect(Collectors.toList());

  private static final Bytes combinedData = Bytes.concatenate(originalChunks.toArray(new Bytes[0]));

  private final List<SignedBeaconBlock> receivedBlocksByRange = new ArrayList<>();
  private final Consumer<SignedBeaconBlock> blocksByRangeCallback = receivedBlocksByRange::add;
  private final ResponseRpcDecoder<SignedBeaconBlock> blocksByRangeDecoder =
      new ResponseRpcDecoder<>(blocksByRangeCallback, BEACON_CHAIN_METHODS.beaconBlocksByRange());

  @Test
  public void processOriginalChunks() throws Exception {

    ByteBuf buf;
    for (Bytes chunk : originalChunks) {
      buf = buffer(chunk);
      blocksByRangeDecoder.onDataReceived(buf);
    }

    assertThat(receivedBlocksByRange.size()).isEqualTo(blockCount);
  }

  @Test
  public void processRecombinedChunks_twoRoughlyEqualChunks() throws Exception {
    testProcessingRecombinedChunks(7);
  }

  @Test
  public void processRecombinedChunk_firstChunkThenTheRest() throws Exception {
    testProcessingRecombinedChunks(1);
  }

  @Test
  public void processRecombinedChunks_lastChunkSentAlone() throws Exception {
    testProcessingRecombinedChunks(originalChunks.size() - 1);
  }

  @Test
  public void processRecombinedChunks_multipleCombinedChunks() throws Exception {
    testProcessingRecombinedChunks(1, 3, 8);
  }

  private void testProcessingRecombinedChunks(final Integer... boundaryIndexes) throws Exception {
    final List<Integer> segmentEndIndexes =
        Arrays.stream(boundaryIndexes).collect(Collectors.toList());
    segmentEndIndexes.add(originalChunks.size());

    int startIndex = 0;
    for (int i = 0; i < segmentEndIndexes.size(); i++) {
      final int endIndex = segmentEndIndexes.get(i);
      final ByteBuf buf =
          buffer(originalChunks.subList(startIndex, endIndex).toArray(new Bytes[0]));
      blocksByRangeDecoder.onDataReceived(buf);

      startIndex = endIndex;
    }

    assertThat(receivedBlocksByRange.size()).isEqualTo(blockCount);
  }

  @Test
  public void processArbitrarySegments_bytesSplitInHalf() throws Exception {
    testProcessingArbitrarySegments(combinedData.size() / 2);
  }

  @Test
  public void processArbitrarySegments_firstByteThenEverythingElse() throws Exception {
    testProcessingArbitrarySegments(1);
  }

  @Test
  public void processArbitrarySegments_everythingThenLastByte() throws Exception {
    testProcessingArbitrarySegments(combinedData.size() - 1);
  }

  @Test
  public void processArbitrarySegments_multipleSegments() throws Exception {
    final int size = combinedData.size();
    testProcessingArbitrarySegments(size / 5, size / 4, size * 11 / 20, size * 9 / 10);
  }

  @Test
  public void processArbitrarySegments_splitSecondBlockAcrossMultipleBuffers() throws Exception {
    final int firstBlockSize = originalChunks.get(0).size() + originalChunks.get(1).size();
    final int secondBlockSize = originalChunks.get(2).size() + originalChunks.get(3).size();
    testProcessingArbitrarySegments(
        firstBlockSize + secondBlockSize / 3, firstBlockSize + secondBlockSize / 3 + 10);
  }

  private void testProcessingArbitrarySegments(final Integer... byteBoundaryIndexes)
      throws Exception {
    final List<Integer> byteEndIndexes =
        Arrays.stream(byteBoundaryIndexes).collect(Collectors.toList());
    byteEndIndexes.add(combinedData.size());

    int startIndex = 0;
    for (int i = 0; i < byteEndIndexes.size(); i++) {
      final int endIndex = byteEndIndexes.get(i);
      final int size = endIndex - startIndex;
      final ByteBuf buf = buffer(combinedData.slice(startIndex, size));
      blocksByRangeDecoder.onDataReceived(buf);

      startIndex = endIndex;
    }

    assertThat(receivedBlocksByRange.size()).isEqualTo(blockCount);
  }
}
