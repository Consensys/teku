{
  "get" : {
    "tags" : [ "Validator", "Validator Required Api" ],
    "operationId" : "produceBlockV3",
    "summary" : "Produce a new block, without signature.",
    "description" : "Requests a beacon node to produce a valid block, which can then be signed by a validator. The\nreturned block may be blinded or unblinded, depending on the current state of the network as\ndecided by the execution and beacon nodes.\nThe beacon node must return an unblinded block if it obtains the execution payload from its\npaired execution node. It must only return a blinded block if it obtains the execution payload\nheader from an MEV relay.\nMetadata in the response indicates the type of block produced, and the supported types of block\nwill be added to as forks progress.",
    "parameters" : [ {
      "name" : "slot",
      "required" : true,
      "in" : "path",
      "schema" : {
        "type" : "string",
        "description" : "The slot for which the block should be proposed.",
        "example" : "1",
        "format" : "uint64"
      }
    }, {
      "name" : "randao_reveal",
      "required" : true,
      "in" : "query",
      "schema" : {
        "type" : "string",
        "description" : "`BLSSignature Hex` BLS12-381 signature for the current epoch.",
        "example" : "0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505",
        "format" : "byte"
      }
    }, {
      "name" : "graffiti",
      "in" : "query",
      "schema" : {
        "type" : "string",
        "description" : "`Bytes32 Hex` Graffiti.",
        "example" : "0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2",
        "format" : "byte"
      }
    }, {
      "name" : "builder_boost_factor",
      "in" : "query",
      "schema" : {
        "type" : "string",
        "description" : "Percentage multiplier to apply to the builder's payload value when choosing between a\nbuilder payload header and payload from the paired execution node. This parameter is only\nrelevant if the beacon node is connected to a builder, deems it safe to produce a builder\npayload, and receives valid responses from both the builder endpoint _and_ the paired\nexecution node. When these preconditions are met, the server MUST act as follows:\n\n* if `exec_node_payload_value >= builder_boost_factor * (builder_payload_value // 100)`,\n  then return a full (unblinded) block containing the execution node payload.\n* otherwise, return a blinded block containing the builder payload header.\n\nServers must support the following values of the boost factor which encode common\npreferences:\n\n* `builder_boost_factor=0`: prefer the execution node payload unless an error makes it\n  unviable.\n* `builder_boost_factor=100`: default profit maximization mode; choose whichever\n  payload pays more.\n* `builder_boost_factor=2**64 - 1`: prefer the builder payload unless an error or\n  beacon node health check makes it unviable.\n\nServers should use saturating arithmetic or another technique to ensure that large values of\nthe `builder_boost_factor` do not trigger overflows or errors. If this parameter is\nprovided and the beacon node is not configured with a builder then the beacon node MUST\nrespond with a full block, which the caller can choose to reject if it wishes. If this\nparameter is **not** provided then it should be treated as having the default value of 100.\nIf the value is provided but out of range for a 64-bit unsigned integer, then an error\nresponse with status code 400 MUST be returned.",
        "example" : "1",
        "format" : "uint64"
      }
    }, {
      "name" : "skip_randao_verification",
      "allowEmptyValue" : true,
      "in" : "query",
      "schema" : {
        "type" : "string",
        "description" : "Skip verification of the `randao_reveal` value. Ignored in the Teku implementation.",
        "minLength" : 0,
        "maxLength" : 0
      }
    } ],
    "responses" : {
      "200" : {
        "description" : "Request successful",
        "headers": {
          "Eth-Consensus-Version": {
            "description": "Required in response so client can deserialize returned json or ssz data more effectively.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "phase0",
                "altair",
                "bellatrix",
                "capella",
                "deneb",
                "electra"
              ],
              "example": "phase0"
            }
          },
          "Eth-Execution-Payload-Blinded": {
            "description": "Required in response so client can deserialize returned json or ssz data to the correct object.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          "Eth-Execution-Payload-Value": {
            "description": "Execution payload value in Wei. Required in response so client can determine relative value of execution payloads.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1"
            }
          },
          "Eth-Consensus-Block-Value": {
            "description": "Consensus rewards paid to the proposer for this block, in Wei. Required in response so client can determine relative value of consensus blocks.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1"
            }
          }
        },
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ProduceBlockV3Response"
            }
          },
          "application/octet-stream" : {
            "schema" : {
              "type" : "string",
              "format" : "binary"
            }
          }
        }
      },
      "503" : {
        "description" : "Service unavailable",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      },
      "204" : {
        "description" : "Data is unavailable because the chain has not yet reached genesis",
        "content" : { }
      },
      "400" : {
        "description" : "The request could not be processed, check the response for more information.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      },
      "500" : {
        "description" : "Internal server error",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      }
    }
  }
}