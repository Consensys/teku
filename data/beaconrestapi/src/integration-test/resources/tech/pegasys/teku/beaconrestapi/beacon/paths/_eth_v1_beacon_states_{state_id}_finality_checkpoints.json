{
  "get" : {
    "tags" : [ "Beacon" ],
    "operationId" : "getStateFinalityCheckpoints",
    "summary" : "Get state finality checkpoints",
    "description" : "Returns finality checkpoints for state with given 'state_id'. In case finality is not yet achieved, checkpoint should return epoch 0 and ZERO_HASH as root.",
    "parameters" : [ {
      "name" : "state_id",
      "required" : true,
      "in" : "path",
      "schema" : {
        "type" : "string",
        "description" : "State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.",
        "example" : "head"
      }
    } ],
    "responses" : {
      "200" : {
        "description" : "Request successful",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "required" : [ "execution_optimistic", "finalized", "data" ],
              "properties" : {
                "execution_optimistic" : {
                  "type" : "boolean"
                },
                "finalized" : {
                  "type" : "boolean"
                },
                "data" : {
                  "type" : "object",
                  "required" : [ "previous_justified", "current_justified", "finalized" ],
                  "properties" : {
                    "previous_justified" : {
                      "$ref" : "#/components/schemas/Checkpoint"
                    },
                    "current_justified" : {
                      "$ref" : "#/components/schemas/Checkpoint"
                    },
                    "finalized" : {
                      "$ref" : "#/components/schemas/Checkpoint"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404" : {
        "description" : "Not found",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      },
      "400" : {
        "description" : "The request could not be processed, check the response for more information.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      },
      "500" : {
        "description" : "Internal server error",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      }
    }
  }
}