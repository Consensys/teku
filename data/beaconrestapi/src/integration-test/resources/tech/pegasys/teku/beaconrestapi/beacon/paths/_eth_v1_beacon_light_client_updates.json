{
  "get" : {
    "tags" : ["Beacon", "Experimental"],
    "operationId" : "getLightClientUpdatesByRange",
    "summary" : "Get `LightClientUpdate` instances in a requested sync committee period range",
    "description" : "Requests the [`LightClientUpdate`](https://github.com/ethereum/consensus-specs/blob/v1.2.0-rc.3/specs/altair/light-client/sync-protocol.md#lightclientupdate) instances in the sync committee period range `[start_period, start_period + count)`, leading up to the current head sync committee period as selected by fork choice. Depending on the `Accept` header they can be returned either as JSON or SSZ-serialized bytes.",
    "parameters" : [ {
      "name" : "start_period",
      "required" : true,
      "in" : "query",
      "schema" : {
        "type" : "string",
        "description" : "`uint64` value representing start_period",
        "example" : "1",
        "format" : "uint64"
      }
    }, {
      "name" : "count",
      "required" : true,
      "in" : "query",
      "schema" : {
        "type" : "string",
        "description" : "`uint64` value representing count",
        "example" : "1",
        "format" : "uint64"
      }
    } ],
    "responses" : {
      "200" : {
        "description" : "Request successful",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "object",
                "required" : [ "version", "data" ],
                "properties" : {
                  "version": {
                    "type": "string",
                    "enum": [
                      "phase0",
                      "altair",
                      "bellatrix",
                      "capella",
                      "deneb"
                    ]
                  },
                  "data": {
                    "$ref": "#/components/schemas/LightClientUpdate"
                  }
                }
              }
            }
          },
          "application/octet-stream" : {
            "schema" : {
              "type" : "string",
              "format" : "binary"
            }
          }
        }
      },
      "406" : {
        "description" : "Not acceptable",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      },
      "501" : {
        "description" : "Not implemented",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      },
      "400": {
        "description" : "The request could not be processed, check the response for more information.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      },
      "500" : {
        "description" : "Internal server error",
        "content" : {
          "application/json": {
            "schema" : {
              "$ref" : "#/components/schemas/HttpErrorResponse"
            }
          }
        }
      }
    }
  }
}