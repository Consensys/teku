/*
 * Copyright Consensys Software Inc., 2022
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

package tech.pegasys.teku.infrastructure.ssz.containers;

import java.util.List;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import tech.pegasys.teku.infrastructure.ssz.SszData;
import tech.pegasys.teku.infrastructure.ssz.SszProfile;
import tech.pegasys.teku.infrastructure.ssz.SszStableContainer;
import tech.pegasys.teku.infrastructure.ssz.schema.SszSchema;
import tech.pegasys.teku.infrastructure.ssz.schema.SszStableContainerSchema;
import tech.pegasys.teku.infrastructure.ssz.schema.impl.AbstractSszContainerSchema.NamedSchema;
import tech.pegasys.teku.infrastructure.ssz.schema.impl.AbstractSszProfileSchema;
import tech.pegasys.teku.infrastructure.ssz.tree.TreeNode;

/** Autogenerated by tech.pegasys.teku.ssz.backing.ContainersGenerator */
public abstract class ProfileSchema3<
        C extends SszProfile, V0 extends SszData, V1 extends SszData, V2 extends SszData>
    extends AbstractSszProfileSchema<C> {

  private final int[] indexMapping;

  public static <C extends SszProfile, V0 extends SszData, V1 extends SszData, V2 extends SszData>
      ProfileSchema3<C, V0, V1, V2> create(
          final SszStableContainerSchema<? extends SszStableContainer> stableContainerSchema,
          final Set<Integer> activeFieldIndices,
          final BiFunction<ProfileSchema3<C, V0, V1, V2>, TreeNode, C> instanceCtor) {
    return new ProfileSchema3<>("", stableContainerSchema, activeFieldIndices) {
      @Override
      public C createFromBackingNode(final TreeNode node) {
        return instanceCtor.apply(this, node);
      }
    };
  }

  protected ProfileSchema3(
      final String containerName,
      final SszSchema<V0> fieldSchema0,
      final SszSchema<V1> fieldSchema1,
      final SszSchema<V2> fieldSchema2,
      final int maxFieldCount) {
    this(
        containerName,
        SszStableContainerSchema.createFromSchemasForProfileOnly(
            maxFieldCount, List.of(fieldSchema0, fieldSchema1, fieldSchema2)),
        IntStream.range(0, 3).boxed().collect(Collectors.toUnmodifiableSet()));
  }

  protected ProfileSchema3(
      final String containerName,
      final NamedSchema<V0> fieldNamedSchema0,
      final NamedSchema<V1> fieldNamedSchema1,
      final NamedSchema<V2> fieldNamedSchema2,
      final int maxFieldCount) {
    this(
        containerName,
        SszStableContainerSchema.createFromNamedSchemasForProfileOnly(
            maxFieldCount, List.of(fieldNamedSchema0, fieldNamedSchema1, fieldNamedSchema2)),
        IntStream.range(0, 3).boxed().collect(Collectors.toUnmodifiableSet()));
  }

  protected ProfileSchema3(
      final String containerName,
      final SszStableContainerSchema<? extends SszStableContainer> stableContainerSchema,
      final Set<Integer> activeFieldIndices) {

    super(containerName, stableContainerSchema, activeFieldIndices, Set.of());

    assert activeFieldIndices.size() == 3;

    this.indexMapping = activeFieldIndices.stream().sorted().mapToInt(i -> i).toArray();
  }

  protected int mapToIndex(final int fieldNumber) {
    return indexMapping[fieldNumber];
  }

  @SuppressWarnings("unchecked")
  public SszSchema<V0> getFieldSchema0() {
    return (SszSchema<V0>) getChildSchema(indexMapping[0]);
  }

  @SuppressWarnings("unchecked")
  public SszSchema<V1> getFieldSchema1() {
    return (SszSchema<V1>) getChildSchema(indexMapping[1]);
  }

  @SuppressWarnings("unchecked")
  public SszSchema<V2> getFieldSchema2() {
    return (SszSchema<V2>) getChildSchema(indexMapping[2]);
  }
}
