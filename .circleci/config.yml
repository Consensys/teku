version: 2.1
orbs:
  slack: circleci/slack@3.4.2
  win: circleci/windows@5.0.0
executors:
  small_executor:
    docker:
      - image: cimg/openjdk:21.0.2
        auth: &docker-auth
          # Don't panic, throw away account to avoid Docker rate limits when downloading.
          # Second reason we're doing this is so that forked PRs from external contributors works ie env vars aren't visible to forked PRs from within contexts
          username: "cddockeruser"
          password: "fa8651f2-88be-48b7-98ce-e711bd376252"
    resource_class: small
    working_directory: ~/project
    environment:
      JAVA_TOOL_OPTIONS: -Xmx1500m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true

  trivy_executor:
    docker:
      - image: docker:stable-git
        auth:
          <<: *docker-auth
    resource_class: small
    working_directory: ~/project

  medium_executor:
    docker:
      - image: cimg/openjdk:21.0.2
        auth:
          <<: *docker-auth
    resource_class: medium
    working_directory: ~/project
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
      JAVA_TOOL_OPTIONS: -Xmx1500m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true

  medium_plus_executor:
    docker:
      - image: cimg/openjdk:21.0.2
        auth:
          <<: *docker-auth
    resource_class: "medium+"
    working_directory: ~/project
    environment:
      JAVA_TOOL_OPTIONS: -Xmx1500m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true

  large_executor:
    docker:
      - image: cimg/openjdk:21.0.2
        auth:
          <<: *docker-auth
    resource_class: large
    working_directory: ~/project
    environment:
      JAVA_TOOL_OPTIONS: -Xmx3g
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true

  machine_executor_amd64:
    machine:
      image: ubuntu-2204:2024.01.1 # https://circleci.com/developer/machine/image/ubuntu-2204
      docker_layer_caching: true
    working_directory: ~/project
    environment:
      architecture: "amd64"
      platform: "linux/amd64"

  machine_executor_arm64:
    machine:
      image: ubuntu-2204:2024.01.1 # https://circleci.com/developer/machine/image/ubuntu-2204
    resource_class: arm.medium
    environment:
      architecture: "arm64"
      platform: "linux/arm64"

  node_executor:
    docker:
      - image: circleci/node:16-bullseye
        auth:
          <<: *docker-auth

commands:
  install_java_21:
    description: "Install Java 21"
    steps:
      - run:
          name: "Install Java 21"
          command: |
            sudo apt update
            sudo apt install -y openjdk-21-jdk
            if [ "$(uname -m)" = "aarch64" ]; then
              ARCH="arm64"
            else
              ARCH="amd64"
            fi
            sudo update-alternatives --set java /usr/lib/jvm/java-21-openjdk-$ARCH/bin/java
            sudo update-alternatives --set javac /usr/lib/jvm/java-21-openjdk-$ARCH/bin/javac
  prepare:
    description: "Prepare"
    steps:
      - checkout
      - restore_cache:
          name: Restore cached gradle dependencies
          keys:
            - deps-{{ checksum "build.gradle" }}-{{ checksum "gradle/versions.gradle" }}-{{ .Branch }}-{{ .Revision }}
            - deps-{{ checksum "build.gradle" }}-{{ checksum "gradle/versions.gradle" }}
  capture_test_results:
    description: "Capture test results"
    steps:
      - run:
          name: "Gather test results"
          when: "always"
          command: |
            FILES=`find . -name test-results`
            for FILE in $FILES
            do
              MODULE=`echo "$FILE" | sed -e 's@./\(.*\)/build/test-results@\1@'`
              TARGET="build/test-results/$MODULE"
              mkdir -p "$TARGET"
              find ${FILE} -mindepth 2 -maxdepth 2 -print0 | xargs -0 -I{} cp -rf {} $TARGET
            done
      - store_test_results:
          path: build/test-results

  capture_test_artifacts:
    description: "Capture test artifacts"
    steps:
      - run:
          name: "Gather test artifacts"
          when: "always"
          command: |
            FILES=`find . -name test-artifacts`
            for FILE in $FILES
            do
              MODULE=`echo "$FILE" | sed -e 's@./\(.*\)/build/test-artifacts@\1@'`
              TARGET="build/test-artifacts/$MODULE"
              mkdir -p "$TARGET"
              cp -rf ${FILE}/*/* "$TARGET"
            done
      - store_artifacts:
          path: build/test-artifacts

  docker_trust_sign:
    description: "Sign docker images"
    steps:
      - run:
          name: "Sign Docker images"
          command: |
            docker login --username "${DOCKER_USER_RW}" --password "${DOCKER_PASSWORD_RW}"
            # dct signing setup
            mkdir -p $HOME/.docker/trust/private
            echo $DCT_KEY | base64 --decode > $HOME/.docker/trust/private/$DCT_HASH.key
            chmod 600 $HOME/.docker/trust/private/$DCT_HASH.key
            docker trust key load $HOME/.docker/trust/private/$DCT_HASH.key --name ecosystem

  docker_publish_images:
    description: "Upload the docker images"
    steps:
      - run:
          name: "Publish Docker Images"
          command: |
            docker login --username "${DOCKER_USER_RW}" --password "${DOCKER_PASSWORD_RW}"
            ./gradlew --no-daemon --parallel -Pbranch=${CIRCLE_BRANCH} -PincludeCommitHashInDockerTag=<< pipeline.parameters.include_commit_hash_in_docker_tag >> uploadDocker

  notify:
    description: "Notify Slack"
    steps:
      - slack/status:
          mentions: "team-centaur"
          fail_only: true
          only_for_branches: 'master'

parameters:
  include_commit_hash_in_docker_tag:
    type: boolean
    default: false

jobs:
  assemble:
    executor: large_executor
    steps:
      - prepare
      - run:
          name: Assemble
          command: |
            ./gradlew --no-daemon --parallel clean compileJava compileTestJava compileJmhJava compileIntegrationTestJava compileAcceptanceTestJava compilePropertyTestJava assemble
      - run:
          name: Prep Artifacts
          command: |
            mkdir /tmp/teku-distributions
            cp build/distributions/*.tar.gz /tmp/teku-distributions/
      - notify
      - save_cache:
          name: Caching gradle dependencies
          key: deps-{{ checksum "build.gradle" }}-{{ checksum "gradle/versions.gradle" }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - .gradle
            - ~/.gradle
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./
      - store_artifacts:
          name: Distribution artifacts
          path:  /tmp/teku-distributions
          destination: distributions
          when: always

  windowsBuild:
    executor:
      name: win/default
      size: xlarge
    steps:
      - checkout
      - restore_cache:
          name: Restore cached gradle dependencies
          keys:
            - deps-{{ checksum "build.gradle" }}-{{ checksum "gradle/versions.gradle" }}-{{ .Branch }}-{{ .Revision }}
            - deps-{{ checksum "build.gradle" }}-{{ checksum "gradle/versions.gradle" }}
      - run:
          name: Build
          no_output_timeout: 20m
          command: |
            $Env:JAVA_TOOL_OPTIONS = "-Xmx2g"
            $Env:GRADLE_OPTS = "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.vfs.watch=false"
            cmd.exe /c gradlew.bat --no-daemon --parallel --build-cache
      - run:
          name: "Gather test artifacts"
          when: "always"
          command: |
            New-Item -ItemType Directory -Force build\test-results
            Get-ChildItem -Recurse | Where-Object {$_.FullName -match "test-results\\.*\\.*.xml"} | Copy-Item -Destination build\test-results\
      - store_test_results:
          path: build/test-results

  spotless:
    executor: small_executor
    steps:
      - prepare
      - run:
          name: Spotless
          command: |
            ./gradlew --no-daemon --parallel checkMavenCoordinateCollisions spotlessCheck checkModuleDependencies
      - notify

  dockerScan:
    executor: trivy_executor
    steps:
      - prepare
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Install trivy
          command: |
            apk add --update-cache --upgrade curl bash
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      - run:
          name: Scan with trivy
          shell: /bin/sh
          command: |
            for FILE in $(ls docker)
            do
              docker pull -q "consensys/teku:develop-$FILE"
              trivy -q image --exit-code 1 --no-progress --severity HIGH,CRITICAL --ignorefile "gradle/trivyignore.txt" --timeout 10m "consensys/teku:develop-$FILE" 
            done
      - notify

  unitTests:
    parallelism: 2
    executor: large_executor
    steps:
      - prepare
      - attach_workspace:
          at: ~/project
      - run:
          name: UnitTests
          no_output_timeout: 20m
          command: |
            CLASSNAMES=$(circleci tests glob "**/src/test/java/**/*.java" \
              | sed 's@.*/src/test/java/@@' \
              | sed 's@/@.@g' \
              | sed 's/.\{5\}$//' \
              | circleci tests split --split-by=timings --timings-type=classname)
            # Format the arguments to "./gradlew test"
            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
            echo "Prepared arguments for Gradle: $GRADLE_ARGS"
            if [[ -z "$GRADLE_ARGS" ]]
            then
              echo "Failed to determine correct distribution of tests across nodes"
              exit 1
            fi
            export JAVA_TOOL_OPTIONS="-Xmx2500m"
            export GRADLE_OPTS="$GRADLE_OPTS -Dorg.gradle.workers.max=3"
            ./gradlew --no-daemon --parallel test $GRADLE_ARGS
      - notify
      - capture_test_results

  propertyTests:
    parallelism: 1
    executor: medium_plus_executor
    steps:
      - prepare
      - attach_workspace:
          at: ~/project
      - run:
          name: PropertyTests
          no_output_timeout: 20m
          command: |
            CLASSNAMES=$(circleci tests glob "**/src/property-test/java/**/*.java" \
              | sed 's@.*/src/property-test/java/@@' \
              | sed 's@/@.@g' \
              | sed 's/.\{5\}$//' \
              | circleci tests split --split-by=timings --timings-type=classname)
            # Format the arguments to "./gradlew test"
            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
            echo "Prepared arguments for Gradle: $GRADLE_ARGS"
            if [[ -z "$GRADLE_ARGS" ]]
            then
              echo "Failed to determine correct distribution of tests across nodes"
              exit 1
            fi
            ./gradlew --no-daemon --parallel --info propertyTest $GRADLE_ARGS
      - notify
      - capture_test_results

  integrationTests:
    executor: medium_plus_executor
    steps:
      - prepare
      - attach_workspace:
          at: ~/project
      - run:
          name: IntegrationTests
          no_output_timeout: 20m
          command: |
            ./gradlew --no-daemon --parallel integrationTest
      - notify
      - capture_test_results
      - store_artifacts:
          path: build/test-results

  acceptanceTests:
    parallelism: 5
    executor: machine_executor_amd64
    steps:
      - install_java_21
      - prepare
      - attach_workspace:
          at: ~/project
      - run:
          name: AcceptanceTests
          no_output_timeout: 20m
          command: |
            CLASSNAMES=$(circleci tests glob "**/src/acceptance-test/java/**/*.java" \
              | sed 's@.*/src/acceptance-test/java/@@' \
              | sed 's@/@.@g' \
              | sed 's/.\{5\}$//' \
              | circleci tests split --split-by=timings --timings-type=classname)
            # Format the arguments to "./gradlew test"
            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
            echo "Prepared arguments for Gradle: $GRADLE_ARGS"
            if [[ -z "$GRADLE_ARGS" ]]
            then
              echo "Failed to determine correct distribution of tests across nodes"
              exit 1
            fi
            ./gradlew --no-daemon --parallel acceptanceTest $GRADLE_ARGS
      - notify
      - capture_test_results
      - capture_test_artifacts
      - store_artifacts:
          path: build/test-results

  referenceTestsPrep:
    executor: large_executor
    steps:
      - prepare
      - attach_workspace:
          at: ~/project
      - restore_cache:
          name: Restore cached reference test downloads
          keys:
            - reftests-{{ checksum "build.gradle" }}
      - run:
          name: FetchReferenceTests
          command: |
            if [ ! -d "eth-reference-tests/src/referenceTest/resources/consensus-spec-tests/tests" ]
            then
              ./gradlew --no-daemon expandRefTests
            fi
      - run:
          # Compile separately so that we have the generated test files for splitting across nodes
          name: CompileReferenceTests
          command: |
            ./gradlew --no-daemon --parallel compileReferenceTestJava
      - notify
      - save_cache:
          name: Caching reference tests
          key: reftests-{{ checksum "build.gradle" }}
          paths:
            - eth-reference-tests/src/referenceTest/resources/consensus-spec-tests/
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./eth-reference-tests/

  referenceTests:
    parallelism: 6
    executor: large_executor
    steps:
      - prepare
      - attach_workspace:
          at: ~/project
      - run:
          name: ReferenceTests
          no_output_timeout: 30m
          command: |
            CLASSNAMES=$(circleci tests glob "**/src/referenceTest/generated_tests/**/*Test.java" \
              | sed 's@.*/src/referenceTest/generated_tests/@@' \
              | sed 's@/@.@g' \
              | sed 's/.\{5\}$//' \
              | circleci tests split --split-by=timings --timings-type=classname)
            # Format the arguments to "./gradlew test"
            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
            echo "Prepared arguments for Gradle: $GRADLE_ARGS"
            if [[ -z "$GRADLE_ARGS" ]]
            then
              echo "Failed to determine correct distribution of tests across nodes"
              exit 1
            fi
            ./gradlew --no-daemon --parallel -x generateReferenceTestClasses -x processReferenceTestResources -x cleanReferenceTestClasses referenceTest $GRADLE_ARGS
      - notify
      - capture_test_results

  publish-cloudsmith:
    executor: small_executor
    steps:
      - prepare
      - run:
          name: Install Python3
          command: |
            sudo apt update
            sudo apt install python3 python3-pip python3-venv
      - attach_workspace:
          at: ~/project
      - run:
          name: Publish to Cloudsmith
          command: |
            ./gradlew --no-daemon --parallel cloudsmithUpload publish
      - notify

  publishDockerAmd64:
    executor: machine_executor_amd64
    steps:
      - install_java_21
      - prepare
      - attach_workspace:
          at: ~/project
      - docker_trust_sign
      - docker_publish_images
      - notify

  publishDockerArm64:
    executor: machine_executor_arm64
    steps:
      - install_java_21
      - prepare
      - attach_workspace:
          at: ~/project
      - docker_trust_sign
      - docker_publish_images
      - notify

  manifestDocker:
    executor: medium_executor
    steps:
      - prepare
      - docker_trust_sign
      - run:
          name: Create and publish docker manifest
          command: |
            ./gradlew --no-daemon --parallel -PincludeCommitHashInDockerTag=<< pipeline.parameters.include_commit_hash_in_docker_tag >> manifestDocker
      - notify

  extractAPISpec:
    executor: medium_executor
    steps:
      - prepare
      - attach_workspace:
          at: ~/project
      - run:
          name: Build runnable Teku binaries
          command: |
            ./gradlew --no-daemon --parallel installDist
      - run:
          name: Extract OpenAPI JSON
          command: |
            mkdir -p .openapidoc/spec

            build/install/teku/bin/teku --network=mainnet --ee-endpoint=unsafe-test-stub --ignore-weak-subjectivity-period-enabled --Xinterop-enabled=true --rest-api-enabled=true --rest-api-docs-enabled=true 2>&1 > teku_output.log &
            TEKU_PID=$!

            EXIT_CODE=0
            wget --timeout=30 --retry-connrefused --output-document=.openapidoc/spec/teku.json http://localhost:5051/swagger-docs
            if [ $? != 0 ]; then
              EXIT_CODE=1
            fi

            kill $TEKU_PID
            exit $EXIT_CODE
      - notify
      - store_artifacts:
          path: .openapidoc/spec/teku.json
      - store_artifacts:
          path: teku_output.log
      - persist_to_workspace:
          root: ~/project
          paths:
            - .openapidoc/spec/teku.json

  # longish story here: we store the openapi json spec in the `gh-pages` branch of teku on Github
  # The reason we don't use GHA and instead use Circle to push to GHA is:
  # 1. We need assemble -> extractAPISpec -> publishAPISpec and this takes circa 10 mins to build in GHA,
  # 2. We publish artifacts (openapi, docker, binaries etc) only after ALL tests and we can't check for all the jobs passing to kick this one off
  # 3. Minor reason related to 2. single CI helps keep things in one place
  publishAPISpec:
    executor: node_executor
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "2d:5b:b7:9f:f9:b1:5c:2c:d4:5e:4a:bf:9f:2b:75:58"
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys:
            - node-cache-{{ checksum "./.openapidoc/package-lock.json" }}
            - node-cache-
      - run:
          name: install
          working_directory: .openapidoc
          command: |
            npm ci
      - run:
          name: Build Folder
          working_directory: .openapidoc
          command: |
            OA_GIT_USERNAME=$CIRCLE_USERNAME OA_GIT_EMAIL="${CIRCLE_USERNAME}@users.noreply.github.com" OA_GIT_URL=$CIRCLE_REPOSITORY_URL OA_GH_PAGES_BRANCH="gh-pages" node publish.js
      - notify
      - save_cache:
          paths:
            - ~/.npm
          key: node-cache-{{ checksum "./.openapidoc/package-lock.json" }}

workflows:
  circleci:
    jobs:
      - assemble:
          filters:
            tags: &filters-release-tags
              only: /^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?/
      - spotless:
          filters:
            tags:
              <<: *filters-release-tags
      - windowsBuild:
          requires:
            - spotless
          filters:
            tags:
              <<: *filters-release-tags
      - referenceTestsPrep:
          requires:
            - assemble
          filters:
            tags:
              <<: *filters-release-tags
      - referenceTests:
          requires:
            - assemble
            - referenceTestsPrep
          filters:
            tags:
              <<: *filters-release-tags
      - unitTests:
          requires:
            - assemble
          filters:
            tags:
              <<: *filters-release-tags
      - propertyTests:
          requires:
            - assemble
          filters:
            tags:
              <<: *filters-release-tags
      - integrationTests:
          requires:
            - assemble
          filters:
            tags:
              <<: *filters-release-tags
      - acceptanceTests:
          requires:
            - assemble
          filters:
            tags:
              <<: *filters-release-tags
      - extractAPISpec:
          requires:
            - assemble
          filters:
            tags:
              <<: *filters-release-tags
      - publish-cloudsmith:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
            tags:
              <<: *filters-release-tags
          requires:
            - unitTests
            - propertyTests
            - integrationTests
            - acceptanceTests
            - referenceTests
            - extractAPISpec
            - spotless
            - windowsBuild
          context:
            - protocols-cloudsmith
      - publishDockerAmd64:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
            tags:
              <<: *filters-release-tags
          requires:
            - unitTests
            - propertyTests
            - integrationTests
            - acceptanceTests
            - referenceTests
            - extractAPISpec
            - spotless
            - windowsBuild
          context:
            - protocols-dockerhub
      - publishDockerArm64:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
            tags:
              <<: *filters-release-tags
          requires:
            - unitTests
            - propertyTests
            - integrationTests
            - acceptanceTests
            - referenceTests
            - extractAPISpec
            - spotless
            - windowsBuild
          context:
            - protocols-dockerhub
      - manifestDocker:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
            tags:
              <<: *filters-release-tags
          requires:
            - publishDockerArm64
            - publishDockerAmd64
          context:
            - protocols-dockerhub
      - publishAPISpec:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
            tags: # stable doc is published only on tags to prevent confusion on the doc site.
              <<: *filters-release-tags
          requires:
            - unitTests
            - propertyTests
            - integrationTests
            - acceptanceTests
            - referenceTests
            - extractAPISpec
            - spotless
            - windowsBuild
  nightly:
    triggers:
      - schedule:
          cron: "0 19 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - dockerScan
