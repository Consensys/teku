{"openapi":"3.0.1","info":{"title":"Teku","description":"A minimal API specification for the beacon node, which enables a validator to connect and perform its obligations on the Ethereum beacon chain.","license":{"name":"Apache 2.0","url":"https://www.apache.org/licenses/LICENSE-2.0.html"},"version":"v23.9.0+3-gfcfd9704c1"},"paths":{"/eth/v1/beacon/genesis":{"get":{"tags":["Beacon","Validator Required Api"],"operationId":"getGenesis","summary":"Get chain genesis details","description":"Retrieve details of the chain's genesis which can be used to identify chain.","responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetGenesisResponse"}}}},"404":{"description":"Chain genesis info is not yet known","content":{}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/states/{state_id}/root":{"get":{"tags":["Beacon"],"operationId":"getStateRoot","summary":"Get state root","description":"Calculates HashTreeRoot for state with given 'state_id'. If stateId is root, same value will be returned.","parameters":[{"name":"state_id","required":true,"in":"path","schema":{"type":"string","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","example":"head"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateRootResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/states/{state_id}/fork":{"get":{"tags":["Beacon","Validator Required Api"],"operationId":"getSateFork","summary":"Get state fork","description":"Returns Fork object for state with given 'state_id'.","parameters":[{"name":"state_id","required":true,"in":"path","schema":{"type":"string","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","example":"head"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateForkResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/states/{state_id}/finality_checkpoints":{"get":{"tags":["Beacon"],"operationId":"getStateFinalityCheckpoints","summary":"Get state finality checkpoints","description":"Returns finality checkpoints for state with given 'state_id'. In case finality is not yet achieved, checkpoint should return epoch 0 and ZERO_HASH as root.","parameters":[{"name":"state_id","required":true,"in":"path","schema":{"type":"string","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","example":"head"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"type":"object","required":["execution_optimistic","finalized","data"],"properties":{"execution_optimistic":{"type":"boolean"},"finalized":{"type":"boolean"},"data":{"type":"object","required":["previous_justified","current_justified","finalized"],"properties":{"previous_justified":{"$ref":"#/components/schemas/Checkpoint"},"current_justified":{"$ref":"#/components/schemas/Checkpoint"},"finalized":{"$ref":"#/components/schemas/Checkpoint"}}}}}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/states/{state_id}/validators":{"get":{"tags":["Beacon"],"operationId":"getStateValidators","summary":"Get validators from state","description":"Returns filterable list of validators with their balance, status and index.","parameters":[{"name":"state_id","required":true,"in":"path","schema":{"type":"string","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","example":"head"}},{"name":"id","in":"query","schema":{"type":"array","items":{"type":"string","description":"Either hex encoded public key (with 0x prefix) or validator index"},"minItems":"1"}},{"name":"status","in":"query","schema":{"type":"array","items":{"type":"string","description":"valid values:   pending_initialized,   pending_queued,   active_ongoing,   active_exiting,   active_slashed,   exited_unslashed,   exited_slashed,   withdrawal_possible,   withdrawal_done,   active,   pending,   exited,   withdrawal","example":"active_ongoing","format":"string"},"minItems":"1"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateValidatorsResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/states/{state_id}/validators/{validator_id}":{"get":{"tags":["Beacon","Validator Required Api"],"operationId":"getStateValidator","summary":"Get validator from state","description":"Retrieves data about the given peer.","parameters":[{"name":"state_id","required":true,"in":"path","schema":{"type":"string","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","example":"head"}},{"name":"validator_id","required":true,"in":"path","schema":{"type":"string","description":"Either hex encoded public key (with 0x prefix) or validator index","example":"1"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateValidatorResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/states/{state_id}/validator_balances":{"get":{"tags":["Beacon"],"operationId":"getStateValidatorBalances","summary":"Get validator balances from state","description":"Returns filterable list of validator balances.","parameters":[{"name":"state_id","required":true,"in":"path","schema":{"type":"string","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","example":"head"}},{"name":"id","in":"query","schema":{"type":"array","items":{"type":"string","description":"Either hex encoded public key (with 0x prefix) or validator index"},"minItems":"1"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateValidatorBalancesResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/states/{state_id}/committees":{"get":{"tags":["Beacon"],"operationId":"getStateCommittees","summary":"Get committees at state","description":"Retrieves the committees for the given state.","parameters":[{"name":"state_id","required":true,"in":"path","schema":{"type":"string","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","example":"head"}},{"name":"epoch","in":"query","schema":{"type":"string","description":"`uint64` Epoch number to query.","example":"1","format":"uint64"}},{"name":"index","in":"query","schema":{"type":"string","description":"`uint64` Committee index to query.","example":"1","format":"uint64"}},{"name":"slot","in":"query","schema":{"type":"string","description":"`UInt64` Slot to query in the canonical chain.","example":"1","format":"uint64"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetEpochCommitteesResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/states/{state_id}/sync_committees":{"get":{"tags":["Beacon","Validator Required Api"],"operationId":"getStateSyncCommittees","summary":"Get sync committees","description":"Retrieves the sync committees for the given state.","parameters":[{"name":"state_id","required":true,"in":"path","schema":{"type":"string","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","example":"head"}},{"name":"epoch","in":"query","schema":{"type":"string","description":"`uint64` Epoch number to query.","example":"1","format":"uint64"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetEpochSyncCommitteesResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/states/{state_id}/randao":{"get":{"tags":["Beacon"],"operationId":"getStateRandao","summary":"Get state RANDAO","description":"Fetch the RANDAO mix for the requested epoch from the state identified by `state_id`.\n\nIf an epoch is not specified then the RANDAO mix for the state's current epoch will be returned.\n\nBy adjusting the `state_id` parameter you can query for any historic value of the RANDAO mix. Ordinarily states from the same epoch will mutate the RANDAO mix for that epoch as blocks are applied.","parameters":[{"name":"state_id","required":true,"in":"path","schema":{"type":"string","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","example":"head"}},{"name":"epoch","in":"query","schema":{"type":"string","description":"`uint64` Epoch number to query.","example":"1","format":"uint64"}}],"responses":{"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateRandaoResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/headers":{"get":{"tags":["Beacon"],"operationId":"getBlockHeaders","summary":"Get block headers","description":"Retrieves block headers matching given query. By default it will fetch current head slot blocks.","parameters":[{"name":"slot","in":"query","schema":{"type":"string","description":"`UInt64` Slot to query in the canonical chain.","example":"1","format":"uint64"}},{"name":"parent_root","in":"query","schema":{"type":"string","description":"Not currently supported.","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetBlockHeadersResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/headers/{block_id}":{"get":{"tags":["Beacon"],"operationId":"getBlockHeader","summary":"Get block header","description":"Retrieves block header for given block id.","parameters":[{"name":"block_id","required":true,"in":"path","schema":{"type":"string","description":"Block identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", &lt;slot&gt;, &lt;hex encoded blockRoot with 0x prefix&gt;.","example":"head"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetBlockHeaderResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/blocks":{"post":{"tags":["Beacon","Validator Required Api"],"operationId":"publishBlock","summary":"Publish a signed block","description":"Submit a signed beacon block to the beacon node to be broadcast and imported. After Deneb, this additionally instructs the beacon node to broadcast and import all given signed blobs. The beacon node performs the required validation.","requestBody":{"content":{"application/octet-stream":{"schema":{"type":"string","format":"binary"}},"application/json":{"schema":{"title":"SignedBlock","type":"object","oneOf":[{"$ref":"#/components/schemas/SignedBeaconBlockPhase0"},{"$ref":"#/components/schemas/SignedBeaconBlockAltair"},{"$ref":"#/components/schemas/SignedBeaconBlockBellatrix"},{"$ref":"#/components/schemas/SignedBeaconBlockCapella"}]}}}},"responses":{"415":{"description":"Unsupported media-type supplied","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"200":{"description":"Block has been successfully broadcast, validated and imported.","content":{}},"202":{"description":"Block has been successfully broadcast, but failed validation and has not been imported.","content":{}},"400":{"description":"Unable to parse request body.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"503":{"description":"Beacon node is currently syncing.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/blinded_blocks":{"post":{"tags":["Validator","Validator Required Api"],"operationId":"publishBlindedBlock","summary":"Publish a signed blinded block","description":"Submit a signed blinded beacon block to the beacon node to be broadcast and imported. After Deneb, this additionally instructs the beacon node to broadcast and import all given signed blinded blobs. The beacon node performs the required validation.","requestBody":{"content":{"application/octet-stream":{"schema":{"type":"string","format":"binary"}},"application/json":{"schema":{"title":"SignedBlindedBlock","type":"object","oneOf":[{"$ref":"#/components/schemas/SignedBeaconBlockPhase0"},{"$ref":"#/components/schemas/SignedBeaconBlockAltair"},{"$ref":"#/components/schemas/SignedBlindedBlockBellatrix"},{"$ref":"#/components/schemas/SignedBlindedBlockCapella"}]}}}},"responses":{"415":{"description":"Unsupported media-type supplied","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"200":{"description":"Block has been successfully broadcast, validated and imported.","content":{}},"202":{"description":"Block has been successfully broadcast, but failed validation and has not been imported.","content":{}},"400":{"description":"Unable to parse request body.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"503":{"description":"Beacon node is currently syncing.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v2/beacon/blocks/{block_id}":{"get":{"tags":["Beacon"],"operationId":"getBlockV2","summary":"Get block","description":"Retrieves block details for given block id.","parameters":[{"name":"block_id","required":true,"in":"path","schema":{"type":"string","description":"Block identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", &lt;slot&gt;, &lt;hex encoded blockRoot with 0x prefix&gt;.","example":"head"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetBlockV2Response"}},"application/octet-stream":{"schema":{"type":"string","format":"binary"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/blinded_blocks/{block_id}":{"get":{"tags":["Beacon"],"operationId":"getBlindedBlockV1","summary":"Get blinded block","description":"Retrieves blinded block details for given block id. Depending on `Accept` header it can be returned either as JSON or as bytes serialized by SSZ","parameters":[{"name":"block_id","required":true,"in":"path","schema":{"type":"string","description":"Block identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", &lt;slot&gt;, &lt;hex encoded blockRoot with 0x prefix&gt;.","example":"head"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetBlindedBlockResponse"}},"application/octet-stream":{"schema":{"type":"string","format":"binary"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/checkpoint/finalized_state":{"get":{"tags":["Experimental"],"operationId":"getFinalizedCheckpointState","summary":"Get full BeaconState object for finalized checkpoint state","description":"Returns full BeaconState object for a finalized checkpoint state from the Weak Subjectivity period.","responses":{"200":{"description":"Request successful","content":{"application/octet-stream":{"schema":{"type":"string","format":"binary"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/blocks/{block_id}/root":{"get":{"tags":["Beacon"],"operationId":"getBlockRoot","summary":"Get block root","description":"Retrieves hashTreeRoot of BeaconBlock/BeaconBlockHeader","parameters":[{"name":"block_id","required":true,"in":"path","schema":{"type":"string","description":"Block identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", &lt;slot&gt;, &lt;hex encoded blockRoot with 0x prefix&gt;.","example":"head"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetBlockRootResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/checkpoint/finalized_blocks/{slot}/root":{"get":{"tags":["Experimental"],"operationId":"getFinalizedBlockRoot","summary":"Get finalized block root","description":"Retrieves hashTreeRoot of finalized Beacon Block.\n\nResponds with 404 if block at a slot is either unavailable or not yet finalized.","parameters":[{"name":"slot","required":true,"in":"path","schema":{"type":"string","description":"`uint64` value representing slot","example":"1","format":"uint64"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetHashTreeRootResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/blocks/{block_id}/attestations":{"get":{"tags":["Beacon"],"operationId":"getBlockAttestations","summary":"Get block attestations","description":"Retrieves attestations included in requested block.","parameters":[{"name":"block_id","required":true,"in":"path","schema":{"type":"string","description":"Block identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", &lt;slot&gt;, &lt;hex encoded blockRoot with 0x prefix&gt;.","example":"head"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetBlockAttestationsResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/pool/attestations":{"get":{"tags":["Beacon"],"operationId":"getAttestations","summary":"Get attestations","description":"Retrieves attestations known by the node but not necessarily incorporated into any block.","parameters":[{"name":"slot","in":"query","schema":{"type":"string","description":"`UInt64` Slot to query in the canonical chain.","example":"1","format":"uint64"}},{"name":"committee_index","in":"query","schema":{"type":"string","description":"`uint64` Committee index to query.","example":"1","format":"uint64"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetPoolAttestationsResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}},"post":{"tags":["Beacon","Validator Required Api"],"operationId":"postAttestation","summary":"Submit signed attestations","description":"Submit signed attestations to the beacon node to be validated and submitted if valid.\n\nThis endpoint does not protected against slashing.","requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Attestation"}}}}},"responses":{"200":{"description":"Attestations are stored in pool and broadcast on appropriate subnet","content":{}},"400":{"description":"Errors with one or more attestations","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorListBadRequest"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/pool/attester_slashings":{"get":{"tags":["Beacon"],"operationId":"getAttesterSlashings","summary":"Get Attester Slashings","description":"Retrieves attester slashings known by the node but not necessarily incorporated into any block.","responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetPoolAttesterSlashingsResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}},"post":{"tags":["Beacon"],"operationId":"postAttesterSlashing","summary":"Submit attester slashing object","description":"Submits attester slashing object to node's pool and if passes validation node MUST broadcast it to network.","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AttesterSlashing"}}}},"responses":{"200":{"description":"Success","content":{}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/pool/proposer_slashings":{"get":{"tags":["Beacon"],"operationId":"getProposerSlashings","summary":"Get proposer slashings","description":"Retrieves proposer slashings known by the node but not necessarily incorporated into any block.","responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetPoolProposerSlashingsResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}},"post":{"tags":["Beacon"],"operationId":"postProposerSlashing","summary":"Submit proposer slashing object","description":"Submits proposer slashing object to node's pool and, if it passes validation, the node MUST broadcast it to network.","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProposerSlashing"}}}},"responses":{"200":{"description":"Proposer Slashing has been successfully validated, added to the pool, and broadcast.","content":{}},"400":{"description":"Invalid proposer slashing, it will never pass validation so it's rejected","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/pool/voluntary_exits":{"get":{"tags":["Beacon"],"operationId":"getVoluntaryExits","summary":"Get signed voluntary exits","description":"Retrieves voluntary exits known by the node but not necessarily incorporated into any block.","responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetPoolVoluntaryExitsResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}},"post":{"tags":["Beacon"],"operationId":"postVoluntaryExit","summary":"Submit signed voluntary exit","description":"Submits signed voluntary exit object to node's pool and if it passes validation node MUST broadcast it to network.","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SignedVoluntaryExit"}}}},"responses":{"200":{"description":"Signed voluntary exit has been successfully validated, added to the pool, and broadcast.","content":{}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/pool/sync_committees":{"post":{"tags":["Beacon","Validator Required Api"],"operationId":"postSyncCommittees","summary":"Submit sync committee messages to node","description":"Submits sync committee message objects to the node.\n\nSync committee messages are not present in phase0, but are required for Altair networks.\n\nIf a sync committee message is validated successfully the node MUST publish that sync committee message on all applicable subnets.\n\nIf one or more sync committee messages fail validation the node MUST return a 400 error with details of which sync committee messages have failed, and why.","requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/SyncCommitteeMessage"}}}}},"responses":{"200":{"description":"Sync committee signatures are stored in pool and broadcast on appropriate subnet","content":{}},"400":{"description":"Errors with one or more sync committee signatures","content":{"application/json":{"schema":{"title":"BadRequestResponses","type":"object","oneOf":[{"$ref":"#/components/schemas/ErrorListBadRequest"},{"$ref":"#/components/schemas/HttpErrorResponse"}]}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/validator/liveness/{epoch}":{"post":{"tags":["Validator"],"operationId":"postValidatorLiveness","summary":"Get Validator Liveness","description":"Requests the beacon node to indicate if a validator has been observed to be live in a given epoch. The beacon node might detect liveness by observing messages from the validator on the network, in the beacon chain, from its API or from any other source. It is important to note that the values returned by the beacon node are not canonical; they are best-effort and based upon a subjective view of the network.","parameters":[{"name":"epoch","required":true,"in":"path","schema":{"type":"string","description":"`uint64` Epoch number to query.","example":"1","format":"uint64"}}],"requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PostValidatorLivenessResponse"}}}},"503":{"description":"Beacon node is currently syncing and not serving requests.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/events":{"get":{"tags":["Events","Validator Required Api"],"operationId":"getEvents","summary":"Subscribe to node events","description":"Provides endpoint to subscribe to beacon node Server-Sent-Events stream. Consumers should use [eventsource](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface) implementation to listen on those events.\n\nServers _may_ send SSE comments beginning with `:` for any purpose, including to keep the event stream connection alive in the presence of proxy servers.","parameters":[{"name":"topics","in":"query","schema":{"type":"string","description":"Event types to subscribe to. Available values include: [`head`, `finalized_checkpoint`, `chain_reorg`, `block`, `attestation`, `voluntary_exit`, `contribution_and_proof`]\n\n","example":"head"}}],"responses":{"200":{"description":"Request successful","content":{"text/event-stream":{"schema":{"type":"string"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/node/health":{"get":{"tags":["Node"],"operationId":"GetNodeHealth","summary":"Get node health","description":"Returns node health status in http status codes. Useful for load balancers.","parameters":[{"name":"syncing_status","in":"query","schema":{"type":"number","description":"Customize syncing status instead of default status code (206)"}}],"responses":{"200":{"description":"Node is ready","content":{}},"206":{"description":"Node is syncing but can serve incomplete data","content":{}},"503":{"description":"Node not initialized or having issues","content":{}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/node/identity":{"get":{"tags":["Node"],"operationId":"getNetworkIdentity","summary":"Get node network identity","description":"Retrieves data about the node's network presence","responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetNetworkIdentityResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/node/peers":{"get":{"tags":["Node"],"operationId":"getNodePeers","summary":"Get node peers","description":"Retrieves data about the node's network peers.","responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetPeersResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/node/peer_count":{"get":{"tags":["Node"],"operationId":"getPeerCount","summary":"Get peer count","description":"Retrieves number of known peers.","responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetPeerCountResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/node/peers/{peer_id}":{"get":{"tags":["Node"],"operationId":"getNodePeer","summary":"Get node peer","description":"Retrieves data about the given peer.","parameters":[{"name":"peer_id","required":true,"in":"path","schema":{"type":"string","description":"Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)","example":"QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetPeerResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/node/syncing":{"get":{"tags":["Node","Validator Required Api"],"operationId":"getNodeSyncingStatus","summary":"Get node syncing status","description":"Requests the beacon node to describe if it's currently syncing or not, and if it is, what block it is up to.","responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetSyncingStatusResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/node/version":{"get":{"tags":["Node"],"operationId":"getNodeVersion","summary":"Get node version","description":"similar to [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).","responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetVersionResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/rewards/sync_committee/{block_id}":{"post":{"tags":["Beacon","Rewards"],"operationId":"getSyncCommitteeRewards","summary":"Get Sync Committee Rewards","description":"Retrieves rewards info for sync committee members specified by array of public keys or validator index. If no array is provided, return reward info for every committee member.","parameters":[{"name":"block_id","required":true,"in":"path","schema":{"type":"string","description":"Block identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", &lt;slot&gt;, &lt;hex encoded blockRoot with 0x prefix&gt;.","example":"head"}}],"requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"type":"string"}}}}},"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetSyncCommitteeRewards"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/rewards/blocks/{block_id}":{"get":{"tags":["Beacon","Rewards"],"operationId":"getBlockRewards","summary":"Get Block Rewards","description":"Retrieve block reward info for a single block.","parameters":[{"name":"block_id","required":true,"in":"path","schema":{"type":"string","description":"Block identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", &lt;slot&gt;, &lt;hex encoded blockRoot with 0x prefix&gt;.","example":"head"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetBlockRewards"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/rewards/attestations/{epoch}":{"post":{"tags":["Beacon","Rewards"],"operationId":"getAttestationsRewards","summary":"Get Attestations Rewards","description":"Retrieve attestation reward info for validators specified by array of public keys or validator index. If no array is provided, return reward info for every validator.","parameters":[{"name":"epoch","required":true,"in":"path","schema":{"type":"string","description":"`uint64` Epoch number to query.","example":"1","format":"uint64"}}],"requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"type":"string"}}}}},"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetAttestationRewards"}}}},"501":{"description":"Not implemented","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/validator/duties/attester/{epoch}":{"post":{"tags":["Validator","Validator Required Api"],"operationId":"postAttesterDuties","summary":"Get attester duties","description":"Requests the beacon node to provide a set of attestation duties, which should be performed by validators, for a particular epoch. Duties should only need to be checked once per epoch, however a chain reorganization (of > MIN_SEED_LOOKAHEAD epochs) could occur, resulting in a change of duties. For full safety, you should monitor head events and confirm the dependent root in this response matches:\n- event.previous_duty_dependent_root when `compute_epoch_at_slot(event.slot) == epoch`\n- event.current_duty_dependent_root when `compute_epoch_at_slot(event.slot) + 1 == epoch`\n- event.block otherwise\n\nThe dependent_root value is `get_block_root_at_slot(state, compute_start_slot_at_epoch(epoch - 1) - 1)` or the genesis block root in the case of underflow.","parameters":[{"name":"epoch","required":true,"in":"path","schema":{"type":"string","description":"`uint64` Epoch number to query.","example":"1","format":"uint64"}}],"requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"type":"string","description":"integer string","example":"1","format":"integer"}}}}},"responses":{"200":{"description":"Success response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetAttesterDutiesResponse"}}}},"503":{"description":"Beacon node is currently syncing and not serving requests.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/validator/duties/proposer/{epoch}":{"get":{"tags":["Validator","Validator Required Api"],"operationId":"getProposerDuties","summary":"Get proposer duties","description":"Request beacon node to provide all validators that are scheduled to propose a block in the given epoch.\n\nDuties should only need to be checked once per epoch, however a chain reorganization could occur that results in a change of duties. For full safety, you should monitor head events and confirm the dependent root in this response matches:\n- event.current_duty_dependent_root when `compute_epoch_at_slot(event.slot) == epoch`\n- event.block otherwise\n\nThe dependent_root value is `get_block_root_at_slot(state, compute_start_slot_at_epoch(epoch) - 1)` or the genesis block root in the case of underflow.","parameters":[{"name":"epoch","required":true,"in":"path","schema":{"type":"string","description":"`uint64` Epoch number to query.","example":"1","format":"uint64"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetProposerDutiesResponse"}}}},"503":{"description":"Service unavailable","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v2/validator/blocks/{slot}":{"get":{"tags":["Validator","Validator Required Api"],"operationId":"getNewBlock","summary":"Produce unsigned block","description":"Requests a beacon node to produce a valid block, which can then be signed by a validator.\nMetadata in the response indicates the type of block produced, and the supported types of block will be added to as forks progress.","parameters":[{"name":"slot","required":true,"in":"path","schema":{"type":"string","description":"The slot for which the block should be proposed.","example":"1","format":"uint64"}},{"name":"randao_reveal","required":true,"in":"query","schema":{"type":"string","description":"`BLSSignature Hex` BLS12-381 signature for the current epoch.","example":"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505","format":"byte"}},{"name":"graffiti","in":"query","schema":{"type":"string","description":"`Bytes32 Hex` Graffiti.","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProduceBlockV2Response"}},"application/octet-stream":{"schema":{"type":"string","format":"binary"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/validator/blinded_blocks/{slot}":{"get":{"tags":["Validator","Validator Required Api"],"operationId":"getNewBlindedBlock","summary":"Produce unsigned blinded block","description":"Requests a beacon node to produce a valid blinded block, which can then be signed by a validator. A blinded block is a block with only a transactions root, rather than a full transactions list.\n\nMetadata in the response indicates the type of block produced, and the supported types of block will be added to as forks progress.\n\nPre-Bellatrix, this endpoint will return a `BeaconBlock`.","parameters":[{"name":"slot","required":true,"in":"path","schema":{"type":"string","description":"The slot for which the block should be proposed.","example":"1","format":"uint64"}},{"name":"randao_reveal","required":true,"in":"query","schema":{"type":"string","description":"`BLSSignature Hex` BLS12-381 signature for the current epoch.","example":"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505","format":"byte"}},{"name":"graffiti","in":"query","schema":{"type":"string","description":"`Bytes32 Hex` Graffiti.","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetNewBlindedBlockResponse"}},"application/octet-stream":{"schema":{"type":"string","format":"binary"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/validator/attestation_data":{"get":{"tags":["Validator","Validator Required Api"],"operationId":"getAttestationData","summary":"Produce an AttestationData","description":"Requests that the beacon node produce an AttestationData.","parameters":[{"name":"slot","in":"query","schema":{"type":"string","description":"`uint64` The slot for which an attestation data should be created.","example":"1","format":"uint64"}},{"name":"committee_index","in":"query","schema":{"type":"string","description":"`UInt64` The committee index for which an attestation data should be created.","example":"1","format":"uint64"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProduceAttestationDataResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"503":{"description":"Service unavailable","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"204":{"description":"Data is unavailable because the chain has not yet reached genesis","content":{}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/validator/aggregate_attestation":{"get":{"tags":["Validator","Validator Required Api"],"operationId":"getAggregateAttestation","summary":"Get aggregated attestations","description":"Aggregates all attestations matching given attestation data root and slot.","parameters":[{"name":"attestation_data_root","required":true,"in":"query","schema":{"type":"string","description":"`String` HashTreeRoot of AttestationData that validator wants aggregated.","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}},{"name":"slot","required":true,"in":"query","schema":{"type":"string","description":"`uint64` Non-finalized slot for which to create the aggregation.","example":"1","format":"uint64"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetAggregatedAttestationResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/validator/aggregate_and_proofs":{"post":{"tags":["Validator","Validator Required Api"],"operationId":"postAggregateAndProofs","summary":"Publish aggregate and proofs","description":"Verifies given aggregate and proofs and publishes it on appropriate gossipsub topic.","requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/SignedAggregateAndProof"}}}}},"responses":{"200":{"description":"Successfully published aggregate.","content":{}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/validator/beacon_committee_subscriptions":{"post":{"tags":["Validator","Validator Required Api"],"operationId":"postSubscribeToBeaconCommitteeSubnet","summary":"Subscribe to a committee subnet","description":"After Beacon node receives this request, search using discv5 for peers related to this subnet and replace current peers with those ones if necessary If validator is_aggregator, beacon node must:\n- announce subnet topic subscription on gossipsub\n- aggregate attestations received on that subnet\n","requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/CommitteeSubscriptionData"}}}}},"responses":{"200":{"description":"Slot signature is valid and beacon node has prepared the attestation subnet. Note that, there is no guarantee the node will find peers for the subnet","content":{}},"503":{"description":"Beacon node is currently syncing and not serving requests.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/validator/duties/sync/{epoch}":{"post":{"tags":["Validator","Validator Required Api"],"operationId":"postSyncDuties","summary":"Get sync committee duties","description":"Requests the beacon node to provide a set of sync committee duties","parameters":[{"name":"epoch","required":true,"in":"path","schema":{"type":"string","description":"`uint64` Epoch number to query.","example":"1","format":"uint64"}}],"requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"type":"string","description":"integer string","example":"1","format":"integer"}}}}},"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetSyncCommitteeDutiesResponse"}}}},"503":{"description":"Beacon node is currently syncing and not serving requests.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/validator/sync_committee_contribution":{"get":{"tags":["Validator","Validator Required Api"],"operationId":"getSyncCommitteeContribution","summary":"Produce a sync committee contribution","description":"Returns a `SyncCommitteeContribution` that is the aggregate of `SyncCommitteeMessage` values known to this node matching the specified slot, subcommittee index and beacon block root.","parameters":[{"name":"slot","required":true,"in":"query","schema":{"type":"string","description":"`UInt64` Slot to query in the canonical chain.","example":"1","format":"uint64"}},{"name":"subcommittee_index","required":true,"in":"query","schema":{"type":"number","description":"`Integer` The subcommittee index for which to produce the contribution."}},{"name":"beacon_block_root","required":true,"in":"query","schema":{"type":"string","description":"`bytes32` The block root for which to produce the contribution.","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetSyncCommitteeContributionResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"503":{"description":"Service unavailable","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"204":{"description":"Data is unavailable because the chain has not yet reached genesis","content":{}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/validator/sync_committee_subscriptions":{"post":{"tags":["Validator","Validator Required Api"],"operationId":"postSyncCommitteeSubscriptions","summary":"Subscribe to a Sync committee subnet","description":"Subscribe to a number of sync committee subnets\n\nSync committees are not present in phase0, but are required for Altair networks.\n\nSubscribing to sync committee subnets is an action performed by VC to enable network participation in Altair networks, and only required if the VC has an active validator in an active sync committee.","requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/PostSyncCommitteeData"}}}}},"responses":{"200":{"description":"Successful response","content":{}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/validator/contribution_and_proofs":{"post":{"tags":["Validator","Validator Required Api"],"operationId":"postContributionAndProofs","summary":"Publish contribution and proofs","description":"Verifies given sync committee contribution and proofs and publishes on appropriate gossipsub topics.","requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/SignedContributionAndProof"}}}}},"responses":{"200":{"description":"Successful response","content":{}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/validator/prepare_beacon_proposer":{"post":{"tags":["Validator","Validator Required Api"],"operationId":"prepareBeaconProposer","summary":"Prepare Beacon Proposers","description":"Prepares the beacon node for potential proposers by supplying information required when proposing blocks for the given validators. The information supplied for each validator index is considered persistent until overwritten by new information for the given validator index, or until the beacon node restarts.\n\nNote that because the information is not persistent across beacon node restarts it is recommended that either the beacon node is monitored for restarts or this information is refreshed by resending this request periodically (for example, each epoch).\n\nAlso note that requests containing currently inactive or unknown validator indices will be accepted, as they may become active at a later epoch.","requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/BeaconPreparableProposer"}}}}},"responses":{"200":{"description":"Preparation information has been received.","content":{}},"202":{"description":"Block has been successfully broadcast, but failed validation and has not been imported.","content":{}},"400":{"description":"Invalid parameter supplied.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/validator/register_validator":{"post":{"tags":["Validator","Validator Required Api"],"operationId":"registerValidator","summary":"Register validators with builder","description":"Prepares the beacon node for engaging with external builders. The information must be sent by the beacon node to the builder network. It is expected that the validator client will send this information periodically to ensure the beacon node has correct and timely registration information to provide to builders. The validator client should not sign blinded beacon blocks that do not adhere to their latest fee recipient and gas limit preferences.","requestBody":{"content":{"application/octet-stream":{"schema":{"type":"string","format":"binary"}},"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/SignedValidatorRegistration"}}}}},"responses":{"200":{"description":"Registration information has been received.","content":{}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/config/deposit_contract":{"get":{"tags":["Config"],"operationId":"getDepositContractAddress","summary":"Get deposit contract address","description":"Retrieve deposit contract address and genesis fork version.","responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetDepositContractResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/config/fork_schedule":{"get":{"tags":["Config"],"operationId":"getScheduledForks","summary":"Get scheduled forks","description":"Retrieve all scheduled upcoming forks this node is aware of.","responses":{"200":{"description":"Success","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetForkScheduleResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/config/spec":{"get":{"tags":["Config","Validator Required Api"],"operationId":"getSpec","summary":"Get spec params","description":"Retrieve specification configuration used on this node.","responses":{"200":{"description":"Success","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetSpecResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v2/debug/beacon/heads":{"get":{"tags":["Debug"],"operationId":"getDebugChainHeadsV2","summary":"Get fork choice leaves","description":"Retrieves all possible chain heads (leaves of fork choice tree).","responses":{"200":{"description":"Success","content":{"application/json":{"schema":{"type":"object","required":["data"],"properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/ChainHeadV2"}}}}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v2/debug/beacon/states/{state_id}":{"get":{"tags":["Debug"],"operationId":"getStateV2","summary":"Get full BeaconState object","description":"Returns full BeaconState object for given state_id.\n\nUse Accept header to select `application/octet-stream` if SSZ response type is required.","parameters":[{"name":"state_id","required":true,"in":"path","schema":{"type":"string","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","example":"head"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetStateV2Response"}},"application/octet-stream":{"schema":{"type":"string","format":"binary"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/debug/fork_choice":{"get":{"tags":["Debug"],"operationId":"getDebugForkChoice","summary":"Get fork choice array","description":"Retrieves all current fork choice context.","responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"type":"object","required":["justified_checkpoint","finalized_checkpoint","fork_choice_nodes","extra_data"],"properties":{"justified_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"finalized_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"fork_choice_nodes":{"type":"array","items":{"type":"object","required":["slot","block_root","parent_root","justified_epoch","finalized_epoch","weight","validity","execution_block_hash","extra_data"],"properties":{"slot":{"type":"string","description":"The slot to which this block corresponds.","example":"1","format":"uint64"},"block_root":{"type":"string","description":"The signing merkle root of the `BeaconBlock`.","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"parent_root":{"type":"string","description":"The signing merkle root of the parent `BeaconBlock`.","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"justified_epoch":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"finalized_epoch":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"weight":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"validity":{"type":"string","enum":["VALID","INVALID","OPTIMISTIC"]},"execution_block_hash":{"type":"string","description":"The `block_hash` from the `execution_payload` of the `BeaconBlock`","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"extra_data":{"type":"object","additionalProperties":{"type":"string"}}}}},"extra_data":{"type":"object","additionalProperties":{"type":"string"}}}}}}},"503":{"description":"Beacon node is currently syncing and not serving requests.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/teku/v1/admin/log_level":{"put":{"tags":["Teku"],"operationId":"putLogLevel","summary":"Changes the log level without restarting.","description":"Changes the log level without restarting. You can change the log level for all logs, or the log level for specific packages or classes.","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PutLogLevelRequest"}}}},"responses":{"204":{"description":"The LogLevel was accepted and applied","content":{}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/teku/v1/beacon/blocks/{block_id}/state":{"get":{"tags":["Teku"],"operationId":"getStateByBlockRoot","summary":"Get SSZ State By Block id","description":"Download the state SSZ object for given identifier - by block root, keyword, or slot.","parameters":[{"name":"block_id","required":true,"in":"path","schema":{"type":"string","description":"Block identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", &lt;slot&gt;, &lt;hex encoded blockRoot with 0x prefix&gt;.","example":"head"}}],"responses":{"200":{"description":"Request successful","content":{"application/octet-stream":{"schema":{"type":"string","format":"binary"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/teku/v1/admin/liveness":{"get":{"tags":["Teku"],"operationId":"GetLiveness","summary":"Get node liveness","description":"Returns 200 if the node is up even if it is syncing.","parameters":[{"name":"failOnRejectedCount","in":"query","schema":{"type":"boolean"}}],"responses":{"200":{"description":"Node is ready","content":{}},"503":{"description":"Node is having issues that it may not recover from. Only occurs if failOnRejectedCount is set","content":{}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/teku/v1/admin/readiness":{"get":{"tags":["Teku"],"operationId":"readiness","summary":"Get node readiness","description":"Returns 200 if the node is ready to accept traffic","parameters":[{"name":"target_peer_count","in":"query","schema":{"type":"string","description":"Returns 503 status code when current peer count is below than target","example":"1","format":"integer"}},{"name":"require_prepared_proposers","in":"query","schema":{"type":"boolean","description":"Returns 503 status code if set to true and no proposers have been prepared"}},{"name":"require_validator_registrations","in":"query","schema":{"type":"boolean","description":"Returns 503 status code if set to true and no validators have been registered with the builder"}}],"responses":{"200":{"description":"Node is ready","content":{}},"503":{"description":"Node not initialized or having issues","content":{}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/teku/v1/beacon/blocks/{slot}":{"get":{"tags":["Teku"],"operationId":"getAllBlocksAtSlot","summary":"Get blocks at slot","description":"Get all blocks (canonical and non-canonical) by slot.","parameters":[{"name":"slot","required":true,"in":"path","schema":{"type":"string","description":"slot of the blocks to retrieve.","example":"1","format":"uint64"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetAllBlocksAtSlotResponse"}}}},"503":{"description":"Beacon node is currently syncing and not serving requests.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/teku/v1/nodes/peer_scores":{"get":{"tags":["Teku"],"operationId":"getPeersScore","summary":"Get peer scores","description":"Retrieves data about the node's network peers.","responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetPeerScoresResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/teku/v1/beacon/proposers_data":{"get":{"tags":["Experimental"],"operationId":"getProposersData","summary":"Get current prepared beacon proposers and registered validators","description":"Get the current proposers information held by beacon node as result of prepare_beacon_proposer and register_validator validator API calls. This API is considered unstable and the returned data format may change in the future.","responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProposersData"}}}},"503":{"description":"Beacon node is currently syncing and not serving requests.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/teku/v1/beacon/pool/deposits":{"get":{"tags":["Teku"],"operationId":"getDeposits","summary":"Get deposits","description":"Get all deposits currently held for inclusion in future blocks.","responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetDepositsResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/teku/v1/beacon/pool/eth1data":{"get":{"tags":["Teku"],"operationId":"getEth1Data","summary":"Get new Eth1Data","description":"Eth1Data that would be used in a new block created based on the current head.","responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetEth1DataResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/teku/v1/beacon/pool/eth1cache":{"get":{"tags":["Teku"],"operationId":"getTekuV1BeaconPoolEth1cache","summary":"Get cached eth1 blocks","description":"Get all of the eth1 blocks currently cached by the beacon node, that could be considered for inclusion during block production.","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetEth1DataCacheResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/teku/v1/beacon/state/{state_id}/eth1voting":{"get":{"tags":["Teku"],"operationId":"getEth1VotingSummary","summary":"Get Eth1 voting summary","description":"Returns information about the current state of voting for Eth1Data from the specified state.","parameters":[{"name":"state_id","required":true,"in":"path","schema":{"type":"string","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","example":"head"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetEth1VotingSummaryResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/deposit_snapshot":{"get":{"tags":["Teku"],"operationId":"getDepositSnapshot","summary":"Get finalized DepositTreeSnapshot","description":"Latest finalized DepositTreeSnapshot that could be used to reconstruct Deposit merkle tree. See EIP-4881 for details.","responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetDepositSnapshotResponse"}},"application/octet-stream":{"schema":{"type":"string","format":"binary"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/teku/v1/validator_inclusion/{epoch}/global":{"get":{"tags":["Teku","Experimental"],"operationId":"getGlobalValidatorInclusion","summary":"Get Global Validator Inclusion","description":"Returns a global count of votes for a given epoch.","parameters":[{"name":"epoch","required":true,"in":"path","schema":{"type":"string","description":"`uint64` Epoch number to query.","example":"1","format":"uint64"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetGlobalValidatorInclusionResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"503":{"description":"Beacon node is currently syncing and not serving requests.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/teku/v1/validator_inclusion/{epoch}/{validator_id}":{"get":{"tags":["Teku","Experimental"],"operationId":"getValidatorInclusion","summary":"Get Validator Inclusion","description":"Returns a per-validator summary of how that validator performed during the current epoch.","parameters":[{"name":"epoch","required":true,"in":"path","schema":{"type":"string","description":"`uint64` Epoch number to query.","example":"1","format":"uint64"}},{"name":"validator_id","required":true,"in":"path","schema":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetValidatorInclusionResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"503":{"description":"Beacon node is currently syncing and not serving requests.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/beacon/pool/bls_to_execution_changes":{"post":{"tags":["Beacon"],"operationId":"postBlsToExecutionChange","summary":"Submit SignedBLSToExecutionChange object to node's pool","description":"Submits SignedBLSToExecutionChange object to node's pool and if passes validation node MUST broadcast it to network.","requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/SignedBLSToExecutionChange"}}}}},"responses":{"200":{"description":"BLS to execution change is stored in node and broadcast to network","content":{}},"400":{"description":"Errors with one or more BLS to execution changes","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorListBadRequest"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}},"get":{"tags":["Beacon"],"operationId":"getBlsToExecutionChanges","summary":"Get SignedBLSToExecutionChange from operations pool","description":"Retrieves BLS to execution changes known by the node but not necessarily incorporated into any block","parameters":[{"name":"locally_submitted","in":"query","schema":{"type":"boolean","description":"Set to true if only locally submitted bls operations should be returned"}}],"responses":{"200":{"description":"Successful response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetBlsToExecutionChangeResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}},"/eth/v1/builder/states/{state_id}/expected_withdrawals":{"get":{"tags":["Builder"],"operationId":"GetExpectedWithdrawals","summary":"Get Expected Withdrawals","description":"Get the withdrawals computed from the specified state, that will be included in the block \n    that gets built on the specified state.","parameters":[{"name":"state_id","required":true,"in":"path","schema":{"type":"string","description":"State identifier. Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", &lt;slot&gt;, &lt;hex encoded stateRoot with 0x prefix&gt;.","example":"head"}},{"name":"proposal_slot","in":"query","schema":{"type":"string","description":"The slot of the block to be proposed. Defaults to the child slot of the state.","example":"1","format":"uint64"}}],"responses":{"200":{"description":"Request successful","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetExpectedWithdrawalsResponse"}}}},"404":{"description":"Not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"501":{"description":"Not implemented","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"400":{"description":"The request could not be processed, check the response for more information.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}},"500":{"description":"Internal server error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpErrorResponse"}}}}}}}},"components":{"schemas":{"GetGenesisResponse":{"title":"GetGenesisResponse","type":"object","required":["data"],"properties":{"data":{"type":"object","required":["genesis_time","genesis_validators_root","genesis_fork_version"],"properties":{"genesis_time":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"genesis_validators_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"genesis_fork_version":{"type":"string","description":"Bytes4 hexadecimal","example":"0xcf8e0d4e","format":"byte"}}}}},"MetaData":{"title":"MetaData","type":"object","required":["seq_number","attnets"],"properties":{"seq_number":{"type":"string","description":"Uint64 starting at 0 used to version the node's metadata. If any other field in the local MetaData changes, the node MUST increment seq_number by 1.","example":"1","format":"uint64"},"attnets":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"Bitvector representing the node's persistent attestation subnet subscriptions.","format":"bytes"},"syncnets":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"Bitvector representing the node's persistent sync committee subnet subscriptions.","format":"bytes"}}},"VoluntaryExit":{"title":"VoluntaryExit","type":"object","required":["epoch","validator_index"],"properties":{"epoch":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"validator_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}},"GetAggregatedAttestationResponse":{"title":"GetAggregatedAttestationResponse","type":"object","required":["data"],"properties":{"data":{"$ref":"#/components/schemas/Attestation"}}},"Peer":{"title":"Peer","type":"object","required":["peer_id","last_seen_p2p_address","state","direction"],"properties":{"peer_id":{"type":"string","description":"Cryptographic hash of a peer’s public key. '[Read more](https://docs.libp2p.io/concepts/peer-id/)","example":"QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N"},"enr":{"type":"string","description":"Ethereum node record. Not currently populated. [Read more](https://eips.ethereum.org/EIPS/eip-778)","example":"enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8"},"last_seen_p2p_address":{"type":"string","description":"Multiaddr used in last peer connection. [Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)","example":"/ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N"},"state":{"type":"string","enum":["disconnected","connecting","connected","disconnecting"]},"direction":{"type":"string","enum":["inbound","outbound"]}}},"HistoricalSummary":{"title":"HistoricalSummary","type":"object","required":["block_summary_root","state_summary_root"],"properties":{"block_summary_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"state_summary_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}}},"GetDepositSnapshotResponse":{"title":"GetDepositSnapshotResponse","type":"object","required":["data"],"properties":{"data":{"$ref":"#/components/schemas/DepositTreeSnapshot"}}},"HttpErrorResponse":{"title":"HttpErrorResponse","type":"object","required":["code","message"],"properties":{"code":{"type":"number"},"message":{"type":"string"}}},"BeaconBlockHeader":{"title":"BeaconBlockHeader","type":"object","required":["slot","proposer_index","parent_root","state_root","body_root"],"properties":{"slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"proposer_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"parent_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"state_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"body_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}}},"Withdrawal":{"title":"Withdrawal","type":"object","required":["index","validator_index","address","amount"],"properties":{"index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"validator_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"address":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"amount":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}},"DepositTreeSnapshot":{"title":"DepositTreeSnapshot","type":"object","required":["finalized","deposit_root","deposit_count","execution_block_hash","execution_block_height"],"properties":{"finalized":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}},"deposit_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"deposit_count":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"execution_block_hash":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"execution_block_height":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}},"Attestation":{"title":"Attestation","type":"object","required":["aggregation_bits","data","signature"],"properties":{"aggregation_bits":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"data":{"$ref":"#/components/schemas/AttestationData"},"signature":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"Checkpoint":{"title":"Checkpoint","type":"object","required":["epoch","root"],"properties":{"epoch":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}}},"IndexedAttestation":{"title":"IndexedAttestation","type":"object","required":["attesting_indices","data","signature"],"properties":{"attesting_indices":{"type":"array","items":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}},"data":{"$ref":"#/components/schemas/AttestationData"},"signature":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"AttesterDuty":{"title":"AttesterDuty","type":"object","required":["pubkey","validator_index","committee_index","committee_length","committees_at_slot","validator_committee_index","slot"],"properties":{"pubkey":{"type":"string","description":"`BLSPublicKey Hex` The validator's BLS public key, uniquely identifying them. 48-bytes, hex encoded with 0x prefix, case insensitive.","example":"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a","format":"string"},"validator_index":{"type":"string","description":"integer string","example":"1","format":"integer"},"committee_index":{"type":"string","description":"integer string","example":"1","format":"integer"},"committee_length":{"type":"string","description":"integer string","example":"1","format":"integer"},"committees_at_slot":{"type":"string","description":"integer string","example":"1","format":"integer"},"validator_committee_index":{"type":"string","description":"integer string","example":"1","format":"integer"},"slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}},"GetSyncCommitteeContributionResponse":{"title":"GetSyncCommitteeContributionResponse","type":"object","required":["data"],"properties":{"data":{"$ref":"#/components/schemas/SyncCommitteeContribution"}}},"BeaconBlockBodyCapella":{"title":"BeaconBlockBodyCapella","type":"object","required":["randao_reveal","eth1_data","graffiti","proposer_slashings","attester_slashings","attestations","deposits","voluntary_exits","sync_aggregate","execution_payload","bls_to_execution_changes"],"properties":{"randao_reveal":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"graffiti":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"proposer_slashings":{"type":"array","items":{"$ref":"#/components/schemas/ProposerSlashing"}},"attester_slashings":{"type":"array","items":{"$ref":"#/components/schemas/AttesterSlashing"}},"attestations":{"type":"array","items":{"$ref":"#/components/schemas/Attestation"}},"deposits":{"type":"array","items":{"$ref":"#/components/schemas/Deposit"}},"voluntary_exits":{"type":"array","items":{"$ref":"#/components/schemas/SignedVoluntaryExit"}},"sync_aggregate":{"$ref":"#/components/schemas/SyncAggregate"},"execution_payload":{"$ref":"#/components/schemas/ExecutionPayloadCapella"},"bls_to_execution_changes":{"type":"array","items":{"$ref":"#/components/schemas/SignedBLSToExecutionChange"}}}},"AttesterSlashing":{"title":"AttesterSlashing","type":"object","required":["attestation_1","attestation_2"],"properties":{"attestation_1":{"$ref":"#/components/schemas/IndexedAttestation"},"attestation_2":{"$ref":"#/components/schemas/IndexedAttestation"}}},"BeaconBlockAltair":{"title":"BeaconBlockAltair","type":"object","required":["slot","proposer_index","parent_root","state_root","body"],"properties":{"slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"proposer_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"parent_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"state_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"body":{"$ref":"#/components/schemas/BeaconBlockBodyAltair"}}},"PendingAttestation":{"title":"PendingAttestation","type":"object","required":["aggregation_bits","data","inclusion_delay","proposer_index"],"properties":{"aggregation_bits":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"data":{"$ref":"#/components/schemas/AttestationData"},"inclusion_delay":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"proposer_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}},"ProduceBlockV2Response":{"title":"ProduceBlockV2Response","type":"object","required":["data","version"],"properties":{"data":{"title":"Block","type":"object","oneOf":[{"$ref":"#/components/schemas/BeaconBlockPhase0"},{"$ref":"#/components/schemas/BeaconBlockAltair"},{"$ref":"#/components/schemas/BeaconBlockBellatrix"},{"$ref":"#/components/schemas/BeaconBlockCapella"}]},"version":{"type":"string","enum":["phase0","altair","bellatrix","capella","deneb"]}}},"PutLogLevelRequest":{"title":"PutLogLevelRequest","type":"object","required":["level"],"properties":{"level":{"$ref":"#/components/schemas/Level"},"log_filter":{"type":"array","items":{"type":"string"}}}},"GetProposerDutiesResponse":{"title":"GetProposerDutiesResponse","type":"object","required":["dependent_root","execution_optimistic","data"],"properties":{"dependent_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"execution_optimistic":{"type":"boolean"},"data":{"type":"array","items":{"type":"object","required":["pubkey","validator_index","slot"],"properties":{"pubkey":{"type":"string","description":"`BLSPublicKey Hex` The validator's BLS public key, uniquely identifying them. 48-bytes, hex encoded with 0x prefix, case insensitive.","example":"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a","format":"string"},"validator_index":{"type":"string","description":"integer string","example":"1","format":"integer"},"slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}}}}},"CommitteeSubscriptionData":{"title":"CommitteeSubscriptionData","type":"object","required":["validator_index","committee_index","committees_at_slot","slot","is_aggregator"],"properties":{"validator_index":{"type":"string","description":"integer string","example":"1","format":"integer"},"committee_index":{"type":"string","description":"integer string","example":"1","format":"integer"},"committees_at_slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"is_aggregator":{"type":"boolean"}}},"GetBlockRewards":{"title":"GetBlockRewards","type":"object","required":["execution_optimistic","finalized","data"],"properties":{"execution_optimistic":{"type":"boolean"},"finalized":{"type":"boolean"},"data":{"type":"object","required":["proposer_index","total","attestations","sync_aggregate","proposer_slashings","attester_slashings"],"properties":{"proposer_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"total":{"type":"string","description":"long string","example":"1","format":"long"},"attestations":{"type":"string","description":"long string","example":"1","format":"long"},"sync_aggregate":{"type":"string","description":"long string","example":"1","format":"long"},"proposer_slashings":{"type":"string","description":"long string","example":"1","format":"long"},"attester_slashings":{"type":"string","description":"long string","example":"1","format":"long"}}}}},"Validator":{"title":"Validator","type":"object","required":["pubkey","withdrawal_credentials","effective_balance","slashed","activation_eligibility_epoch","activation_epoch","exit_epoch","withdrawable_epoch"],"properties":{"pubkey":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"Bytes48 hexadecimal","format":"bytes"},"withdrawal_credentials":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"effective_balance":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"slashed":{"type":"boolean"},"activation_eligibility_epoch":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"activation_epoch":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"exit_epoch":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"withdrawable_epoch":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}},"Eth1Data":{"title":"Eth1Data","type":"object","required":["deposit_root","deposit_count","block_hash"],"properties":{"deposit_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"deposit_count":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"block_hash":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}}},"GetStateRandaoResponse":{"title":"GetStateRandaoResponse","description":"RANDAO mix for state with given 'stateId'.","type":"object","required":["execution_optimistic","finalized","data"],"properties":{"execution_optimistic":{"type":"boolean"},"finalized":{"type":"boolean"},"data":{"$ref":"#/components/schemas/Randao"}}},"GetPeerScoresResponse":{"title":"GetPeerScoresResponse","type":"object","required":["data"],"properties":{"data":{"type":"array","items":{"type":"object","required":["peer_id","gossip_score"],"properties":{"peer_id":{"type":"string"},"gossip_score":{"type":"number","format":"double"}}}}}},"PreparedProposersType":{"title":"PreparedProposersType","type":"object","required":["proposer_index","fee_recipient","expiry_slot"],"properties":{"proposer_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"fee_recipient":{"type":"string","description":"Hex encoded deposit contract address with 0x prefix","example":"0x1Db3439a222C519ab44bb1144fC28167b4Fa6EE6","format":"byte"},"expiry_slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}},"BeaconBlockPhase0":{"title":"BeaconBlockPhase0","type":"object","required":["slot","proposer_index","parent_root","state_root","body"],"properties":{"slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"proposer_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"parent_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"state_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"body":{"$ref":"#/components/schemas/BeaconBlockBodyPhase0"}}},"GetBlockAttestationsResponse":{"title":"GetBlockAttestationsResponse","type":"object","required":["execution_optimistic","finalized","data"],"properties":{"execution_optimistic":{"type":"boolean"},"finalized":{"type":"boolean"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Attestation"}}}},"GetBlsToExecutionChangeResponse":{"title":"GetBlsToExecutionChangeResponse","type":"object","required":["data"],"properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/SignedBLSToExecutionChange"}}}},"PostValidatorLivenessResponse":{"title":"PostValidatorLivenessResponse","type":"object","required":["data"],"properties":{"data":{"type":"array","items":{"type":"object","required":["index","epoch","is_live"],"properties":{"index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"epoch":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"is_live":{"type":"boolean"}}}}}},"GetEpochCommitteesResponse":{"title":"GetEpochCommitteesResponse","type":"object","required":["execution_optimistic","finalized","data"],"properties":{"execution_optimistic":{"type":"boolean"},"finalized":{"type":"boolean"},"data":{"type":"array","items":{"type":"object","required":["index","slot","validators"],"properties":{"index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"validators":{"type":"array","items":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}}}}}},"SyncCommitteeMessage":{"title":"SyncCommitteeMessage","type":"object","required":["slot","beacon_block_root","validator_index","signature"],"properties":{"slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"beacon_block_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"validator_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"signature":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"GetBlockHeadersResponse":{"title":"GetBlockHeadersResponse","type":"object","required":["execution_optimistic","finalized","data"],"properties":{"execution_optimistic":{"type":"boolean"},"finalized":{"type":"boolean"},"data":{"type":"array","items":{"type":"object","required":["root","canonical","header"],"properties":{"root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"canonical":{"type":"boolean"},"header":{"$ref":"#/components/schemas/SignedBeaconBlockHeader"}}}}}},"GetNetworkIdentityResponse":{"title":"GetNetworkIdentityResponse","type":"object","required":["data"],"properties":{"data":{"$ref":"#/components/schemas/NetworkIdentity"}}},"Pubkey":{"type":"string","title":"Pubkey","pattern":"^0x[a-fA-F0-9]{96}$","description":"The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._","example":"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a"},"SignedBeaconBlockAltair":{"title":"SignedBeaconBlockAltair","type":"object","required":["message","signature"],"properties":{"message":{"$ref":"#/components/schemas/BeaconBlockAltair"},"signature":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"BeaconStateCapella":{"title":"BeaconStateCapella","type":"object","required":["genesis_time","genesis_validators_root","slot","fork","latest_block_header","block_roots","state_roots","historical_roots","eth1_data","eth1_data_votes","eth1_deposit_index","validators","balances","randao_mixes","slashings","previous_epoch_participation","current_epoch_participation","justification_bits","previous_justified_checkpoint","current_justified_checkpoint","finalized_checkpoint","inactivity_scores","current_sync_committee","next_sync_committee","latest_execution_payload_header","next_withdrawal_index","next_withdrawal_validator_index","historical_summaries"],"properties":{"genesis_time":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"genesis_validators_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"fork":{"$ref":"#/components/schemas/Fork"},"latest_block_header":{"$ref":"#/components/schemas/BeaconBlockHeader"},"block_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}},"state_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}},"historical_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}},"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"eth1_data_votes":{"type":"array","items":{"$ref":"#/components/schemas/Eth1Data"}},"eth1_deposit_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"validators":{"type":"array","items":{"$ref":"#/components/schemas/Validator"}},"balances":{"type":"array","items":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}},"randao_mixes":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}},"slashings":{"type":"array","items":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}},"previous_epoch_participation":{"type":"array","items":{"type":"string","example":"1","description":"unsigned 8 bit integer, max value 255","format":"uint8"}},"current_epoch_participation":{"type":"array","items":{"type":"string","example":"1","description":"unsigned 8 bit integer, max value 255","format":"uint8"}},"justification_bits":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"previous_justified_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"current_justified_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"finalized_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"inactivity_scores":{"type":"array","items":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}},"current_sync_committee":{"$ref":"#/components/schemas/SyncCommittee"},"next_sync_committee":{"$ref":"#/components/schemas/SyncCommittee"},"latest_execution_payload_header":{"$ref":"#/components/schemas/ExecutionPayloadHeaderCapella"},"next_withdrawal_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"next_withdrawal_validator_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"historical_summaries":{"type":"array","items":{"$ref":"#/components/schemas/HistoricalSummary"}}}},"BeaconBlockBodyBellatrix":{"title":"BeaconBlockBodyBellatrix","type":"object","required":["randao_reveal","eth1_data","graffiti","proposer_slashings","attester_slashings","attestations","deposits","voluntary_exits","sync_aggregate","execution_payload"],"properties":{"randao_reveal":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"graffiti":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"proposer_slashings":{"type":"array","items":{"$ref":"#/components/schemas/ProposerSlashing"}},"attester_slashings":{"type":"array","items":{"$ref":"#/components/schemas/AttesterSlashing"}},"attestations":{"type":"array","items":{"$ref":"#/components/schemas/Attestation"}},"deposits":{"type":"array","items":{"$ref":"#/components/schemas/Deposit"}},"voluntary_exits":{"type":"array","items":{"$ref":"#/components/schemas/SignedVoluntaryExit"}},"sync_aggregate":{"$ref":"#/components/schemas/SyncAggregate"},"execution_payload":{"$ref":"#/components/schemas/ExecutionPayloadBellatrix"}}},"BeaconBlockBellatrix":{"title":"BeaconBlockBellatrix","type":"object","required":["slot","proposer_index","parent_root","state_root","body"],"properties":{"slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"proposer_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"parent_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"state_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"body":{"$ref":"#/components/schemas/BeaconBlockBodyBellatrix"}}},"Level":{"type":"string","title":"Level","description":"Level string","example":"ERROR","format":"string"},"SignedBeaconBlockBellatrix":{"title":"SignedBeaconBlockBellatrix","type":"object","required":["message","signature"],"properties":{"message":{"$ref":"#/components/schemas/BeaconBlockBellatrix"},"signature":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"NetworkIdentity":{"title":"NetworkIdentity","type":"object","required":["peer_id","p2p_addresses","discovery_addresses","metadata"],"properties":{"peer_id":{"type":"string","description":"Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)","example":"QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N"},"enr":{"type":"string","description":"Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)","example":"enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8"},"p2p_addresses":{"type":"array","items":{"type":"string","description":"Node's addresses on which eth2 rpc requests are served. [Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)","example":"/ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N"}},"discovery_addresses":{"type":"array","items":{"type":"string","description":"Node's addresses on which is listening for discv5 requests. [Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)","example":"/ip4/7.7.7.7/udp/30303/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N"}},"metadata":{"$ref":"#/components/schemas/MetaData"}}},"SignedBLSToExecutionChange":{"title":"SignedBLSToExecutionChange","type":"object","required":["message","signature"],"properties":{"message":{"$ref":"#/components/schemas/BLSToExecutionChange"},"signature":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"ExecutionPayloadHeaderCapella":{"title":"ExecutionPayloadHeaderCapella","type":"object","required":["parent_hash","fee_recipient","state_root","receipts_root","logs_bloom","prev_randao","block_number","gas_limit","gas_used","timestamp","extra_data","base_fee_per_gas","block_hash","transactions_root","withdrawals_root"],"properties":{"parent_hash":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"fee_recipient":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"state_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"receipts_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"logs_bloom":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"prev_randao":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"block_number":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"gas_limit":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"gas_used":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"timestamp":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"extra_data":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ encoded byte list","format":"bytes"},"base_fee_per_gas":{"type":"string","description":"unsigned 256 bit integer","example":"1","format":"uint256"},"block_hash":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"transactions_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"withdrawals_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}}},"GetSpecResponse":{"title":"GetSpecResponse","type":"object","required":["data"],"properties":{"data":{"type":"object","additionalProperties":{"type":"string"}}}},"GetPoolAttestationsResponse":{"title":"GetPoolAttestationsResponse","type":"object","required":["data"],"properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/Attestation"}}}},"BlindedBlockBodyBellatrix":{"title":"BlindedBlockBodyBellatrix","type":"object","required":["randao_reveal","eth1_data","graffiti","proposer_slashings","attester_slashings","attestations","deposits","voluntary_exits","sync_aggregate","execution_payload_header"],"properties":{"randao_reveal":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"graffiti":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"proposer_slashings":{"type":"array","items":{"$ref":"#/components/schemas/ProposerSlashing"}},"attester_slashings":{"type":"array","items":{"$ref":"#/components/schemas/AttesterSlashing"}},"attestations":{"type":"array","items":{"$ref":"#/components/schemas/Attestation"}},"deposits":{"type":"array","items":{"$ref":"#/components/schemas/Deposit"}},"voluntary_exits":{"type":"array","items":{"$ref":"#/components/schemas/SignedVoluntaryExit"}},"sync_aggregate":{"$ref":"#/components/schemas/SyncAggregate"},"execution_payload_header":{"$ref":"#/components/schemas/ExecutionPayloadHeaderBellatrix"}}},"ErrorListBadRequest":{"title":"ErrorListBadRequest","type":"object","required":["code","message","failures"],"properties":{"code":{"type":"number"},"message":{"type":"string"},"failures":{"type":"array","items":{"$ref":"#/components/schemas/SubmitDataError"}}}},"GetEth1DataCacheResponse":{"title":"GetEth1DataCacheResponse","type":"object","required":["data"],"properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/Eth1Data"}}}},"ValidatorRegistration":{"title":"ValidatorRegistration","type":"object","required":["fee_recipient","gas_limit","timestamp","pubkey"],"properties":{"fee_recipient":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"gas_limit":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"timestamp":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"pubkey":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"Bytes48 hexadecimal","format":"bytes"}}},"SignedBeaconBlockCapella":{"title":"SignedBeaconBlockCapella","type":"object","required":["message","signature"],"properties":{"message":{"$ref":"#/components/schemas/BeaconBlockCapella"},"signature":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"GetVersionResponse":{"title":"GetVersionResponse","type":"object","required":["data"],"properties":{"data":{"type":"object","required":["version"],"properties":{"version":{"type":"string"}}}}},"GetHashTreeRootResponse":{"title":"GetHashTreeRootResponse","type":"object","required":["data"],"properties":{"data":{"type":"object","required":["root"],"properties":{"root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}}}}},"GetEth1DataResponse":{"title":"GetEth1DataResponse","type":"object","required":["data"],"properties":{"data":{"$ref":"#/components/schemas/Eth1Data"}}},"BeaconStateBellatrix":{"title":"BeaconStateBellatrix","type":"object","required":["genesis_time","genesis_validators_root","slot","fork","latest_block_header","block_roots","state_roots","historical_roots","eth1_data","eth1_data_votes","eth1_deposit_index","validators","balances","randao_mixes","slashings","previous_epoch_participation","current_epoch_participation","justification_bits","previous_justified_checkpoint","current_justified_checkpoint","finalized_checkpoint","inactivity_scores","current_sync_committee","next_sync_committee","latest_execution_payload_header"],"properties":{"genesis_time":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"genesis_validators_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"fork":{"$ref":"#/components/schemas/Fork"},"latest_block_header":{"$ref":"#/components/schemas/BeaconBlockHeader"},"block_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}},"state_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}},"historical_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}},"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"eth1_data_votes":{"type":"array","items":{"$ref":"#/components/schemas/Eth1Data"}},"eth1_deposit_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"validators":{"type":"array","items":{"$ref":"#/components/schemas/Validator"}},"balances":{"type":"array","items":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}},"randao_mixes":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}},"slashings":{"type":"array","items":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}},"previous_epoch_participation":{"type":"array","items":{"type":"string","example":"1","description":"unsigned 8 bit integer, max value 255","format":"uint8"}},"current_epoch_participation":{"type":"array","items":{"type":"string","example":"1","description":"unsigned 8 bit integer, max value 255","format":"uint8"}},"justification_bits":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"previous_justified_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"current_justified_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"finalized_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"inactivity_scores":{"type":"array","items":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}},"current_sync_committee":{"$ref":"#/components/schemas/SyncCommittee"},"next_sync_committee":{"$ref":"#/components/schemas/SyncCommittee"},"latest_execution_payload_header":{"$ref":"#/components/schemas/ExecutionPayloadHeaderBellatrix"}}},"BlindedBlockBodyCapella":{"title":"BlindedBlockBodyCapella","type":"object","required":["randao_reveal","eth1_data","graffiti","proposer_slashings","attester_slashings","attestations","deposits","voluntary_exits","sync_aggregate","execution_payload_header","bls_to_execution_changes"],"properties":{"randao_reveal":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"graffiti":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"proposer_slashings":{"type":"array","items":{"$ref":"#/components/schemas/ProposerSlashing"}},"attester_slashings":{"type":"array","items":{"$ref":"#/components/schemas/AttesterSlashing"}},"attestations":{"type":"array","items":{"$ref":"#/components/schemas/Attestation"}},"deposits":{"type":"array","items":{"$ref":"#/components/schemas/Deposit"}},"voluntary_exits":{"type":"array","items":{"$ref":"#/components/schemas/SignedVoluntaryExit"}},"sync_aggregate":{"$ref":"#/components/schemas/SyncAggregate"},"execution_payload_header":{"$ref":"#/components/schemas/ExecutionPayloadHeaderCapella"},"bls_to_execution_changes":{"type":"array","items":{"$ref":"#/components/schemas/SignedBLSToExecutionChange"}}}},"GetPoolProposerSlashingsResponse":{"title":"GetPoolProposerSlashingsResponse","type":"object","required":["data"],"properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/ProposerSlashing"}}}},"GetSyncCommitteeRewards":{"title":"GetSyncCommitteeRewards","type":"object","required":["execution_optimistic","finalized","data"],"properties":{"execution_optimistic":{"type":"boolean"},"finalized":{"type":"boolean"},"data":{"type":"array","items":{"type":"object","required":["validator_index","reward"],"properties":{"validator_index":{"type":"string","description":"The validator index receiving this reward","example":"1","format":"integer"},"reward":{"type":"string","description":"The sync committee reward in GWEI for the validator","example":"1","format":"long"}}}}}},"SignedValidatorRegistration":{"title":"SignedValidatorRegistration","type":"object","required":["message","signature"],"properties":{"message":{"$ref":"#/components/schemas/ValidatorRegistration"},"signature":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"GetPoolAttesterSlashingsResponse":{"title":"GetPoolAttesterSlashingsResponse","type":"object","required":["data"],"properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/AttesterSlashing"}}}},"Eth1VotingSummary":{"title":"Eth1VotingSummary","type":"object","required":["state_eth1_data","eth1_data_votes","votes_required","voting_period_slots","voting_period_slots_left"],"properties":{"state_eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"eth1_data_votes":{"type":"array","items":{"$ref":"#/components/schemas/Eth1DataWithVotes"}},"votes_required":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"voting_period_slots":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"voting_period_slots_left":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}},"Fork":{"title":"Fork","type":"object","required":["previous_version","current_version","epoch"],"properties":{"previous_version":{"type":"string","description":"Bytes4 hexadecimal","example":"0xcf8e0d4e","format":"byte"},"current_version":{"type":"string","description":"Bytes4 hexadecimal","example":"0xcf8e0d4e","format":"byte"},"epoch":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}},"GetValidatorInclusionResponse":{"title":"GetValidatorInclusionResponse","type":"object","required":["data"],"properties":{"data":{"type":"object","required":["is_slashed","is_withdrawable_in_current_epoch","is_active_unslashed_in_current_epoch","is_active_unslashed_in_previous_epoch","current_epoch_effective_balance_gwei","is_current_epoch_target_attester","is_previous_epoch_target_attester","is_previous_epoch_head_attester"],"properties":{"is_slashed":{"type":"boolean"},"is_withdrawable_in_current_epoch":{"type":"boolean"},"is_active_unslashed_in_current_epoch":{"type":"boolean"},"is_active_unslashed_in_previous_epoch":{"type":"boolean"},"current_epoch_effective_balance_gwei":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"is_current_epoch_target_attester":{"type":"boolean"},"is_previous_epoch_target_attester":{"type":"boolean"},"is_previous_epoch_head_attester":{"type":"boolean"}}}}},"ExecutionPayloadBellatrix":{"title":"ExecutionPayloadBellatrix","type":"object","required":["parent_hash","fee_recipient","state_root","receipts_root","logs_bloom","prev_randao","block_number","gas_limit","gas_used","timestamp","extra_data","base_fee_per_gas","block_hash","transactions"],"properties":{"parent_hash":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"fee_recipient":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"state_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"receipts_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"logs_bloom":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"prev_randao":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"block_number":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"gas_limit":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"gas_used":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"timestamp":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"extra_data":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ encoded byte list","format":"bytes"},"base_fee_per_gas":{"type":"string","description":"unsigned 256 bit integer","example":"1","format":"uint256"},"block_hash":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"transactions":{"type":"array","items":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ encoded byte list","format":"bytes"}}}},"GetPeerResponse":{"title":"GetPeerResponse","type":"object","required":["data"],"properties":{"data":{"$ref":"#/components/schemas/Peer"}}},"SignedVoluntaryExit":{"title":"SignedVoluntaryExit","type":"object","required":["message","signature"],"properties":{"message":{"$ref":"#/components/schemas/VoluntaryExit"},"signature":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"BlindedBlockCapella":{"title":"BlindedBlockCapella","type":"object","required":["slot","proposer_index","parent_root","state_root","body"],"properties":{"slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"proposer_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"parent_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"state_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"body":{"$ref":"#/components/schemas/BlindedBlockBodyCapella"}}},"Deposit":{"title":"Deposit","type":"object","required":["proof","data"],"properties":{"proof":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}},"data":{"$ref":"#/components/schemas/DepositData"}}},"BeaconStatePhase0":{"title":"BeaconStatePhase0","type":"object","required":["genesis_time","genesis_validators_root","slot","fork","latest_block_header","block_roots","state_roots","historical_roots","eth1_data","eth1_data_votes","eth1_deposit_index","validators","balances","randao_mixes","slashings","previous_epoch_attestations","current_epoch_attestations","justification_bits","previous_justified_checkpoint","current_justified_checkpoint","finalized_checkpoint"],"properties":{"genesis_time":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"genesis_validators_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"fork":{"$ref":"#/components/schemas/Fork"},"latest_block_header":{"$ref":"#/components/schemas/BeaconBlockHeader"},"block_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}},"state_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}},"historical_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}},"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"eth1_data_votes":{"type":"array","items":{"$ref":"#/components/schemas/Eth1Data"}},"eth1_deposit_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"validators":{"type":"array","items":{"$ref":"#/components/schemas/Validator"}},"balances":{"type":"array","items":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}},"randao_mixes":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}},"slashings":{"type":"array","items":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}},"previous_epoch_attestations":{"type":"array","items":{"$ref":"#/components/schemas/PendingAttestation"}},"current_epoch_attestations":{"type":"array","items":{"$ref":"#/components/schemas/PendingAttestation"}},"justification_bits":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"previous_justified_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"current_justified_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"finalized_checkpoint":{"$ref":"#/components/schemas/Checkpoint"}}},"GetAllBlocksAtSlotResponse":{"title":"GetAllBlocksAtSlotResponse","type":"object","required":["version","data"],"properties":{"version":{"type":"string","enum":["phase0","altair","bellatrix","capella","deneb"]},"data":{"type":"array","items":{"type":"object","required":["message","signature","root"],"properties":{"message":{"title":"BeaconBlock","type":"object","oneOf":[{"$ref":"#/components/schemas/BeaconBlockPhase0"},{"$ref":"#/components/schemas/BeaconBlockAltair"},{"$ref":"#/components/schemas/BeaconBlockBellatrix"},{"$ref":"#/components/schemas/BeaconBlockCapella"}]},"signature":{"type":"string","description":"`BLSSignature Hex` BLS12-381 signature for the current epoch.","example":"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505","format":"byte"},"root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}}}}}},"SignedBeaconBlockPhase0":{"title":"SignedBeaconBlockPhase0","type":"object","required":["message","signature"],"properties":{"message":{"$ref":"#/components/schemas/BeaconBlockPhase0"},"signature":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"BeaconStateAltair":{"title":"BeaconStateAltair","type":"object","required":["genesis_time","genesis_validators_root","slot","fork","latest_block_header","block_roots","state_roots","historical_roots","eth1_data","eth1_data_votes","eth1_deposit_index","validators","balances","randao_mixes","slashings","previous_epoch_participation","current_epoch_participation","justification_bits","previous_justified_checkpoint","current_justified_checkpoint","finalized_checkpoint","inactivity_scores","current_sync_committee","next_sync_committee"],"properties":{"genesis_time":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"genesis_validators_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"fork":{"$ref":"#/components/schemas/Fork"},"latest_block_header":{"$ref":"#/components/schemas/BeaconBlockHeader"},"block_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}},"state_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}},"historical_roots":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}},"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"eth1_data_votes":{"type":"array","items":{"$ref":"#/components/schemas/Eth1Data"}},"eth1_deposit_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"validators":{"type":"array","items":{"$ref":"#/components/schemas/Validator"}},"balances":{"type":"array","items":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}},"randao_mixes":{"type":"array","items":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}},"slashings":{"type":"array","items":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}},"previous_epoch_participation":{"type":"array","items":{"type":"string","example":"1","description":"unsigned 8 bit integer, max value 255","format":"uint8"}},"current_epoch_participation":{"type":"array","items":{"type":"string","example":"1","description":"unsigned 8 bit integer, max value 255","format":"uint8"}},"justification_bits":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"previous_justified_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"current_justified_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"finalized_checkpoint":{"$ref":"#/components/schemas/Checkpoint"},"inactivity_scores":{"type":"array","items":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}},"current_sync_committee":{"$ref":"#/components/schemas/SyncCommittee"},"next_sync_committee":{"$ref":"#/components/schemas/SyncCommittee"}}},"ProposerSlashing":{"title":"ProposerSlashing","type":"object","required":["signed_header_1","signed_header_2"],"properties":{"signed_header_1":{"$ref":"#/components/schemas/SignedBeaconBlockHeader"},"signed_header_2":{"$ref":"#/components/schemas/SignedBeaconBlockHeader"}}},"BlindedBlockBellatrix":{"title":"BlindedBlockBellatrix","type":"object","required":["slot","proposer_index","parent_root","state_root","body"],"properties":{"slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"proposer_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"parent_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"state_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"body":{"$ref":"#/components/schemas/BlindedBlockBodyBellatrix"}}},"SyncAggregate":{"title":"SyncAggregate","type":"object","required":["sync_committee_bits","sync_committee_signature"],"properties":{"sync_committee_bits":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"sync_committee_signature":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"GetStateValidatorBalancesResponse":{"title":"GetStateValidatorBalancesResponse","type":"object","required":["execution_optimistic","finalized","data"],"properties":{"execution_optimistic":{"type":"boolean"},"finalized":{"type":"boolean"},"data":{"type":"array","items":{"type":"object","required":["index","balance"],"properties":{"index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"balance":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}}}}},"GetStateValidatorResponse":{"title":"GetStateValidatorResponse","type":"object","required":["execution_optimistic","finalized","data"],"properties":{"execution_optimistic":{"type":"boolean"},"finalized":{"type":"boolean"},"data":{"type":"object","required":["index","balance","status","validator"],"properties":{"index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"balance":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"status":{"type":"string","enum":["pending_initialized","pending_queued","active_ongoing","active_exiting","active_slashed","exited_unslashed","exited_slashed","withdrawal_possible","withdrawal_done"]},"validator":{"$ref":"#/components/schemas/Validator"}}}}},"DepositData":{"title":"DepositData","type":"object","required":["pubkey","withdrawal_credentials","amount","signature"],"properties":{"pubkey":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"Bytes48 hexadecimal","format":"bytes"},"withdrawal_credentials":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"amount":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"signature":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"GetNewBlindedBlockResponse":{"title":"GetNewBlindedBlockResponse","type":"object","required":["data","version"],"properties":{"data":{"title":"BlindedBlock","type":"object","oneOf":[{"$ref":"#/components/schemas/BeaconBlockPhase0"},{"$ref":"#/components/schemas/BeaconBlockAltair"},{"$ref":"#/components/schemas/BlindedBlockBellatrix"},{"$ref":"#/components/schemas/BlindedBlockCapella"}]},"version":{"type":"string","enum":["phase0","altair","bellatrix","capella","deneb"]}}},"GetBlockHeaderResponse":{"title":"GetBlockHeaderResponse","type":"object","required":["data","execution_optimistic","finalized"],"properties":{"data":{"type":"object","required":["root","canonical","header"],"properties":{"root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"canonical":{"type":"boolean"},"header":{"$ref":"#/components/schemas/SignedBeaconBlockHeader"}}},"execution_optimistic":{"type":"boolean"},"finalized":{"type":"boolean"}}},"GetPeersResponse":{"title":"GetPeersResponse","type":"object","required":["data","meta"],"properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/Peer"}},"meta":{"$ref":"#/components/schemas/Meta"}}},"GetBlockV2Response":{"title":"GetBlockV2Response","type":"object","required":["version","execution_optimistic","finalized","data"],"properties":{"version":{"type":"string","enum":["phase0","altair","bellatrix","capella","deneb"]},"execution_optimistic":{"type":"boolean"},"finalized":{"type":"boolean"},"data":{"title":"SignedBeaconBlock","type":"object","oneOf":[{"$ref":"#/components/schemas/SignedBeaconBlockPhase0"},{"$ref":"#/components/schemas/SignedBeaconBlockAltair"},{"$ref":"#/components/schemas/SignedBeaconBlockBellatrix"},{"$ref":"#/components/schemas/SignedBeaconBlockCapella"}]}}},"GetStateV2Response":{"title":"GetStateV2Response","type":"object","required":["version","execution_optimistic","finalized","data"],"properties":{"version":{"type":"string","enum":["phase0","altair","bellatrix","capella","deneb"]},"execution_optimistic":{"type":"boolean"},"finalized":{"type":"boolean"},"data":{"title":"BeaconState","type":"object","oneOf":[{"$ref":"#/components/schemas/BeaconStatePhase0"},{"$ref":"#/components/schemas/BeaconStateAltair"},{"$ref":"#/components/schemas/BeaconStateBellatrix"},{"$ref":"#/components/schemas/BeaconStateCapella"}]}}},"SignedAggregateAndProof":{"title":"SignedAggregateAndProof","type":"object","required":["message","signature"],"properties":{"message":{"$ref":"#/components/schemas/AggregateAndProof"},"signature":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"GetBlockRootResponse":{"title":"GetBlockRootResponse","type":"object","required":["data","execution_optimistic","finalized"],"properties":{"data":{"type":"object","required":["root"],"properties":{"root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}}},"execution_optimistic":{"type":"boolean"},"finalized":{"type":"boolean"}}},"ProposersData":{"title":"ProposersData","type":"object","required":["prepared_proposers","registered_validators"],"properties":{"prepared_proposers":{"type":"array","items":{"$ref":"#/components/schemas/PreparedProposersType"}},"registered_validators":{"type":"array","items":{"$ref":"#/components/schemas/RegisteredValidatorsType"}}}},"ChainHeadV2":{"title":"ChainHeadV2","type":"object","required":["slot","root","execution_optimistic"],"properties":{"slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"execution_optimistic":{"type":"boolean"}}},"GetGlobalValidatorInclusionResponse":{"title":"GetGlobalValidatorInclusionResponse","type":"object","required":["data"],"properties":{"data":{"type":"object","required":["current_epoch_active_gwei","previous_epoch_active_gwei","current_epoch_target_attesting_gwei","previous_epoch_target_attesting_gwei","previous_epoch_head_attesting_gwei"],"properties":{"current_epoch_active_gwei":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"previous_epoch_active_gwei":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"current_epoch_target_attesting_gwei":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"previous_epoch_target_attesting_gwei":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"previous_epoch_head_attesting_gwei":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}}}},"GetDepositContractResponse":{"title":"GetDepositContractResponse","type":"object","required":["data"],"properties":{"data":{"type":"object","required":["chain_id","address"],"properties":{"chain_id":{"type":"string","description":"Id of Eth1 chain on which contract is deployed.","example":"1","format":"uint64"},"address":{"type":"string","description":"Hex encoded deposit contract address with 0x prefix","example":"0x1Db3439a222C519ab44bb1144fC28167b4Fa6EE6","format":"byte"}}}}},"GetStateForkResponse":{"title":"GetStateForkResponse","description":"Returns [Fork](https://github.com/ethereum/consensus-specs/blob/v0.11.1/specs/phase0/beacon-chain.md#fork) object for state with given 'stateId'.","type":"object","required":["execution_optimistic","finalized","data"],"properties":{"execution_optimistic":{"type":"boolean"},"finalized":{"type":"boolean"},"data":{"$ref":"#/components/schemas/Fork"}}},"Randao":{"title":"Randao","type":"object","required":["randao"],"properties":{"randao":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}}},"GetEth1VotingSummaryResponse":{"title":"GetEth1VotingSummaryResponse","type":"object","required":["data"],"properties":{"data":{"$ref":"#/components/schemas/Eth1VotingSummary"}}},"AttestationData":{"title":"AttestationData","type":"object","required":["slot","index","beacon_block_root","source","target"],"properties":{"slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"beacon_block_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"source":{"$ref":"#/components/schemas/Checkpoint"},"target":{"$ref":"#/components/schemas/Checkpoint"}}},"SignedBlindedBlockCapella":{"title":"SignedBlindedBlockCapella","type":"object","required":["message","signature"],"properties":{"message":{"$ref":"#/components/schemas/BlindedBlockCapella"},"signature":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"SubmitDataError":{"title":"SubmitDataError","type":"object","required":["index","message"],"properties":{"index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"message":{"type":"string"}}},"BeaconBlockBodyAltair":{"title":"BeaconBlockBodyAltair","type":"object","required":["randao_reveal","eth1_data","graffiti","proposer_slashings","attester_slashings","attestations","deposits","voluntary_exits","sync_aggregate"],"properties":{"randao_reveal":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"graffiti":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"proposer_slashings":{"type":"array","items":{"$ref":"#/components/schemas/ProposerSlashing"}},"attester_slashings":{"type":"array","items":{"$ref":"#/components/schemas/AttesterSlashing"}},"attestations":{"type":"array","items":{"$ref":"#/components/schemas/Attestation"}},"deposits":{"type":"array","items":{"$ref":"#/components/schemas/Deposit"}},"voluntary_exits":{"type":"array","items":{"$ref":"#/components/schemas/SignedVoluntaryExit"}},"sync_aggregate":{"$ref":"#/components/schemas/SyncAggregate"}}},"BeaconBlockCapella":{"title":"BeaconBlockCapella","type":"object","required":["slot","proposer_index","parent_root","state_root","body"],"properties":{"slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"proposer_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"parent_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"state_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"body":{"$ref":"#/components/schemas/BeaconBlockBodyCapella"}}},"GetPeerCountResponse":{"title":"GetPeerCountResponse","type":"object","required":["data"],"properties":{"data":{"type":"object","required":["disconnected","connecting","connected","disconnecting"],"properties":{"disconnected":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"connecting":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"connected":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"disconnecting":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}}}},"AggregateAndProof":{"title":"AggregateAndProof","type":"object","required":["aggregator_index","aggregate","selection_proof"],"properties":{"aggregator_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"aggregate":{"$ref":"#/components/schemas/Attestation"},"selection_proof":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"SignedBeaconBlockHeader":{"title":"SignedBeaconBlockHeader","type":"object","required":["message","signature"],"properties":{"message":{"$ref":"#/components/schemas/BeaconBlockHeader"},"signature":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"BeaconBlockBodyPhase0":{"title":"BeaconBlockBodyPhase0","type":"object","required":["randao_reveal","eth1_data","graffiti","proposer_slashings","attester_slashings","attestations","deposits","voluntary_exits"],"properties":{"randao_reveal":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"graffiti":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"proposer_slashings":{"type":"array","items":{"$ref":"#/components/schemas/ProposerSlashing"}},"attester_slashings":{"type":"array","items":{"$ref":"#/components/schemas/AttesterSlashing"}},"attestations":{"type":"array","items":{"$ref":"#/components/schemas/Attestation"}},"deposits":{"type":"array","items":{"$ref":"#/components/schemas/Deposit"}},"voluntary_exits":{"type":"array","items":{"$ref":"#/components/schemas/SignedVoluntaryExit"}}}},"Eth1DataWithVotes":{"title":"Eth1DataWithVotes","type":"object","required":["eth1_data","votes"],"properties":{"eth1_data":{"$ref":"#/components/schemas/Eth1Data"},"votes":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}},"SyncCommittee":{"title":"SyncCommittee","type":"object","required":["pubkeys","aggregate_pubkey"],"properties":{"pubkeys":{"type":"array","items":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"Bytes48 hexadecimal","format":"bytes"}},"aggregate_pubkey":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"Bytes48 hexadecimal","format":"bytes"}}},"GetDepositsResponse":{"title":"GetDepositsResponse","type":"object","required":["data"],"properties":{"data":{"type":"array","items":{"type":"object","required":["index","data"],"properties":{"index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"data":{"$ref":"#/components/schemas/DepositData"}}}}}},"RegisteredValidatorsType":{"title":"RegisteredValidatorsType","type":"object","required":["proposer_index","pubkey","fee_recipient","gas_limit","timestamp","expiry_slot"],"properties":{"proposer_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"pubkey":{"$ref":"#/components/schemas/Pubkey"},"fee_recipient":{"type":"string","description":"Hex encoded deposit contract address with 0x prefix","example":"0x1Db3439a222C519ab44bb1144fC28167b4Fa6EE6","format":"byte"},"gas_limit":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"timestamp":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"expiry_slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}},"SignedContributionAndProof":{"title":"SignedContributionAndProof","type":"object","required":["message","signature"],"properties":{"message":{"$ref":"#/components/schemas/ContributionAndProof"},"signature":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"GetStateValidatorsResponse":{"title":"GetStateValidatorsResponse","type":"object","required":["execution_optimistic","finalized","data"],"properties":{"execution_optimistic":{"type":"boolean"},"finalized":{"type":"boolean"},"data":{"type":"array","items":{"type":"object","required":["index","balance","status","validator"],"properties":{"index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"balance":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"status":{"type":"string","enum":["pending_initialized","pending_queued","active_ongoing","active_exiting","active_slashed","exited_unslashed","exited_slashed","withdrawal_possible","withdrawal_done"]},"validator":{"$ref":"#/components/schemas/Validator"}}}}}},"ExecutionPayloadHeaderBellatrix":{"title":"ExecutionPayloadHeaderBellatrix","type":"object","required":["parent_hash","fee_recipient","state_root","receipts_root","logs_bloom","prev_randao","block_number","gas_limit","gas_used","timestamp","extra_data","base_fee_per_gas","block_hash","transactions_root"],"properties":{"parent_hash":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"fee_recipient":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"state_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"receipts_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"logs_bloom":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"prev_randao":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"block_number":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"gas_limit":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"gas_used":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"timestamp":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"extra_data":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ encoded byte list","format":"bytes"},"base_fee_per_gas":{"type":"string","description":"unsigned 256 bit integer","example":"1","format":"uint256"},"block_hash":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"transactions_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}}},"GetAttestationRewards":{"title":"GetAttestationRewards","type":"object","required":["execution_optimistic","finalized","data"],"properties":{"execution_optimistic":{"type":"boolean"},"finalized":{"type":"boolean"},"data":{"type":"object","required":["ideal_rewards","total_rewards"],"properties":{"ideal_rewards":{"type":"array","items":{"type":"object","required":["effective_balance","head","target","source"],"properties":{"effective_balance":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"head":{"type":"string","description":"long string","example":"1","format":"long"},"target":{"type":"string","description":"long string","example":"1","format":"long"},"source":{"type":"string","description":"long string","example":"1","format":"long"}}}},"total_rewards":{"type":"array","items":{"type":"object","required":["validator_index","head","target","source"],"properties":{"validator_index":{"type":"string","description":"long string","example":"1","format":"long"},"head":{"type":"string","description":"long string","example":"1","format":"long"},"target":{"type":"string","description":"long string","example":"1","format":"long"},"source":{"type":"string","description":"long string","example":"1","format":"long"},"inclusion_delay":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}}}}}}},"GetAttesterDutiesResponse":{"title":"GetAttesterDutiesResponse","type":"object","required":["dependent_root","execution_optimistic","data"],"properties":{"dependent_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"execution_optimistic":{"type":"boolean"},"data":{"type":"array","items":{"$ref":"#/components/schemas/AttesterDuty"}}}},"GetStateRootResponse":{"title":"GetStateRootResponse","type":"object","required":["execution_optimistic","finalized","data"],"properties":{"execution_optimistic":{"type":"boolean"},"finalized":{"type":"boolean"},"data":{"type":"object","required":["root"],"properties":{"root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"}}}}},"GetSyncCommitteeDutiesResponse":{"title":"GetSyncCommitteeDutiesResponse","type":"object","required":["execution_optimistic","data"],"properties":{"execution_optimistic":{"type":"boolean"},"data":{"type":"array","items":{"type":"object","required":["pubkey","validator_index","validator_sync_committee_indices"],"properties":{"pubkey":{"type":"string","description":"`BLSPublicKey Hex` The validator's BLS public key, uniquely identifying them. 48-bytes, hex encoded with 0x prefix, case insensitive.","example":"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a","format":"string"},"validator_index":{"type":"string","description":"integer string","example":"1","format":"integer"},"validator_sync_committee_indices":{"type":"array","items":{"type":"string","description":"integer string","example":"1","format":"integer"}}}}}}},"ExecutionPayloadCapella":{"title":"ExecutionPayloadCapella","type":"object","required":["parent_hash","fee_recipient","state_root","receipts_root","logs_bloom","prev_randao","block_number","gas_limit","gas_used","timestamp","extra_data","base_fee_per_gas","block_hash","transactions","withdrawals"],"properties":{"parent_hash":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"fee_recipient":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"state_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"receipts_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"logs_bloom":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"prev_randao":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"block_number":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"gas_limit":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"gas_used":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"timestamp":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"extra_data":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ encoded byte list","format":"bytes"},"base_fee_per_gas":{"type":"string","description":"unsigned 256 bit integer","example":"1","format":"uint256"},"block_hash":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"transactions":{"type":"array","items":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ encoded byte list","format":"bytes"}},"withdrawals":{"type":"array","items":{"$ref":"#/components/schemas/Withdrawal"}}}},"BeaconPreparableProposer":{"title":"BeaconPreparableProposer","description":"The fee recipient that should be used by an associated validator index.","type":"object","required":["validator_index","fee_recipient"],"properties":{"validator_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"fee_recipient":{"type":"string","description":"Hex encoded deposit contract address with 0x prefix","example":"0x1Db3439a222C519ab44bb1144fC28167b4Fa6EE6","format":"byte"}}},"SyncCommitteeContribution":{"title":"SyncCommitteeContribution","type":"object","required":["slot","beacon_block_root","subcommittee_index","aggregation_bits","signature"],"properties":{"slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"beacon_block_root":{"type":"string","description":"Bytes32 hexadecimal","example":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2","format":"byte"},"subcommittee_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"aggregation_bits":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"},"signature":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"GetExpectedWithdrawalsResponse":{"title":"GetExpectedWithdrawalsResponse","type":"object","required":["execution_optimistic","finalized","data"],"properties":{"execution_optimistic":{"type":"boolean"},"finalized":{"type":"boolean"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Withdrawal"}}}},"ProduceAttestationDataResponse":{"title":"ProduceAttestationDataResponse","type":"object","required":["data"],"properties":{"data":{"$ref":"#/components/schemas/AttestationData"}}},"GetBlindedBlockResponse":{"title":"GetBlindedBlockResponse","type":"object","required":["version","execution_optimistic","finalized","data"],"properties":{"version":{"type":"string","enum":["phase0","altair","bellatrix","capella","deneb"]},"execution_optimistic":{"type":"boolean"},"finalized":{"type":"boolean"},"data":{"title":"SignedBlindedBeaconBlock","type":"object","oneOf":[{"$ref":"#/components/schemas/SignedBeaconBlockPhase0"},{"$ref":"#/components/schemas/SignedBeaconBlockAltair"},{"$ref":"#/components/schemas/SignedBlindedBlockBellatrix"},{"$ref":"#/components/schemas/SignedBlindedBlockCapella"}]}}},"GetPoolVoluntaryExitsResponse":{"title":"GetPoolVoluntaryExitsResponse","type":"object","required":["data"],"properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/SignedVoluntaryExit"}}}},"ContributionAndProof":{"title":"ContributionAndProof","type":"object","required":["aggregator_index","contribution","selection_proof"],"properties":{"aggregator_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"contribution":{"$ref":"#/components/schemas/SyncCommitteeContribution"},"selection_proof":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"GetForkScheduleResponse":{"title":"GetForkScheduleResponse","description":"Retrieve all forks, past present and future, of which this node is aware.","type":"object","required":["data"],"properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/Fork"}}}},"GetEpochSyncCommitteesResponse":{"title":"GetEpochSyncCommitteesResponse","type":"object","required":["execution_optimistic","finalized","data"],"properties":{"execution_optimistic":{"type":"boolean"},"finalized":{"type":"boolean"},"data":{"type":"object","required":["validators","validator_aggregates"],"properties":{"validators":{"type":"array","items":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}},"validator_aggregates":{"type":"array","items":{"type":"array","items":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}}}}}},"Meta":{"title":"Meta","type":"object","required":["count"],"properties":{"count":{"type":"number","description":"Total number of items"}}},"SignedBlindedBlockBellatrix":{"title":"SignedBlindedBlockBellatrix","type":"object","required":["message","signature"],"properties":{"message":{"$ref":"#/components/schemas/BlindedBlockBellatrix"},"signature":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"GetSyncingStatusResponse":{"title":"GetSyncingStatusResponse","type":"object","required":["data"],"properties":{"data":{"type":"object","required":["head_slot","sync_distance","is_syncing"],"properties":{"head_slot":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"sync_distance":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"is_syncing":{"type":"boolean"},"is_optimistic":{"type":"boolean"},"el_offline":{"type":"boolean"}}}}},"BLSToExecutionChange":{"title":"BLSToExecutionChange","type":"object","required":["validator_index","from_bls_pubkey","to_execution_address"],"properties":{"validator_index":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"},"from_bls_pubkey":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"Bytes48 hexadecimal","format":"bytes"},"to_execution_address":{"type":"string","pattern":"^0x[a-fA-F0-9]{2,}$","description":"SSZ hexadecimal","format":"bytes"}}},"PostSyncCommitteeData":{"title":"PostSyncCommitteeData","type":"object","required":["validator_index","sync_committee_indices","until_epoch"],"properties":{"validator_index":{"type":"string","description":"integer string","example":"1","format":"integer"},"sync_committee_indices":{"type":"array","items":{"type":"string","description":"integer string","example":"1","format":"integer"}},"until_epoch":{"type":"string","description":"unsigned 64 bit integer","example":"1","format":"uint64"}}}}}}